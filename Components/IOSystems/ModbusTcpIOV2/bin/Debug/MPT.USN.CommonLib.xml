<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MPT.USN.CommonLib</name>
    </assembly>
    <members>
        <member name="T:MPT.USN.CommonLib.Process.ProcessBase">
            <summary>
            Summary description for ProcessBase.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.MPTBase">
            <summary>
            Base class for all MPT objects
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MPTBase.ACTIVE_PAGE_INDEX_DEFAULT">
            <summary>
            Keeps track of the currently selected page in the component manager panel
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MPTBase.mclData">
            <summary>
            Create an instance to contain the data
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MPTBase._tabPages">
            <summary>
            List of Tabbed property pages for this component
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MPTBase._methods">
            <summary>
            Used to contain all the method objects
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MPTBase._conditions">
            <summary>
            Used to contain all the Condition objects
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.IsRoot">
            <summary>
            This class is a root class
            </summary>
            <remarks>Decendent data object addresses begin with this object name</remarks>
            <returns></returns>
        </member>
        <member name="F:MPT.USN.CommonLib.MPTBase.definitions">
            <summary>
            Definitions to be used for macro expansion
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.op_Addition(MPT.USN.CommonLib.MPTBase,MPT.USN.CommonLib.MPTBase)">
            <summary>
            Operator
            </summary>
            <param name="mptBase"></param>
            <param name="newChild"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.Equals(System.Object)">
            <summary>
            Determine if the two MPTObjects are equal
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.GetHashCode">
            <summary>
            Must override the Get HashCode with the Equals
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.GetIndex">
            <summary>
            Return the index of this object to its parent
            It first tries to use its name (assuming that there is a number at the end of it)
            Otherwise it returns its place in the array order
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.IsRooted">
            <summary>
            Returns true if this node is rroted to a root node
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.Destroy">
            <summary>
            Destroy Virtual
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.DestroyRecurse">
            <summary>
            Destroy all components at this level and below
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.LogStats">
            <summary>
            LogStats Virtual
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.LogStatsRecurse">
            <summary>
            LogStats all components at this level and below
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.CanClose">
            <summary>
            Set true if everything is OK
            Otherwise display a message and return false;
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.CanCloseRecurse">
            <summary>
            Recursively checks if it is OK to close the application
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.PostReadUpgrade(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Give the component an opportunity to change properties of dataType
            after file read and before registration takes place.
            For example: rename it
            </summary>
            <param name="dt"></param>
            <returns>The new dataType</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.InitializeRecurse">
            <summary>
            Initializes all components at this level and below
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.PostInitializeRecurse">
            <summary>
            Already initialized
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.GetDoubleParameterVal(System.String)">
            <summary>
            Get the value of the data object contained in this class;
            </summary>
            <param name="strParamName"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.Clone(System.Type)">
            <summary>
            Clone this component
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.UpdateDataTextBoxes">
            <summary>
            Updates any text boxes that are displaying the parameters.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.FindDataObject(System.String)">
            <summary>
            Locate the Data object associated with this object
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.GetFieldInstanceList">
            <summary>
            Get a FieldInfo list of all instatiated DataTypes in this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.GetField(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Get the field info for this data object
            </summary>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.GetDataTypes(System.Type,System.Boolean,System.Int32@,MPT.USN.CommonLib.Data.DataType[]@)">
            <summary>
            Return a list of dataType[]
            </summary>
            <param name="ty"></param>
            <param name="onlySerializable"></param>
            <param name="nTotal"></param>
            <param name="dataList"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.GetSMMethods">
            <summary>
            Get a list of all dataTypes instatiated in this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.GetSMConditions">
            <summary>
            Get a list of all dataTypes instatiated in this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.GetFields(System.Type,System.Boolean,System.Int32@,System.Reflection.FieldInfo[]@)">
            <summary>
            Return a list of fields
            </summary>
            <param name="ty"></param>
            <param name="onlySerializable"></param>
            <param name="nTotal"></param>
            <param name="retFldList"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.GetDataInstanceList(System.Boolean)">
            <summary>
            Get a list of all dataTypes instatiated in this object
            </summary>
            <param name="onlySerializable"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.GetPackInDataType(System.String)">
            <summary>
            Returns the datatype that matches the supplied name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.PackOutRecurse">
            <summary>
            Give component an opportunity to perform tasks immediatley before serialization.
            Also packs up collections before file save
            </summary>
            <remarks>
            Serialization (xml file write) will occur when the user hits 'Apply' or exiting the app.
            </remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.PackInRecurse(MPT.USN.CommonLib.MPTBase)">
            <summary>
            Give component an opportunity to perform tasks immediatley after deserialization.
            Also assigns Parent
            </summary>
            <remarks>
            Deserialization (reading from file to populate the public variables) occurs just after the default 
            constructor and before Initialize is called. This makes constructors not a good place to do any work.  
            Serialization (File write) will occur when the user hits “Apply” or exiting the app.
            </remarks>
            <param name="parent"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.GetDBDataType(System.Reflection.FieldInfo)">
            <summary>
            Return the data type if it is DBField
            </summary>
            <param name="fldInfo"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.Register">
            <summary>
            Register this and all decendents
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.RegisterRecurse">
            <summary>
            Register this and all decendents
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.OnStartRecurse">
            <summary>
            Signal to all interested that the State Machines are starting
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.OnStart">
            <summary>
            User has clicked the Run button
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.DBPutIfDirtyRecurse(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Enums.eDBFlag)">
            <summary>
            Register this and all decendents
            </summary>
            <param name="mc"></param>
            <param name="dbFlag"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.MPTBase._putOnlyIfLocked">
            <summary>
            Flag to indicate whether this object should be put to database only if locked 
            (Not just because it is dirty)
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.DBPutIfDirty(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Enums.eDBFlag)">
            <summary>
            Put to database if dirty
            </summary>
            <param name="mc"></param>
            <param name="dbFlag"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.UnRegister">
            <summary>
            UnRegister this and all decendents
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.UnRegisterRecurse">
            <summary>
            UnRegister this and all decendents
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.GetBestDisplayName">
            <summary>
            Retrieves either the Mnemonic name if it exists, or Name for this component
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.GetMnemonic">
            <summary>
            Retrieves the Mnemonic name for this component
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.HasMnemonic">
            <summary>
            Returns true if this object has a mnemonic in the mnemonic table
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.ChangeMnemonicName(System.String,System.String)">
            <summary>
            Appends a mnemonic to the list of mnemonics
            </summary>
            <param name="oldMnemonic"></param>
            <param name="newMnemonic"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.AssignMnemonic(System.String)">
            <summary>
            Appends a mnemonic to the list of mnemonics
            </summary>
            <param name="mnemonic"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.GetMnemonicPath(System.Boolean)">
            <summary>
            Retrieves a full path, but mnemonic names are subsituted where applicatble
            </summary>
            <param name="fullPath">True-returns full path.
            False-returns after first menmonic encountered</param>
            <returns>The final string</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.Update">
            <summary>
            Called from ComponentMgr thread
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.Initialize">
            <summary>
            Base class initialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.PostInitialize">
            <summary>
            Already initialized
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.#ctor">
            <summary>
            Constructor used for xml serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.#ctor(MPT.USN.CommonLib.MPTBase,System.String)">
            <summary>
            Constructor used for 1st time creation
            </summary>
            <param name="parent"></param>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.#ctor(System.String)">
            <summary>
            Constructor used for serialization
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.GetFullPathName">
            <summary>
            Return the full name for this object.  Ex: "root.parent.thisObject"
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.GetParent(System.Type)">
            <summary>
            Search the node tree hierachy for the occurance of a specific class
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.SaveToFile(System.String)">
            <summary>
            Saves the object and all it's decendents to an Xml file
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.ReadDataParameters(System.String,System.String@)">
            <summary>
            Reads parameters from an exported xml file
            </summary>
            <param name="filePath"></param>
            <param name="notFound"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.WriteDataParameters(System.String)">
            <summary>
            Writes parameters to an exported xml file
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add a settings page to the 'tab' of this inherited class.
            If skip is set to true, then any pages assigned to this inherited 
            class will be skipped.
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.RegisterThirdPartyPage(System.Type,System.String,MPT.USN.CommonLib.Comp.ComponentBase)">
            <summary>
            Add a third-party secific property page
            </summary>
            <remarks>Use inside a third-party system driver</remarks>
            <param name="tyItem">Type of the property page</param>
            <param name="pageName">Name for the page</param>
            <param name="comp">The component (ptobably 'this'. Used to rebuild the tab pages.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.RegisterThirdPartyPage(System.Type,System.String)">
            <summary>
            Add a third-party secific property page
            </summary>
            <remarks>Use inside a third-party system driver</remarks>
            <param name="tyItem">Type of the property page</param>
            <param name="pageName">Name for the page</param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.AddThirdPartyPages(System.Windows.Forms.TabControl)">
            <summary>
            Add all registered third party pages
            </summary>
            <param name="tab">Tab control</param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.AddPage(System.Windows.Forms.TabControl,System.Type,System.String)">
            <summary>
            Make sure instance of page exists.
            </summary>
            <param name="tab"></param>
            <param name="type"></param>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.RemoveAndDisposeUnusedPages">
            <summary>
            Remove and dispose un-used pages when run out of scene
            Page which is marked as CanSafeDispose will be removed.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.InsertIntoPage(System.Windows.Forms.TabControl,System.Type,System.Type)">
            <summary>
            Insert a portion of controls into a parent section
            </summary>
            <param name="tab"></param>
            <param name="tParentPage"></param>
            <param name="tControl"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.ToString">
            <summary>
            Convert to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.InstantiateSMMethodTypes(System.Type,MPT.USN.CommonLib.MPTBase)">
            <summary>
            Return a list of dataType[]
            </summary>
            <param name="ty"></param>
            <param name="mptBase"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.InstantiateSMConditionTypes(System.Type,MPT.USN.CommonLib.MPTBase)">
            <summary>
            Return a list of dataType[]
            </summary>
            <param name="ty"></param>
            <param name="mptBase"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.IsSMMethod(System.String)">
            <summary>
            Checks if this MPTBase method is an SMMethod
            </summary>
            <param name="methodName"></param>
            <returns>True if is an SMMethod</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.MCBegin(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Called at the beginning of a Method.
            This will start the duration timer and clear the Completion flag
            </summary>
            <param name="caller"></param>
            <returns>The SMMethodCall object that is associated with the Method from which this was called.</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.IsSMCondition(System.String)">
            <summary>
            Checks if this MPTBase property is an SMCondition
            </summary>
            <param name="propName"></param>
            <returns>True if is an SMMethod</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.AddSMMethod(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Add an MCMethod to the list
            </summary>
            <param name="mc"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.AddSMCondition(System.String,System.Delegate)">
            <summary>
            Add an SMCondition to the list
            </summary>
            <param name="propName"></param>
            <param name="del"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.GetSMBoolDelegate(System.String)">
            <summary>
            Get the SMCondition Bool delegate to the list
            </summary>
            <param name="propName"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.UnRegisterMethods">
            <summary>
            Un register the methods
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MPTBase.Child">
            <summary>
            Used for serialization only
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MPTBase._children">
            <summary>
            List of children
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.Add(MPT.USN.CommonLib.MPTBase)">
            <summary>
            Add a new child.  If already exists, do nothing
            </summary>
            <param name="newChild"></param>
            <returns>newChild if does not already exist, 
            otherwise returns reference to exisiting object</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.Insert(MPT.USN.CommonLib.MPTBase,System.Int32)">
            <summary>
            Insert a new child.  If already exists, do nothing
            </summary>
            <param name="newChild"></param>
            <returns>newChild if does not already exist, 
            otherwise returns reference to exisiting object</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.Replace(MPT.USN.CommonLib.MPTBase)">
            <summary>
            Replace a child. 
            </summary>
            <param name="newChild"></param>
            <returns>True if successful, False if already exists</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.Remove(MPT.USN.CommonLib.MPTBase)">
            <summary>
            Remove a child. 
            </summary>
            <param name="oldChild"></param>
            <returns>True if successful, False if already exists</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.Remove(System.Int32)">
            <summary>
            Remove a child. 
            </summary>
            <param name="index"></param>
            <returns>True if successful, False if doesn't exists</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.RemoveAll">
            <summary>
            Remove all children
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.GetDescendant(System.String)">
            <summary>
            Return the decendant based on the path
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.Reverse(System.Int32,System.Int32)">
            <summary>
            Swap two children in order
            </summary>
            <param name="iChild">First child</param>
            <param name="count"></param>
            <returns>True if successful</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.SwapChildren(MPT.USN.CommonLib.MPTBase,System.Int32)">
            <summary>
            Virtual base for moving child upo or down
            </summary>
            <param name="objChild"></param>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.SetClockStart(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            ClockStart occurs 
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.SetClockEnd(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            ClockEnd occurs 
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.DbUnlock(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Unlock the DBClassItem
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.DbLock(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Build and store db snapshots of all parental DBClassItems
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.DbPut(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataBool)">
            <summary>
            Put locked class instance to dbase.
            </summary>
            <param name="caller"></param>
            <param name="dbPerformancePut"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.DBGetRecord">
            <summary>
            Return the most-derived dbRecord 
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.DbFieldChanged(System.Type,System.String,MPT.USN.CommonLib.Enums.eDBFlag)">
            <summary>
            Called when data object has been changed
            </summary>
            <param name="classType"></param>
            <param name="name"></param>
            <param name="dbFlag"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.DbPutSnapshot(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.DbClassItem)">
            <summary>
            Add a db record
            </summary>
            <param name="mc"></param>
            <param name="classItem"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTBase.EnsureClassItem(System.Type)">
            <summary>
            Populate list of all call derivations
            </summary>
            <param name="ty"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTBase.dataParameters">
            <summary>
            List of Data Types that get serialized to XXX Machine.xml
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTBase.ActivePageIndex">
            <summary>
            Keeps track of the currently selected page in the component manager panel
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTBase.SerActivePageIndex">
            <summary>
            Serialize the value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTBase.Status">
            <summary>
            Current state of the object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTBase.DataMgr">
            <summary>
            Easy access to data manager
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTBase.CompMgr">
            <summary>
            Easy access to component manager
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTBase.ProcMgr">
            <summary>
            Easy access to process manager
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTBase.Item(System.Int32)">
            <summary>
            Get child based on index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTBase.Item(System.String)">
            <summary>
            Get child based on name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTBase.Count">
            <summary>
            Gets the count of children for this object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTBase.HasChildren">
            <summary>
            Returns true if this object has children
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTBase.Name">
            <summary>
            Name for this object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTBase.ImportExportClassName">
            <summary>
            Return the class name used for import/exporting
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTBase.Parent">
            <summary>
            Refernce pointer to parent object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTBase.ObjParent">
            <summary>
            Refernce pointer to parent object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTBase.Children">
            <summary>
            Get access to ArrayList for children
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTBase.ChildArray">
            <summary>
             Return a fixed size array of the children
            </summary>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTBase.ClockStart">
            <summary>
            Get the usage start count
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTBase.ClockEnd">
            <summary>
            Get the usage end count
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.MPTBase.DelegateParmVoid">
            <summary>General purpose void delegate/// </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.MPTBase.DelegateBool">
            <summary>General purpose bool delegate/// </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.MPTBase.DelegateAlertCallback">
            <summary>General purpose void delegate/// </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.MPTBase.DelegateParmComponentBase">
            <summary>General purpose Component delegate/// </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.MPTBase.DelegateParmSMMethodCall">
            <summary>General purpose SMMethodCall delegate/// </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.MPTBase.DelegateParmString">
            <summary>General purpose String delegate</summary>
            <param name="str"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.MPTBase.DelegateParmBool">
            <summary>General purpose boolean delegate</summary>
            <param name="bVal"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.MPTBase.DelegateStringParmString">
            <summary>General purpose String delegate</summary>
            <param name="str"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.MPTBase.DelegateString">
            <summary>General purpose String delegate</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.MPTBase.DelegateParmObjectString">
            <summary>
            Standard delegate
            </summary>
            <param name="tag"></param>
            <param name="text"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.MPTBase.DelegateParmControl">
            <summary>General purpose Control delegate</summary>
            <param name="parent"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.MPTBase.DelegateParmControlString">
            <summary>General purpose Control + String delegate</summary>
            <param name="parent"></param>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.MPTBase.DelegateParmControlSize">
            <summary>Prober Cam delegate</summary>
            <param name="parent"></param>
            <param name="size"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.ProcessBase.StopTransition">
            <summary>
            The Stop Transition text
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.ProcessBase.StopState">
            <summary>
            The Stop State
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.ProcessBase.StoppingCondition">
            <summary>
            The Stopping transition
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.ProcessBase.StateDurationCondition">
            <summary>
            The StateDuration transition
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.ProcessBase.PANEL">
            <summary>
            Constant to identify "Panel"
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.ProcessBase.TIMER">
            <summary>
            Constant to identify "Timer"
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.IsStopping">
            <summary>
            Flag set if process is in 'Stopping' mode
            </summary>
            <remarks>The process enters the Stopping mode when user clicks 'Stop'.
            The process exits the Stopping mode when the state reaches root.</remarks>
            <returns>Returns true if stopping</returns>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.ProcessBase.StoppingDelegate">
            <summary>
            Delegate for stopping
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.FirePlayStripChange">
            <summary>
            Fire the PlayStrip event 
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.IsRoot">
            <summary>
            This class is a root class
            </summary>
            <remarks>Decendent data object addresses begin with this object name</remarks>
            <returns></returns>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.ProcessBase.variables">
            <summary>
            ml serializing of custom data types
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.RemoveVariable(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Remove item from list
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.AddVariable(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Add a custom Variable to this array
            </summary>
            <param name="dt"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.ProcessBase.xmlBased">
            <summary>
            Flag is true if process is loaded from xml file
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.ProcessBase.dsStatus">
            <summary>
            Access to Status data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.ProcessBase.dsProcessEvent">
            <summary>
            Access to "Process Event" data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.ProcessBase.dbUpdatePanelDone">
            <summary>
            Access to UpdatePanelDone data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.ProcessBase.dbEnable">
            <summary>
            Access to the "Enable" parameter data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.ProcessBase.dbSubroutine">
            <summary>
            Access to the "Subroutine" parameter data object
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.Register">
            <summary>
            Register this and all decendents
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.BuildTree(MPT.USN.CommonLib.Process.StateBase,System.Object)">
            <summary>
            Build a State tree for the process
            </summary>
            <param name="state"></param>
            <param name="baseNode"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.Save(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Save this process to disk
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.ProcessBase.ShowAllProducts">
            <summary>
            Show all products 
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.Delete">
            <summary>
            Delete this process
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.Rename(System.String)">
            <summary>
            Rename the process
            </summary>
            <param name="newName"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.Save">
            <summary>
            Save the file
            </summary>
            <remarks>We do not save backup, because this may be saved many times in order to update the LoadBoatInLimbo flag.</remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.FileExists">
            <summary>
            Return true if the file exists
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.NeedsSaving">
            <summary>
            Determines if the file needs saving
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.GetFilePath">
            <summary>
            Return the filepath for this type of process file
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.SaveAll">
            <summary>
            Save both Skeleton and user process files 
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.CallSub(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataString)">
            <summary>
            Call a subroutine
            </summary>
            <param name="caller"></param>
            <param name="dsState"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.PostSub(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataString)">
            <summary>
            Call a subroutine
            </summary>
            <param name="caller"></param>
            <param name="dsState"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.UnRegister">
            <summary>
            UnRegister this and all decendents
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.ProcessBase._tabPanel">
            <summary>
            Which tab panel is this process assigned to?
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.ProcessBase.processPage">
            <summary>
            Reference to the page for this process
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.ProcessBase.curState">
            <summary>
            Reference to the current state of the process
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.SwapChildren(MPT.USN.CommonLib.MPTBase,System.Int32)">
            <summary>
            Obsolete
            </summary>
            <param name="objChild"></param>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.Initialize">
            <summary>
            Initialize this process class
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.FindData(System.String)">
            <summary>
            Find the data object
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.Destroy">
            <summary>
            Destroy the process object
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.FindState(MPT.USN.CommonLib.Process.StateBase,System.String)">
            <summary>
            Search backward in states for existence of stateName
            </summary>
            <param name="parent"></param>
            <param name="stateName"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.GetStateFromString(System.String)">
            <summary>
            Recursively searches for State object that matches path declaration
            </summary>
            <param name="strPath"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.ChangeStateFromString(System.String)">
            <summary>
            Evaluate if we should change the current state of this process
            </summary>
            <param name="changeState"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.LoopProcess">
            <summary>
            Run the process
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.StepProcess">
            <summary>
            This runs one process cycle
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.SplitArgs(System.String)">
            <summary>
            Parse all arguments from a string
            </summary>
            <param name="allArgs"></param>
            <returns></returns>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.ProcessBase._usage">
            <summary>
            History
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.AddUsage(System.String,System.Double,System.Double,MPT.USN.CommonLib.Process.ActionUsageItem[])">
            <summary>
            Temp method top store data to history buffer
            </summary>
            <param name="state"></param>
            <param name="timeStamp"></param>
            <param name="duration"></param>
            <param name="actionUsageItems"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.ResetUsage">
            <summary>
            Reset the usage values to zero
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.GetSystemUsage">
            <summary>
            Get all the system usage info
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.DumpUsage(System.IO.StreamWriter)">
            <summary>
            Compute usage values and export to file
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.GetArgs(System.Object,System.String,System.String)">
            <summary>
            Get the list of arguments from a string
            </summary>
            <param name="owner"></param>
            <param name="method"></param>
            <param name="allArgs"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.InvokeSMCall(MPT.USN.CommonLib.Process.StateBase,MPT.USN.CommonLib.Process.SMAction,System.String,MPT.USN.CommonLib.Process.ActionUsageItem)">
            <summary>
            Call a Method that returns nothing
            </summary>
            <param name="state"></param>
            <param name="action"></param>
            <param name="methodCall"></param>
            <param name="actionUsageItem"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.InvokeBool(System.String)">
            <summary>
            Execute a Method or property that returns <c>bool</c>
            </summary>
            <param name="methodCall"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.InvokeReturn(System.String)">
            <summary>
            Execute a Method or property that returns <c>object</c>
            </summary>
            <param name="methodCall"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessBase.FindState(System.Collections.Generic.List{MPT.USN.CommonLib.Process.StateBase})">
            <summary>
            Find the matching state
            </summary>
            <param name="stateAddPath"></param>
            <returns></returns>
        </member>
        <member name="E:MPT.USN.CommonLib.Process.ProcessBase.OnStateChange">
            <summary>
            OnAllStopped event
            </summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Process.ProcessBase.OnPlayStripChange">
            <summary>
            On change to any playstrip
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.ProcessBase.Dirty">
            <summary>
            Flag set if process needs to be saved to disk
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.ProcessBase.dsVersion">
            <summary>
            Get the version Data Type
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.ProcessBase.VersionString">
            <summary>
            Get/Set the version string
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.ProcessBase.ProcessEvent">
            <summary>
            Determines if Panel has completed updating
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.ProcessBase.UpdatePanelDone">
            <summary>
            Determines if Panel has completed updating
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.ProcessBase.Enable">
            <summary>
            Determines if Panel has completed updating
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.ProcessBase.Subroutine">
            <summary>
            Determines if Panel has completed updating
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.ProcessBase.Paused">
            <summary>
            Get/set whether in paused state
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.ProcessBase.Stopped">
            <summary>
            Checks if process is at the root
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.ProcessBase.OnIdleState">
            <summary>
            Checks if process On an idle state
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.ProcessBase.TabPanel">
            <summary>
            Indicates which panel (left or right) that this process is displayed
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Process.ProcessBase.DelegateParmStateBase">
            <summary>General purpose Control delegate</summary>
            <param name="state"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Process.ProcessHelpers">
            <summary>
            Used in case calls from process are coming from C# script
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.ProcessHelpers._process">
            <summary>
            Owner of the helper
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessHelpers.#ctor(MPT.USN.CommonLib.Process.ProcessBase)">
            <summary>
            Constructor
            </summary>
            <param name="process"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Process.LogicOr">
            <summary>
            Summary description for LogicOr.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Process.Logic">
            <summary>
            Summary description for Logic.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Process.ProcessNode">
            <summary>
            Class for Process node
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.ProcessNode.displayIndex">
            <summary>
            index used for displaying
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.ProcessNode.processOwner">
            <summary>
            The process owner 
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessNode.SetRunnable">
            <summary>
            Sets Runnable flag if runnable
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessNode.#ctor">
            <summary>
            Constructor for serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessNode.#ctor(MPT.USN.CommonLib.Process.ProcessBase,System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="procOwner"></param>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessNode.PackInRecurse(MPT.USN.CommonLib.Process.ProcessBase)">
            <summary>
            After file read
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessNode.SetIndex(System.Int32)">
            <summary>
            Set the display index
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.ProcessNode.Runnable">
            <summary>
            Returns true if item is to be displayed
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.ProcessNode.Visible">
            <summary>
            Returns true if item is to be displayed
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.ProcessNode.SerOrigination">
            <summary>
            Flag to indicate if the item is Added
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.ProcessNode.Dirty">
            <summary>
            Flag set if process needs to be saved to disk
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.ProcessNode.origination">
            <summary>
            Get/Set the origination value
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.Logic.treeItem">
            <summary>
            Tree item displayed
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.Logic.child">
            <summary>
            List of Logic children
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.Logic.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.Logic.#ctor(MPT.USN.CommonLib.Process.ProcessBase,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="procOwner"></param>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.Logic.Evaluate">
            <summary>
            Command to evaluate the logic expression
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.Logic.Dump(System.IO.StreamWriter,System.Int32)">
            <summary>
            Dump the state of the conditional statements
            </summary>
            <param name="f"></param>
            <param name="indentation"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.Logic.PackInRecurse(MPT.USN.CommonLib.Process.ProcessBase)">
            <summary>
            After file read
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.Logic.AddLogic(MPT.USN.CommonLib.Process.Logic)">
            <summary>
            Append Logic item to list of children
            </summary>
            <param name="newLogic"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.Logic.RemoveLogic(MPT.USN.CommonLib.Process.Logic)">
            <summary>
            Remove logic item from list of children
            </summary>
            <param name="removeLogic"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.Logic.SetIndex(System.Int32)">
            <summary>
            Set the display index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.Logic.SwapChildren(MPT.USN.CommonLib.MPTBase,System.Int32)">
            <summary>
            Swap Logic children.  Used to move child up/down.
            </summary>
            <param name="objChild"></param>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.Logic.GetPrefixedConditions(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Populate the list of alert conditions
            </summary>
            <param name="list"></param>
            <param name="prefix"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.Logic.SetCondition(System.String,System.Boolean)">
            <summary>
            Set the alert condition true or false
            </summary>
            <param name="expression"></param>
            <param name="bVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.Logic.GetCondition(System.String,System.Boolean@)">
            <summary>
            Get the alert condition
            </summary>
            <param name="expression"></param>
            <param name="bVal"></param>
            <returns>true if we found the expression</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.Logic.OnEnterState">
            <summary>
            Entering the state
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.Logic.OnLeavingState">
            <summary>
            Leaving the state
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.Logic.Clone(System.Type)">
            <summary>
            Clone Logic
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.Logic.Count">
            <summary>
            Gets the count of children for this object
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.LogicOr.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.LogicOr.#ctor(MPT.USN.CommonLib.Process.ProcessBase)">
            <summary>
            Constructor
            </summary>
            <param name="procOwner"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.LogicOr.Evaluate">
            <summary>
            Command to evaluate the logic expression
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.LogicOr.Dump(System.IO.StreamWriter,System.Int32)">
            <summary>
            Dump the state of the conditional statements
            </summary>
            <param name="f"></param>
            <param name="indentation"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.LogicOr.Clone(System.Type)">
            <summary>
            Clone Logic Or
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:MPT.USN.CommonLib.SMMethodSel">
            <summary>
            Class for intellisense
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.MPTForm">
            <summary>
            Class to be base class for forms
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTForm.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTForm.ControlWorkAround">
            <summary>
            Fix hanging problem
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTForm.ControlWorkAroundRecurse(System.Windows.Forms.Control)">
            <summary>
            Fix hanging problem 
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTForm.CompMgr">
            <summary>
            Easy access to component manager
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTForm.ProcMgr">
            <summary>
            Create reference for easy access to process manager
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTForm.DataMgr">
            <summary>
            Easy access to data manager
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodSel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodSel.BeginWork(MPT.USN.CommonLib.Process.ProcessBase,System.Object,System.Drawing.Point,System.String,MPT.USN.CommonLib.MPTBase.DelegateParmObjectString)">
            <summary>
            Repsond to new char press
            </summary>
            <param name="proc"></param>
            <param name="tag"></param>
            <param name="pt"></param>
            <param name="origText"></param>
            <param name="del"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodSel.OnChar(System.Char)">
            <summary>
            Repsond to new char press
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodSel.AddSMMethods(System.Windows.Forms.TreeNode)">
            <summary>
            Adds Methods for this node only
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodSel.AddSMMethods(System.Windows.Forms.TreeNodeCollection)">
            <summary>
            Recursively adds smMethods
            </summary>
            <param name="nodes"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodSel.SetArgValue(System.Int32,System.String)">
            <summary>
            Put the argument in the arg control (pcArg0, pcArg1, etc)
            </summary>
            <param name="iArg"></param>
            <param name="strArg"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodSel.GetArgValue(System.Int32)">
            <summary>
             Get the arg value
            </summary>
            <param name="iArg"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodSel.OnArgChange(MPT.USN.CommonLib.MPTBase,System.Int32,MPT.USN.CommonLib.MPTBase)">
            <summary>
            Event called when arg selection window has made selection
            </summary>
            <param name="mptBase"></param>
            <param name="iArg"></param>
            <param name="obj"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodSel.OnSelect">
            <summary>
            Called when ready to commit change and close
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodSel.UnpackArgs(MPT.USN.CommonLib.SMMethodCall,System.String,System.Reflection.ParameterInfo[])">
            <summary>
            This is called right after a new selection
            </summary>
            <param name="mc"></param>
            <param name="text">The selected text.</param>
            <param name="paramInfoList">The default argument list</param>
            <remarks>We want to split apart the arguments from the name.</remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodSel.OnArgClick(MPT.USN.CommonLib.MPTControls.MPTTextBoxWithUnits,System.Int32)">
            <summary>
            Event called when arg selection is made
            </summary>
            <param name="pc"></param>
            <param name="iArg"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.SMMethodSel.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodSel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodSel.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.SMConditionSel">
            <summary>
            Class to select condition statements
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.SMConditionSel.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.SMConditionSel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.SMConditionSel.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.SMConditionSel.#ctor">
            <summary>
            Contructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.SMConditionSel.BeginWork(MPT.USN.CommonLib.Process.ProcessBase,System.Object,System.Drawing.Point,System.String,MPT.USN.CommonLib.MPTBase.DelegateParmObjectString)">
            <summary>
            Repsond to new char press
            </summary>
            <param name="proc"></param>
            <param name="tag"></param>
            <param name="pt"></param>
            <param name="origName"></param>
            <param name="del"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.SMConditionSel.AddSMConditions(System.Windows.Forms.TreeNodeCollection,System.String,System.String)">
            <summary>
            Add conditions to this component node
            </summary>
            <param name="nodes"></param>
            <param name="matchData"></param>
            <param name="matchCond"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.SMConditionSel.FindComponentNode(System.Windows.Forms.TreeNodeCollection,System.String@,System.String@)">
            <summary>
            Recursively search fo the node that matches the path
            </summary>
            <param name="nodes"></param>
            <param name="pathBuild"></param>
            <param name="pathReduce"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.SMConditionSel.OnChar(System.Char)">
            <summary>
            Respond to new char press
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.SMConditionSel.OnSelect">
            <summary>
            Called when ready to commit change and close
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Process.BreakPointForm">
            <summary>
            Form to display the breakpoints
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.BreakPointForm.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.BreakPointForm.Refresh(MPT.USN.CommonLib.Process.BreakPoint)">
            <summary>
            Refresh the entire display
            </summary>
            <param name="bpActivated">Newly activated breakpoint</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.BreakPointForm.ResizeHeight(System.Int32)">
            <summary>
             Resize the form to meet internal adjustments
            </summary>
            <param name="extraHeight"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.BreakPointForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.BreakPointForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.BreakPointForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Process.BreakPoint">
            <summary>
            Class to handle process breakpoints
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.BreakPoint.#ctor(MPT.USN.CommonLib.SMMethodCall,System.String)">
            <summary>
             Full constructor
            </summary>
            <param name="mc"></param>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.BreakPoint.Release">
            <summary>
            Release the breakpoint
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.BreakPoint.Name">
            <summary>
            Get the description
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.BreakPoint.action">
            <summary>
            Get the SMAction object reference
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.Validations.ValTargetToleranceInsert">
            <summary>
            Insert for ValidateTargetMinMax, but show only Target and Tolerance for setting
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.PageBase">
            <summary>
            Summary description for PageBase.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.ControlBase">
            <summary>
            Base class for all our user controls.
            This is mainly for PageBase and PanelBase
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.ControlBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.ControlBase.Destroy">
            <summary>
            Destroy this control
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.ControlBase.OnKeyDown(System.Windows.Forms.Keys)">
            <summary>
            Handle keydown message
            </summary>
            <param name="keyCode"></param>
            <returns>True if handled</returns>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PageBase._suspendEvents">
            <summary>
            Used in event handlers to prevent events while programmatically changing states
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PageBase.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PageBase.#ctor">
            <summary>
            Default Constructor for designer
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PageBase.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="refObj"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PageBase.FireLoad">
            <summary>
            Load oportunity.  Only accepts one call.  If already loaded, this does nothing.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PageBase.OnPageLoad">
            <summary>
            Loading the page.  This means that there is a parental path to a top window
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PageBase.ValidatePage">
            <summary>
            Validate contents of page
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PageBase.OnRefresh">
            <summary>
            Tell the page to refresh
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PageBase.UpdatePage(System.String,System.String)">
            <summary>
            Opportunity to update something on the page
            Process will initiate the command.
            </summary>
            <param name="cmd1"></param>
            <param name="cmd2"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PageBase.DisableItem(System.String)">
            <summary>
            Enable item
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PageBase.HideItem(System.String)">
            <summary>
            Hide item
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PageBase.FormChanged">
            <summary>
            Notification that something on this form has changed
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PageBase.OnApply">
            <summary>
            Response to Apply button press
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PageBase.RefreshPage">
            <summary>
            Refresh the contents of the pages
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PageBase.OnNewPageReference(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="objOld"></param>
            <param name="objNew"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PageBase.RefreshAllPages(System.Windows.Forms.Control)">
            <summary>
            Recursively refresh all controls
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PageBase.RefreshAllPages">
            <summary>
            Main routine to handle refresh of all pages
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PageBase.IsComponentPageVisible">
            <summary>
            Returns true is this component page is truely visible
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PageBase.SubscribeVisibleChanged(System.Windows.Forms.Control,System.EventHandler)">
            <summary>
            Allow control to receive notification of visible change
            </summary>
            <param name="c"></param>
            <param name="ev"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PageBase.UnSubscribeVisibleChanged(System.Windows.Forms.Control,System.EventHandler)">
            <summary>
            Allow control to receive notification of visible change
            </summary>
            <param name="c"></param>
            <param name="ev"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PageBase.ControlWorkAround">
            <summary>
            Fix hanging problem
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PageBase.ControlWorkAroundRecurse(System.Windows.Forms.Control)">
            <summary>
            Fix hanging problem 
            </summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.PageBase.evShowIt">
            <summary>
            Raise this event when ShowIt is called
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PageBase.Dt">
            <summary>
            Reference to DataType object
            </summary>
            <remarks>This could be null if page is not direcly associated with a single data object</remarks>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PageBase.RefObj">
            <summary>
            Get the underlying component object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PageBase.CompMgr">
            <summary>
            Easy access to Component manager
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PageBase.ProcMgr">
            <summary>
            Easy access to Process manager
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PageBase.DataMgr">
            <summary>
            Easy access to Data manager
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PageBase.CanSafeDispose">
            <summary>
            Get whether we can safely dispose this page when no need
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PageBase.ShowIt">
            <summary>
            Boolean property to indicate if this is to be shown or not.
            We can also set the Enable/disable as needed
            </summary>
            <remarks>
            <example>This is an example of how to only show the page for ENGINEER or TECHNICIAN
            <code>
            public override bool ShowIt
            {
                get
                {
                    return Login.userPrivileges != Enums.UserPrivileges.OPERATOR;
                }
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValTargetToleranceInsert.#ctor(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Constructor
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValTargetToleranceInsert.OnRefresh">
            <summary>
            Refresh due to changes in Dt
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.Validations.ValTargetToleranceInsert.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValTargetToleranceInsert.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValTargetToleranceInsert.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.Validations.ValidateMinMax">
            <summary>
            Class to validate a double entry
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.Validations.Validation">
            <summary>
            Super Class for data validation 
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.DBClass">
            <summary>
            Class for non MPTBase DataBase-bound classes
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DBClass.CopyDataFrom(MPT.USN.CommonLib.Data.DBClass)">
            <summary>
            Copy the data from another validation object
            </summary>
            <param name="from"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DBClass.dbDirty">
            <summary>
            IDBClass Interface implementation
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DBClass.dbFullPathName">
            <summary>
            IDBClass Interface implementation
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.Validation.#ctor">
            <summary>
            Parameterless constructor for serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.Validation.CopyDataFrom(MPT.USN.CommonLib.Data.DBClass)">
            <summary>
            Copy the data from another validation object
            </summary>
            <param name="from"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.Validation.bValidateRaw(MPT.USN.CommonLib.Data.DataType,System.Object)">
            <summary>
            Validate the entry.  True if inside max/min range.
            </summary>
            <param name="dt"></param>
            <param name="oVal"></param>
            <returns>bool</returns>     
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.Validation.bValidateRaw(System.Object)">
            <summary>
            Validate the raw transferfunction entry.  True if inside max/min range.
            This one does not need the data type parameter
            </summary>
            <param name="oVal"></param>
            <returns>bool</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.Validation.ValidateRaw(MPT.USN.CommonLib.Data.DataType,System.Object)">
            <summary>
            Validate the string
            </summary>
            <param name="dt"></param>
            <param name="oVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.Validation.ConvertInternalCycle">
            <summary>
             Convert due to Machine xml change
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.Validations.ValidateMinMax.Mode">
            <summary>How do we handle case where value violates Min/Max</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.Validations.ValidateMinMax.Min">
            <summary>Minimum allowed</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.Validations.ValidateMinMax.Max">
            <summary>Maximum allowed</summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidateMinMax.#ctor">
            <summary>
            Parameterless constructor for serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidateMinMax.#ctor(MPT.USN.CommonLib.Enums.eValMinMaxMode)">
            <summary>
            Create with the given mode
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidateMinMax.#ctor(System.Double,System.Drawing.Color,System.Double,System.Drawing.Color,MPT.USN.CommonLib.Enums.eValMinMaxMode)">
            <summary>
            Value defining constructor
            </summary>
            <param name="Min"></param>
            <param name="colorMin"></param>
            <param name="Max"></param>
            <param name="colorMax"></param>
            <param name="Mode"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidateMinMax.#ctor(System.Double,System.Double)">
            <summary>
            Construct with min and max only
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidateMinMax.ValidateRawAndPeg(System.Double@)">
            <summary>
            Validate a double against min and max, peg if fail validation
            </summary>
            <param name="dVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidateMinMax.Clone">
            <summary>
            Copy data
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidateMinMax.CopyDataFrom(MPT.USN.CommonLib.Data.DBClass)">
            <summary>
            Copy the data from another validation object
            </summary>
            <param name="from"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidateMinMax.ConvertInternalCycle">
            <summary>
             Convert due to Machine xml change
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidateMinMax.bValidateRaw(MPT.USN.CommonLib.Data.DataType,System.Object)">
            <summary>
            Validate the raw double entry.  True if inside max/min range.
            </summary>
            <param name="dt"></param>
            <param name="oVal"></param>
            <returns>bool</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidateMinMax.bValidateRaw(System.Object)">
            <summary>
            Validate the double entry for Transfer Function.  True if inside max/min range.
            No datatype needed here
            </summary>
            <param name="oVal"></param>
            <returns>bool</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidateMinMax.ValidateRaw(MPT.USN.CommonLib.Data.DataType,System.Object)">
            <summary>
            Validate the double entry
            </summary>
            <param name="dt"></param>
            <param name="oVal"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.Validations.ValidateMinMax.colorMin">
            <summary>Minimum fail color</summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.Validations.ValidateMinMax.colorMax">
            <summary>Maximim fail color</summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.Validations.ValidateMinMax.colorMinHtml">
            <summary>Serializes the 'colorMin' Color to XML.</summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.Validations.ValidateMinMax.colorMaxHtml">
            <summary>Serializes the 'colorMax' Color to XML.</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.Validations.ValTargetMinMaxInsertV2">
            <summary>
            Basic Control for mean/min/max
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.Validations.ValTargetMinMaxInsertV2.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValTargetMinMaxInsertV2.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValTargetMinMaxInsertV2.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValTargetMinMaxInsertV2.#ctor(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Constructor
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValTargetMinMaxInsertV2.OnRefresh">
            <summary>
            Refresh due to changes in Dt
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.Validations.ValTargetMinMaxInsertV2.AllowUnitChangeViaGUI">
            <summary>
            Get/Set whether this allow user changing unit via GUI
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunctionPage">
            <summary>
            Class for Transfer function property page
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunctionPage._currentTransferFunctionPage">
            <summary>
            Reference to the current Transfer Function Page object
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunctionPage.#ctor">
            <summary>
            Constructor.  Used for designer
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunctionPage.#ctor(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Constructor
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunctionPage.RefreshGUI">
            <summary>
            Used to notify this page of an datatype val update
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunctionPage.GetDT">
            <summary>
            Data type representing the Transferfunction result value
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunctionPage.OnNewPageReference(System.Object,System.Object)">
            <summary>
            This is called from either the constructor or 
            combo box change of selection
            </summary>
            <param name="objNew"></param>
            <param name="objOld"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunctionPage.OnCoefficientsValidating(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Validation response event for changes to Coefficients of the TransferFunction
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunctionPage.OnPageLoad">
            <summary>
            Set up for the first time with valid window handle and parental windows established
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunctionPage.btnResetData_Click(System.Object,System.EventArgs)">
            <summary>
            Clears data from the tranferfunction data table
            Also clears the graph
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunctionPage.GetPaneltransferFunction">
            <summary>
            Public access to the panel containing the transferfunction graph
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunctionPage.btnRefresh_Click(System.Object,System.EventArgs)">
            <summary>
            Refresh transferfunction graph
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunctionPage.DataBackup(System.Boolean)">
            <summary>
            Backup file table data before changing the current filetable
            </summary>
            <returns>Returns true if backed up, false if user cancels</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunctionPage.btnDataBackup_Click(System.Object,System.EventArgs)">
            <summary>
            Create backup to transferfunction data and display on graph
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunctionPage.btnDataRevert_Click(System.Object,System.EventArgs)">
            <summary>
            Revert to previously backed up transferfunction data
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunctionPage.ShowSettingsToggle">
            <summary>
            Maintains state of settings display window
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunctionPage.UpdatePage(System.String,System.String)">
            <summary>
            Provides communication updates to other pages containing like information
            </summary>
            <param name="cmd1"></param>
            <param name="cmd2"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunctionPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunctionPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunctionPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunctionPage.FullGraphSize">
            <summary>
            Establishes the extent of the graph without settings showing
            Must be set before control is painted
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunctionPage.ShowSettingsSize">
            <summary>
            Establishes the extent of the graph with settings showing
            Must be set before control is painted
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunctionPage.FullGraphLocation">
            <summary>
            Establishes the Location of the graph without settings showing
            Must be set before control is painted
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunctionPage.ShowSettingsLocation">
            <summary>
            Establishes the Location of the graph with settings showing
            Must be set before control is painted
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunctionPage.TrainValues">
            <summary>
            Public access to the text of the Train Values textbox
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunctionPage.DataBackupButton">
            <summary>
            Public access to the backup data button
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunctionPage.DataRevertButton">
            <summary>
            Public access to the backup data button
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunctionPage.ShowIt">
            <summary>
            Boolean property to indicate if this is to be shown or not.
            We can also set the Enable/disable as needed
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TransferFunctions.OffsetPage">
            <summary>
            Support page for Offset Transferfunction settings
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TransferFunctions.LinearPage">
            <summary>
            Class for linear definitions
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TransferFunctions.GraphPageBase">
            <summary>
            Base class for transfer function graph displays
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.GraphPageBase.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="obj"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.GraphPageBase.GetGraph">
            <summary>
            Property that returns the reference to the graph panel
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.LinearPage._graph">
            <summary>
            Local 2d graph object
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.LinearPage.#ctor">
            <summary>
            Default Constructor for designer view
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.LinearPage.#ctor(MPT.USN.CommonLib.Data.TransferFunctions.Linear)">
            <summary>
            Constructor
            </summary>
            <param name="linear"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.LinearPage.OnRefresh">
            <summary>
            Used to notify this page of an update required
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.LinearPage.OnPageLoad">
            <summary>
            Set up for the first time with valid window handle and parental windows established
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.LinearPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.LinearPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.LinearPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.LinearPage.GetGraph">
            <summary>
            Public access to graph object
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.OffsetPage.#ctor">
            <summary>
            Default Constructor for serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.OffsetPage.#ctor(MPT.USN.CommonLib.Data.TransferFunctions.Offset)">
            <summary>
            Primary constructor
            </summary>
            <param name="offset"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.OffsetPage.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.OffsetPage.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.OffsetPage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit">
            <summary>
            Class to define linear least squares fit transfer function
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction">
            <summary>
            Base class for all transfer functions.
            <para/>
            Most DataTypes can be assigned an associated Transfer function. This data type 
            will be the output of the transfer function.  Multiple inputs can be fed into the transfer function.
            The Transfer function assignment and inputs are managed on-the-fly by the UI.  However, there is some 
            coding required to make use of Transfer function updating (learning).
            </summary>
            <remarks>
            <para/>
            <list type="table"> 
            <listheader><term>Available Transfer functions...</term></listheader>
            <item><term><see cref="T:MPT.USN.CommonLib.Data.TransferFunctions.Linear"/></term></item>
            <item><term><see cref="T:MPT.USN.CommonLib.Data.TransferFunctions.MultiVar"/></term></item>
            <item><term><see cref="T:MPT.USN.CommonLib.Data.TransferFunctions.Offset"/></term></item>
            <item><term><see cref="T:MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrder"/></term></item>
            </list>
            <para/>
            <example>A transfer function that learns
            <code>
            // Define the output data type
            public DataDouble ddOutput = new DataDouble("TF Output", 0, Enums.UnitTypes.mm);
            
            // Define an input data type
            public DataDouble ddInput1 = new DataDouble("TF Input 1", 0, Enums.UnitTypes.mm);
            
            // Define another input data type
            public DataDouble ddInput2 = new DataDouble("TF Input 2", 0, Enums.UnitTypes.mm);
            
            // Train the transfer function manually
            public SMMethodCall ManualTrain(SMMethodCall caller)
            {
                SMMethodCall mc = MCBegin(caller);
            
                // Define the input and output values  (This would normally not be hard coded)
                ddInput1.Val = 1.1;
                ddInput2.Val = 2.3;
                ddOutput.Val = 8.0;
            
                // Train the Transfer function with this point
                ddOutput.TransferFunctionUpdate(mc, null);
            
                return mc.End();
            }
            
            // Obtain the output based on the inputs
            public SMMethodCall ManualEvaluate(SMMethodCall caller)
            {
                SMMethodCall mc = MCBegin(caller);
            
                // Define the input values  (This would normally not be hard coded)
                ddInput1.Val = 1.7;
                ddInput2.Val = 2.1;
            
                // Tell the transfer function to evaluate for an answer
                ddOutput.TransferFunctionSetVal(mc);
            
                // ddOutput now contains the evaluated value
            
                return mc.End();
            }
            </code>
            </example>
            </remarks>
            <seealso cref="M:MPT.USN.CommonLib.Data.DataType.TransferFunctionUpdate(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataType)"/>
            <seealso cref="M:MPT.USN.CommonLib.Data.DataType.TransferFunctionSetVal(MPT.USN.CommonLib.SMMethodCall)"/>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.dsTransferFunctionStatus">
            <summary>
            The transfer function status, will be connected to lblTFStatus, now shown if empty
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.dbAlwaysDoFullRegression">
            <summary>
            Always perform full regression when evaluation
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.ddCoeff0">
            <summary>
            Coeff 0 for binding, mainly for diff
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.ddCoeff1">
            <summary>
            Coeff 1 for binding, mainly for diff
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction._fileTable">
            <summary>
            File Table object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction._old">
            <summary>
            Backed up Transferfunction
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction._bufferTitle">
            <summary>
            header for buffer file
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction._maxRows">
            <summary>
            File table maximum number of data lines before rolling
            like a queue
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.AlgFunc">
            <summary>
            delegate to support function for NR least squares fit routine
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.AlgFunc2Order">
            <summary>
            delegate to support function for NR least squares fit routine
            for 2nd order poly only
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction._pearson">
            <summary>
            Person R values from regression
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction._polyOrder">
            <summary>
            Order of polynomial
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction._rSquared">
            <summary>
            Correlation coefficient
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction._stdErr">
            <summary>
            Standard error of regression
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction._suspendRegen">
            <summary>
            Flag to suspend regeneration in a recursive loop
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction._regressFailed">
            <summary>
            flag noting if regression failed
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction._regressFailedResponse">
            <summary>
            response value if regression fails
            uses average of input data points
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.IgnoreDataValue">
            <summary>
            Used by graphs to ignore this data point
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction._isInitialized">
            <summary>
            Make sure properties are set before initializing object
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.InitializeLite(System.Boolean)">
            <summary>
            Must be called after default construction and if any of the following are changed:
            FilePath, _maxRows, _ma
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.Initialize(System.Boolean)">
            <summary>
            Initialization for subclasses
            </summary>
            <param name="doRegenerate"></param>
            <returns></returns>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction._noUpdateUnlessTraining">
            <summary>
            Made public to get serialized.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction._automatic">
            <summary>
            Made public to get serialized.  See Automatic property
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction._train">
            <summary>
            Made public to get serialized.  See Train property
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction._removeOutliers">
            <summary>
            Made public to get serialized.  See RemoveOutliers property
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction._removeMaxMinOutliers">
            <summary>
            Made public to get serialized.  See RemoveMaxMinOutliers property
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction._outlierStrength">
            <summary>
            Made public to get serialized.  See OutlierStrength property
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction._showOutliers">
            <summary>
            Made public to get serialized.  See ShowOutliers property
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction._inputs">
            <summary>
            Number of independent vars
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction._yBinLength">
            <summary>
            Bin size for YBin Transfer Function
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.dbUseInputBinning">
            <summary>
            Turn on/off All input binning data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.ddCountPerBin">
            <summary>
            Number of items per bin data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction._ma">
            <summary>
            Defines # of fit coefs
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction._a">
            <summary>
            array of regression coeficients
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.UpdateMaxRows(System.Int32)">
            <summary>
            Subclass will define for changing the MaxRows
            </summary>
            <param name="maxrows"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.ReInitialize(System.Boolean)">
            <summary>
            To reset data arrays to the size of the datatable 
            Mostly used for changes in the size of the datatable
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.GetbY(System.Int32)">
            <summary>
            get index of raw Y array for this outlier point
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.GetgY(System.Int32)">
            <summary>
            get index of raw Y array for this good data point
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.GetY">
            <summary>
            Get response array data
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.GetX">
            <summary>
            Get input data arrays
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.GetYg">
            <summary>
            Get Y array for good data (no outliers)
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.GetYb">
            <summary>
            Get Y array for bad data (outliers)
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.GetXg">
            <summary>
            Get X array for good data (no outliers)
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.GetXb">
            <summary>
            Get X array for bad data (outliers)
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.#ctor">
            <summary>
            Parameterless constructor for serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.#ctor(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Use when not serializing.  Pass "this" as param.
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.Update(System.Object[],System.Object[],System.Boolean)">
            <summary>
            Used to update the transferfunction with an array of new data
            This is more effecient than sending data one at a time
            </summary>
            <param name="responses"></param>
            <param name="inputs"></param>
            <param name="nothing"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.Update(System.Object,System.Object)">
            <summary>
            Update transfer function characteristics
            </summary>
            <param name="response"></param>
            <param name="input"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.Update(System.Object,System.Object[])">
            <summary>
            Update transfer function characteristics
            </summary>
            <param name="response"></param>
            <param name="inputs"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.GetVal(System.Object,System.Double)">
            <summary>
            Get the translated value
            </summary>
            <param name="input"></param>
            <param name="offsetWeight">portion of offset to use</param>
            <returns>return the result of the transfer function</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.GetVal(System.Object[],System.Double)">
            <summary>
            Get the translated value
            </summary>
            <param name="inputs"></param>
            <param name="offsetWeight">portion of offset to use</param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.GetVal(System.Object,System.Double,System.Boolean)">
            <summary>
            Get the translated value but decide if regenerate first
            </summary>
            <param name="inputs"></param>
            <param name="offsetWeight">portion of offset to use</param>
            <param name="doRegen"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.GetVal(System.Object[],System.Double,System.Boolean)">
            <summary>
            Get the translated value but decide if regenerate first
            </summary>
            <param name="inputs"></param>
            <param name="offsetWeight">portion of offset to use</param>
            <param name="doRegen"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.ReTrain">
            <summary>
            Resets everything to retrain all inputs
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.SetInputBinValidationLimits(System.Object[])">
            <summary>
            Called each time regression needs to be calculated (GetVal)
            This establishes validation (limits) for the actual regression window (floating or not)
            </summary>
            This entire method uses internal units
            <param name="obj"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.Regenerate">
            <summary>
            Regenerate coeficients based on updated data
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.Regenerate(System.Object[])">
            <summary>
            Regenerate coeficients based on updated data
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.GetVal">
            <summary>
            Get value from pre-defined inputs
            Assume not moving offset to zero
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.GetVal(System.Double)">
            <summary>
            Get value from pre-defined inputs
            </summary>
            <param name="offsetWeight">portion of offset to use</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.GetValWorstCase">
            <summary>
            Get value from pre-defined inputs in the worst case
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.GetValWorstCase(System.Object[])">
            <summary>
            Do the feed forward in worst case
            </summary>
            <param name="inputs"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.Update">
            <summary>
            Update Transfer function using pre-defined inputs
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.GetCoeff(System.Int32,System.Int32)">
            <summary>
            Returns the coefficient
            </summary>
            <param name="input"></param>
            <param name="nCoeff"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.SetCoeff0(System.Double)">
            <summary>
            Set the coeff 0, mainly during check diff
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.GetInversion(System.Int32)">
            <summary>
            Return the inversion
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.Update(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Update Transfer function using pre-defined inputs
            </summary>
            <param name="dtResponse"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.UpdateWithError(MPT.USN.CommonLib.Data.DataType,System.Double)">
            <summary>
            Update TF passed in the error
            </summary>
            <param name="dtResponse"></param>
            <param name="error">
            This is the actual error = (Target - Final). End will be used for weighing
            </param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.GetResponseSigmaOfContainerBin">
            <summary>
            Get sigma of container bin of current inputs
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.GetTransferFunctionInputCount">
            <summary>
            Returns the TransferFunction input Objects
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.GetInputObjArray">
            <summary>
            Used to access the Value of the current TransferFunction input objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.BackupTransferFunction">
            <summary>
            Saves current filetable into a backup
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.RevertFileTable">
            <summary>
            restores the backed up file table to the current one
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.UpdateYBin(System.Object,System.Object[])">
            <summary>
            Update transfer function characteristics
            </summary>
            <param name="response"></param>
            <param name="inputs"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.EvalPoly(System.Double[],System.Object[],System.Double)">
            <summary>
            Overloaded to handle object parameters
            Calls EvalPoly(double[], double[])
            </summary>
            <param name="a"></param>
            <param name="x"></param>
            <param name="offsetWeight">portion of offset to use</param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.EvalPoly(System.Double[],System.Double[])">
            <summary>
            Effecient evaluation of any polynomial
            a[0] + a[1]x[0]+ a[2]x[1]+...+ a[inputs]x[inputs-1] + a[inputs+1]x[0]^2 + a[inputs+2]x[1]^2
               ... a[2*inputs]x[inputs-1]^2 ... a[order*inputs+1]x[inputs-1]^order
            </summary>
            <param name="a"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.RefTFPage">
            <summary>
            Get/Set the reference to transfer function page
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.SuspendRegen">
            <summary>
            Flag to hold regeneraton of coefs 
            used to hold while several props are changed at once
            regen can proceed after last prop is changed
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.rSquared">
            <summary>
            Correlation coefficient
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.StdErr">
            <summary>
            Standard Error
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.IsInitialized">
            <summary>
            Public access to set initialized flag
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.Old">
            <summary>
            Access to backup filetable
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.Inputs">
            <summary>
            Access to the number of model equation inputs (X's)
            in the least squares fit
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.YBinLength">
            <summary>
            Length of each Y axis bin when using LinearYBin transferfunction
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.UseInputBinning">
            <summary>
            Turn on/off All input binning property
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.CountPerBin">
            <summary>
            Number of items per bin property
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.Coefficients">
            <summary>
            access to regression coefficient array
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.ParameterCount">
            <summary>
            Access to the number of parameter constants (coefs)
            in the least squares fit
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.FilePath">
            <summary>
            Path to buffer file (file table)
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.DataObject">
            <summary>
            For access to owner DataType
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.Name">
            <summary>
            Name of TransferFunction class
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.FileTable">
            <summary>
            Subclass will define to return actual filetable
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.FileTableOld">
            <summary>
            Subclass will define to return actual Old filetable
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.MaxRows">
            <summary>
            Allows access to MaxRows from TransferFunctionPage
            Subclass will define
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.OutlierStrength">
            <summary>
            A factor used to strengthen or weaken the outlier 
            determination algorithm
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.ShowOutliers">
            <summary>
            plot'um if you got'um...
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.NoUpdateUnlessTraining">
            <summary>
            if false, transfer function will update coeffients, otherwise it
            will only update if in training mode.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.Automatic">
            <summary>
            if Automatic, transfer function will regenerate coeffients, otherwise it
            is only used as an evaluator
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.RemoveOutliers">
            <summary>
            if RemoveOutliers, transfer function will take out bad points from the data
            when determining the best fit line
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.RemoveMaxMinOutliers">
            <summary>
            if Remove max and min Outliers in response data, transfer function will take out these points from the data
            when determining the best fit line
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction.Train">
            <summary>
            if Train, transfer function will force response to value in table coeffients, otherwise it
            is only used as an evaluator
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.XNormal">
            <summary>
            
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit._X">
            <summary>
            independent variable data array
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit._Y">
            <summary>
            dependent variable data array
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit._gY">
            <summary>
            index of the good (non-outlier) values of _Y
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit._bY">
            <summary>
            index of the bad (outlier) values of _Y
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit._R">
            <summary>
            residual array
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.GetbY(System.Int32)">
            <summary>
            get index of raw Y array for this outlier point
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.GetgY(System.Int32)">
            <summary>
            get index of raw Y array for this good data point
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.#ctor">
            <summary>
            default Constructor - must call Initialize after setting public properties
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.#ctor(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Use when not serializing but using all other defaults
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.#ctor(System.String,System.Int32,System.Int32,MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Constructor for external control of path and poly order (ma)
            </summary>
            <param name="buffTitle"></param>
            <param name="inputs"></param>
            <param name="polyorder"></param>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructor for external control but no DataType available yet
            </summary>
            <param name="buffTitle"></param>
            <param name="inputs"></param>
            <param name="polyorder"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.Initialize(System.Boolean)">
            <summary>
            Must be called after default construction and if any of the following are changed:
            FilePath, _maxRows, _ma
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.InitializeLite(System.Boolean)">
            <summary>
            Must be called after default construction and if any of the following are changed:
            FilePath, _maxRows, _ma
            the lite version does not rebuild the FileTable
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.ReInitialize(System.Boolean)">
            <summary>
            Used to get arrays resized after changing the datatable size
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.Clone">
            <summary>
            Copy data
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.CopyDataFrom(MPT.USN.CommonLib.Data.DBClass)">
            <summary>
            Copy data
            </summary>
            <param name="from"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.GetVal(System.Object,System.Double)">
            <summary>
            Get the translated value (non-array version)
            </summary>
            <param name="obj"></param>
            <param name="offsetWeight">portion of offset to use</param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.GetVal(System.Object,System.Double,System.Boolean)">
            <summary>
            Get the translated value (non-array version)
            </summary>
            <param name="obj"></param>
            <param name="offsetWeight">portion of offset to use</param>
            <param name="doRegen"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.GetVal(System.Object[],System.Double)">
            <summary>
            Get the translated value (array version)
            </summary>
            <param name="obj"></param>
            <param name="offsetWeight">portion of offset to use</param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.GetVal(System.Object[],System.Double,System.Boolean)">
            <summary>
            Get the translated value (array version)
            </summary>
            <param name="obj"></param>
            <param name="offsetWeight">portion of offset to use</param>
            <param name="doRegen"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.GetDirectVal(System.Double)">
            <summary>
            Call EvalPoly directly to get the response value
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.DoBinningUpdate(System.Object[])">
            <summary>
            This entire routine uses Internal units (raw)
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.Update(System.Object[],System.Object[],System.Boolean)">
            <summary>
            Add new data arrays to transferfunction
            </summary>
            <param name="responses"></param>
            <param name="inputs"></param>
            <param name="nothing"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.Update(System.Object,System.Object)">
            <summary>
            Update transfer function characteristics
            </summary>
            <param name="response"></param>
            <param name="input"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.Update(System.Object,System.Object[])">
            <summary>
            Update transfer function characteristics for an array of inputs 
            </summary>
            <param name="response"></param>
            <param name="inputs"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.setArrays(System.Double[],System.Double[])">
            <summary>
            Fill arrays with X/Y data
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.DirectRegressionOrder2">
            <summary>
            Assume second order and single dimension
            bypasses normal transferfunction calls
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.GetDoubleArray(System.Int32)">
            <summary>
            External access to local data arrays
            </summary>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.GetY">
            <summary>
            External access to response data array
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.GetX">
            <summary>
            External access to input data arrays
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.GetYg">
            <summary>
            Array of good Y values (no outliers)
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.GetYb">
            <summary>
            Array of bad Y values (outliers)
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.GetXg">
            <summary>
            double Array of X coordinates that correspond with good Y values(no outliers)
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.GetXb">
            <summary>
            double Array of X coordinates that correspond with bad Y values(outliers)
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.GetInversion(System.Int32)">
            <summary>
            Return the inversion
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.Regenerate">
            <summary>
            Override for using the default input object
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.Regenerate(System.Object[])">
            <summary>
            Regenerate coeficients based on updated data
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.UpdateMaxRows(System.Int32)">
            <summary>
            User can change MaxRows and DataTable will be adjusted accordingly
            </summary>
            <param name="maxrows"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.CheckAllBoundries">
            <summary>
            Check input, response and binning boundries for outliers
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.Regression">
            <summary>
            NOrderFit least squares fit (may be overridden in subclass)
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.CalcRSqrStdErr(System.Double[])">
            <summary>
            Return the r-square and standard error values for transfer function
            </summary>
            <param name="goodY"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.GoodDataPoints(System.Double,System.Double[],System.Double[])">
            <summary>
            Returns false if response is an outlier
            </summary>
            <param name="response"></param>
            <param name="inputs"></param>
            <param name="R"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.EvalNOrder(System.Int32)">
            <summary>
            actual fit equation evaluator
            define for each type of regression
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.EvalNOrder2(System.Int32)">
            <summary>
            actual fit equation evaluator
            Used for 2nd order single dimension direct regression
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.getDoubleArrays">
            <summary>
            Get double arrays from FileTable object
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.getDoubleArrays(System.Int32)">
            <summary>
            Get double arrays from FileTable object
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.findOutliers(System.Double[])">
            <summary>
            Find and identify all outliers and good points
            </summary>
            <param name="Yin"></param>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.Name">
            <summary>
            Name of TransferFunction class
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.BufferTitle">
            <summary>
            Title for buffer (filetable) header
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.MaxRows">
            <summary>
            Maximum number of rows in buffer queue
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.PolyOrder">
            <summary>
            Order of Polynomial fit is 1 less than number of coefs
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.Inputs">
            <summary>
            Number of independent variables
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.FileTable">
            <summary>
            Access to persistant data buffer for the Algorithm
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.NOrderFit.Pearson">
            <summary>
            Pearson r coef
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.Graph3D">
            <summary>
            Create 3D graph components
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.GraphBase">
            <summary>
             Base class for graphs
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.GraphBase._tf">
            <summary>
            Reference to transfer function
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.GraphBase._tfOld">
            <summary>
            Reference to previous transfer function
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.GraphBase._graphNewData">
            <summary>
            Reference to current graph
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.GraphBase._graphOldData">
            <summary>
            Reference to previous graph
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.GraphBase.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.GraphBase.LoadSomeData(System.String)">
            <summary>
            Utility to get some data in the graph for testing
            path should point to a file that has csv data in 
            two cols (Y, X)
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.GraphBase.LoadSomeData">
            <summary>
            Utility to get some data in the graph for testing
            path should point to a file that has csv data in 
            two cols (Y, X)
            </summary>
            <remarks>Uses 'SimulateDataPath'</remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.GraphBase.RefreshGraph">
            <summary>
            Refresh graph with latest data
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.GraphBase.SimulateDataPath">
            <summary>
            virtual access overridden by the subclasses to the path used for simulated data
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.Graph3D.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Graph3D.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Graph3D.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Graph3D.#ctor(MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction)">
            <summary>
            constructor
            </summary>
            <param name="tf"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Graph3D.LoadSomeData(System.String)">
            <summary>
            Utility to add data to graph for testing
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Graph3D.RefreshGraph">
            <summary>
            Refresh graph with latest data
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.DataSelectionForm">
            <summary>
            Class for selecting a data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DataSelectionForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataSelectionForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataSelectionForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DataSelectionForm.dt">
            <summary>
            The return value.  A String with the form "Class~DataName"
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataSelectionForm.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataSelectionForm.dataMgr">
            <summary>
            Easy access to data manager singleton
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.WelderPattern.WeldPatternSetupPage">
            <summary>
            Welder pattern page.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.WelderPattern.WeldPatternSetupPage.#ctor(MPT.USN.CommonLib.Comp.WelderPattern.WeldPatternComponent)">
            <summary>
            Constructor
            </summary>
            <param name="paternComp"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.WelderPattern.WeldPatternSetupPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.WelderPattern.WeldPatternSetupPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.WelderPattern.WeldPatternSetupPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.WelderPattern.WeldPatternComponent">
            <summary>
            Welder pattern component.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.CompSystemBase">
            <summary>
            Summary description for MotionSystemComponent.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.CompHWBase">
            <summary>
            Class for all hardware components
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ComponentBase">
            <summary>
            Base class for all components
            <para/>
            <para/>
            <list type="table"> 
            <listheader><term>Topics...</term></listheader>
            <item><term><see cref="M:MPT.USN.CommonLib.Comp.ComponentBase.Initialize">Initializing a component.</see></term></item>
            <item><term><see cref="M:MPT.USN.CommonLib.MPTBase.PackInRecurse(MPT.USN.CommonLib.MPTBase)">Doing work just after deserialization (xml file read).</see></term></item>
            <item><term><see cref="M:MPT.USN.CommonLib.MPTBase.PackOutRecurse">Doing work just after serialization (xml file write).</see></term></item>
            </list>
            <para/>
            <para/>
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ComponentBase.dsStatus">
            <summary>
            Access to Status data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ComponentBase.deThreadPriority">
            <summary>
            Access to Status data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ComponentBase.diIdleSleepTime">
            <summary>
            Time to sleep (ms) when idle
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ComponentBase.diWorkSleepTime">
            <summary>
            Miliseconds of sleep after each ThreadUpdate call.
            Default is 0
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ComponentBase.thirdPartyParms">
            <summary>
            Third party-defined parameters
            </summary>
            <remarks>Should only be used by 3rd party system-derived components.</remarks>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ComponentBase._bSimulatable">
            <summary>
            Set to true if there is no simulation required
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ComponentBase.dsImportFile">
            <summary>
            Import File Data Object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ComponentBase.ddThreadRate">
            <summary>
            Data to store current rate of thread
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentBase.OnStart">
            <summary>
            User has clicked the Run button
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentBase.Register">
            <summary>
            Register this and all decendents
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentBase.UnRegister">
            <summary>
            UnRegister this and all decendents
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentBase.GetChildPage(System.Boolean)">
            <summary>
            Get the child page
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ComponentBase.refAssemblies">
            <summary>
            This is used for run-time loading of cs file.
            The file must be in components directory.
            The name of the file must match the full path of the component name.
            overrided functions will be called and if return value is false,
            then the static implementation is not called.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentBase.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentBase.#ctor(System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentBase.Add(MPT.USN.CommonLib.MPTBase)">
            <summary>
            Appends an array element to an array.  Array grows by one
            </summary>
            <param name="newChild"></param>
            <returns>newChild if does not already exist, 
            otherwise returns reference to exisiting object</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentBase.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add a settings page to the 'tab' of this inherited class.
            If skip is set to true, then any pages assigned to this inherited 
            class will be skipped.
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentBase.VerifyOwner">
            <summary>
            Verifies that a specific process owns this component
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentBase.ReleaseOwner">
            <summary>
            Releases the hold a process has on this component
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentBase.Initialize">
             <summary>
             Initialize this component
             <remarks>
             When we are developing a standard Component, override Initialize to get access to other components.
             This can be done using CompMgr.GetComponent().
             <para/>
             Component constructors are not valid places to get other component references because the
             component hierarchy is not yet fully defined.
            <para/>
             <example>This example uses Initialize() to obtain a local reference to another component.
             <code>
             
             private SPLBoats _boats = null;
             
             public override void Initialize()
             {
                 _boats = CompMgr.GetComponent("Machine.Boats") as SPLBoats;
             }
             </code>
             </example>
             </remarks>
             </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentBase.Destroy">
            <summary>
            Destroy thread if it exists
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentBase.Reset(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            General purpose reset
            </summary>
            <param name="caller"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentBase.DoReset(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Threaded call implementation
            </summary>
            <param name="mc"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentBase.Update">
            <summary>
            Called from ComponentMgr thread
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentBase.ExportParameters">
            <summary>
            Save Parameteres of this object to disk
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentBase.ImportParameters">
            <summary>
            Read Parameteres of this object from disk
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ComponentBase._thread">
            <summary>
            Reference to the thread
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentBase.ThreadProc">
            <summary>
            Procedure for the worker thread
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentBase.FireThreadRate">
            <summary>
            Call the thread rate
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentBase.RefreshThreadPriority">
            <summary>
            Change the thread priority
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentBase.SetThreadPriority(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataString)">
            <summary>
            Set the thread priority
            </summary>
            <param name="caller"></param>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentBase.StartThreadLoop">
            <summary>
            Call this to begin threading loop
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentBase.StartThreadLoop(System.String)">
            <summary>
            Call this to begin threading loop
            </summary>
            <param name="threadName"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentBase.PostWorkerCall(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.MPTBase.DelegateParmSMMethodCall,System.String)">
            <summary>
            Post a call to the component worker thread
            </summary>
            <param name="mc"></param>
            <param name="del"></param>
            <param name="threadName"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentBase.PostWorkerCall(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.MPTBase.DelegateParmSMMethodCall)">
            <summary>
            Post a call to the component worker thread
            </summary>
            <param name="mc"></param>
            <param name="del"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentBase.ThreadUpdate">
            <summary>
            Called on every thread loop
            return 'true' if updating is complete
            this will suspend the thread
            </summary>
            <returns></returns>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.ComponentBase.OnMainThreadDestroy">
            <summary>
            Event to notify any of destruction
            </summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.ComponentBase.OnThreadRate">
            <summary>
            Event to notify any of THread rate change
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ComponentBase.Enabled">
            <summary>
            Get/Set if component is enabled
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ComponentBase.IdleSleepTime">
            <summary>
             Get/Set the idle sleep time
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ComponentBase.WorkSleepTime">
            <summary>
             Get/Set the work sleep time
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ComponentBase.dataMgr">
            <summary>
            Quick access to eht Data Manager
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ComponentBase.Initialized">
            <summary>
            Get/Set for successful initialization 
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ComponentBase.Simulate">
            <summary>
            Get/Set simulation property for this component
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ComponentBase.Simulatable">
            <summary>
            Flag to determine if this system is simulatable.
            </summary>
            <remarks>Typical usage of this is for a non-hardware system.
            We set this to false so we can assume it is never in simulate mode, 
            thus we can define all handlers as OnUpdateXXX instead of SimulateXXX</remarks>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ComponentBase.ImportFile">
            <summary>
            ImportFile
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ComponentBase.Simulated">
            <summary>
            Recurses up parent path to determine if this component is to be simulated.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ComponentBase.ResetHandled">
            <summary>
            Flag to indicate if reset is handled
            If true, the button will be enabled
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ComponentBase.RunningThread">
            <summary>
            Get the currently running thread of this component
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ComponentBase.KillThread">
            <summary>
            Flag to indicate component thread is trying to be killed
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ComponentBase.ThreadRate">
            <summary>
            Get the current thread rate
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ComponentBase.ThreadActive">
            <summary>
            Returns true if thread has been created
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ComponentBase.ShowInComponentTree">
            <summary>
            Option whether to list this component (and hence all its children) in the component tree
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ComponentBase.DelegateParmComponentBase">
            <summary>General purpose Component delegate</summary>
            <param name="comp"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ComponentBase.DelegateParmSMComponentBase">
            <summary>Delegate for Acquisition System Parmr</summary>
            <param name="mc"></param>
            <param name="comp"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompHWBase.ddMountPosX">
            <summary>
            Access to the Mount position X parameter object
            </summary>        
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompHWBase.ddMountPosY">
            <summary>
            Access to the Mount position Y parameter object
            </summary>        
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompHWBase.ddMountPosZ">
            <summary>
            Access to the Mount position Z parameter object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompHWBase.dsMountedOn">
            <summary>
            Access to the Mounted on Data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompHWBase.dsSynchObject">
            <summary>
            Access to the Mounted on Data object
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompHWBase.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompHWBase.#ctor(System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompHWBase.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add a settings page to the 'tab' of this inherited class.
            If skip is set to true, then any pages assigned to this inherited 
            class will be skipped.
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompHWBase.GetMount(MPT.USN.CommonLib.Enums.AxisDir)">
            <summary>
            Get the mount position given the axis direction
            </summary>
            <param name="axisDir"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompHWBase.GetMountedOn">
            <summary>
            Return the Component that this component is mounted on
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompHWBase.GetUniversalStaticPosition(MPT.USN.CommonLib.Enums.AxisDir,System.Double@)">
            <summary>
            Determine the universal static position of the component
            </summary>
            <remarks>We do not include moving axis positions.  In other words,
            this returns as if all axis were at the zero-home position.</remarks>
            <param name="axisDir"></param>
            <param name="staticPos"></param>
            <returns>Returns array of objects</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompHWBase.GetUniversalPosition(MPT.USN.CommonLib.Enums.AxisDir,System.Double@)">
            <summary>
            Determine the universal position of the component recursivly
            </summary>
            <param name="axisDir"></param>
            <param name="pos"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompHWBase.SetUniversalPosition(MPT.USN.CommonLib.Enums.AxisDir,System.Double)">
            <summary>
            Determine the universal position of the component recursivly
            </summary>
            <param name="axisDir"></param>
            <param name="pos"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompHWBase.GetUniversalPosition(System.Double@,System.Double@,System.Double@)">
            <summary>
            Determine the true X,Y,Z position according to machine coordinate system
            </summary>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="Z"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompHWBase.SetUniversalPosition(System.Double,System.Double,System.Double)">
            <summary>
            Set the true X,Y,Z position according to machine coordinate system
            </summary>
            <param name="refX"></param>
            <param name="refY"></param>
            <param name="refZ"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompHWBase.MoveToObject(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.CompHWBase,MPT.USN.CommonLib.Enums.AxisDir,System.Double,MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
            Move Component in Universal coordinate
            </summary>
            <param name="axisDir"></param>
            <param name="compTarget"></param>
            <param name="mc"></param>
            <param name="offset"></param>
            <param name="ddSpeed"></param>
            <remarks>It is assumed that this component has an 
            axis capable to move the in the direction provided.
            compTarget">Move to this target
            axisDir">Direction to travel
            offset">Final position offset from target.
            speed">axis speed.
            </remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompHWBase.MoveAbsDir(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Enums.AxisDir,MPT.USN.CommonLib.Data.DataDouble,MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
            Move axis absolute
            </summary>
            <param name="mcCaller"></param>
            <param name="axisDir"></param>
            <param name="ddPos"></param>
            <param name="ddSpeed">axis speed.</param>
            <returns>Returns the amount not moved.</returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompHWBase.MountPosX">
            <summary>
            Access to the Mount position X parameter value
            </summary>        
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompHWBase.MountPosY">
            <summary>
            Access to the Mount position Y parameter value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompHWBase.MountPosZ">
            <summary>
            Access to the Mount position Z parameter value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompHWBase.MountedOn">
            <summary>
            Access to the Mounted on parameter
            </summary>
            <remarks>This defines the component that this component is fastened to.
            The value will be a component path or mnemonic.</remarks>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompSystemBase._idSystem">
            <summary>
            Reference to ID System object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompSystemBase._scanSystem">
            <summary>
            Reference to Scan System object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompSystemBase._proberSystem">
            <summary>
            Reference to Prober System object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompSystemBase._laserSystem">
            <summary>
            Reference to Prober System object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompSystemBase._visionSystem">
            <summary>
            Reference to Vision System object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompSystemBase._envSystem">
            <summary>
            Reference to EnvironmentalSystem System object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompSystemBase.ClonedMotionSystem">
            <summary>
            Flag if motion system object is cloned
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompSystemBase.ClonedAcquisitionSystem">
            <summary>
            Flag if Acquisition System object is cloned
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompSystemBase.ClonedScanSystem">
            <summary>
            Flag if Scan System object is cloned
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompSystemBase.ClonedProberSystem">
            <summary>
            Flag if Prober System object is cloned
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompSystemBase.ClonedLaserSystem">
            <summary>
            Flag if Laser System object is cloned
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompSystemBase.ClonedPulseSystem">
            <summary>
            Flag if pulse system object is cloned
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompSystemBase.ClonedVisionSystem">
            <summary>
            Flag if Vision System object is cloned
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompSystemBase.ClonedEnvSystem">
            <summary>
            Flag if Env System object is cloned
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompSystemBase.ClonedIOSystem">
            <summary>
            Flag if IO System object is cloned
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompSystemBase.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompSystemBase.#ctor(System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompSystemBase.Initialize">
            <summary>
            Setup the System references
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompSystemBase.RemoveEvents">
            <summary>
            Remove any events this component has registered
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompSystemBase.Clone(System.Type)">
            <summary>
            Clone interface
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompSystemBase._MotionSystem">
            <summary>
            Reference to Motion System object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompSystemBase._PulseSystem">
            <summary>
            Reference to Pulse System object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompSystemBase._AcquisitionSystem">
            <summary>
            Reference to Acquisition System object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompSystemBase.AcqSystem">
            <summary>
            Public access to Acquisition system
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompSystemBase._LaserSystem">
            <summary>
            Reference to Motion System object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompSystemBase.LaserSystem">
            <summary>
            Public access to Acquisition system
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompSystemBase._IoSystem">
            <summary>
            Reference to IOSystem System object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.WelderPattern.WeldPatternComponent.WeldPatterns">
            <summary>
            Object array containingg of weld patterns.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.WelderPattern.WeldPatternComponent.dsPatternPath">
            <summary>
            Path to import/export pattern.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.WelderPattern.WeldPatternComponent.diChanel">
            <summary>
            Pattern Chanel.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.WelderPattern.WeldPatternComponent.#ctor">
            <summary>
            Constructor for serialize.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.WelderPattern.WeldPatternComponent.#ctor(System.String,System.Int32)">
            <summary>
            Constructor for first time creation.
            </summary>
            <param name="name"></param>
            <param name="chanel"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.WelderPattern.WeldPatternComponent.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add page.
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.WelderPattern.WeldPatternComponent.Initialize">
            <summary>
            Initial component.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.WelderPattern.WeldPatternComponent.Chanel">
            <summary>
            Access Laser Chanel
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.Susp.Suspension">
            <summary>
            Component class to manage Suspension.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.Susp.Suspension.colorMissingPart">
            <summary>
            Color for missing part
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.Susp.Suspension.colorGoodPart">
            <summary>
            Color for good part
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.Susp.Suspension.ddSuspensionUPHMultiplier">
            <summary>
            The multiplier for suspension UPH, to modify the suspension UPH to be closed to real machine UPH
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.Susp.Suspension.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.Susp.Suspension.#ctor(System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.Susp.Suspension.Initialize">
            <summary>
            class initialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.Susp.Suspension.SetDefaults(MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
            Set default of data type.
            </summary>
            <param name="dd"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.Susp.Suspension.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add a settings page to this class
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.Susp.Suspension.MclDynamicItems">
            <summary>
            WebCamera Dynamic Inspection Item List.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.Susp.Suspension.AddMclDynamicItem(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Methode for add item data to suspension.
            </summary>
            <param></param>
            <return></return>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.Susp.Suspension.DelMclDynamicItem(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Methode for delete item data to suspension.
            </summary>
            <param></param>
            <return></return>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.Susp.Suspension.ImportParameters">
            <summary>
            Import the parameters
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.Susp.Suspension.DelMclDynamicItem(System.String)">
            <summary>
            Methode for delete item data to suspension Overload2
            </summary>
            <param></param>
            <return></return>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.Susp.Suspension.AddStationTime(MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
            Add Station Time
            </summary>
            <param name="ddTime">DataDouble as time</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.Susp.Suspension.GetInstantUPH">
            <summary>
            Get instant UPH of this suspension
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.Susp.Suspension.GetStationTime(System.String)">
            <summary>
            Get station time of specific station, in millisecond
            </summary>
            <param name="stationName"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.Susp.Suspension.ClearAllStationTimes">
            <summary>
            Clear all stations times
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.CompWatchSetupPage">
            <summary>
            Class to hold Watch edit ontrol
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompWatchSetupPage.#ctor(MPT.USN.CommonLib.Comp.CompWatch)">
            <summary>
            Constructor
            </summary>
            <param name="compWatch"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompWatchSetupPage.OnRefresh">
            <summary>
            Tell the page to refresh with new table definition
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompWatchSetupPage.ValidatePage">
            <summary>
            Validate all control values to disk
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompWatchSetupPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompWatchSetupPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompWatchSetupPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpotsOfstParam">
            <summary>
            Class for Set WeldSpots param.
            </summary>    
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpotsOfstParam.ddSpotsOffsetX">
            <summary>
            For set WeldSpot OffsetX parameter
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpotsOfstParam.ddSpotsOffsetY">
            <summary>
            For set WeldSpot OffsetY parameter
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpotsOfstParam.ddSpotsKX">
            <summary>
            For set WeldSpot Ratio X
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpotsOfstParam.ddSpotsKY">
            <summary>
            For set WeldSpot Ratio Y
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpotsOfstParam.diShapeID">
            <summary>
            Shape ID
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpotsOfstParam.diSpotID">
            <summary>
            Spot ID
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpotsOfstParam.SpotsOffsetX">
            <summary>
            Access to data field "SpotsOffsetX"
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpotsOfstParam.SpotsOffsetY">
            <summary>
            Access to data field "SpotsOffsetY"
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpotsOfstParam.SpotsKX">
            <summary>
            Access to data field "Spots Ratio X"
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpotsOfstParam.SpotsKY">
            <summary>
            Access to data field "Spots Ratio Y"
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpotsOfstParam.ShapeID">
            <summary>
            Access to data field "Shape ID"
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpotsOfstParam.SpotID">
            <summary>
            Access to data field "Spot ID"
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystemPage">
            <summary>
            Scanner properties
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystemPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystemPage.#ctor(MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem)">
            <summary>
            Constructor
            </summary>
            <param name="scanSystem"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystemPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystemPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystemPage.CanSafeDispose">
            <summary>
            Indicate whether this can safely disposed when run out of scene
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.PulseSystem.ShapeGraphic">
            <summary>
            
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.ShapeGraphic.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.ShapeGraphic.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.ShapeGraphic.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.ShapeGraphic.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.ShapeGraphic.DrawShape(MPT.USN.CommonLib.Comp.PulseSystem.PulseShape,System.Int32)">
            <summary>
            Draw input pulse shape.
            </summary>
            <param name="shape"></param>
            <param name="focusSectorID"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.ShapeGraphic.ShapeMultiplyerX">
            <summary>
            ShapeMultiplyerX
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.ShapeGraphic.MaxPercentPeakPowerY">
            <summary>
            MaxPercentPeakPowerY
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.ShapeGraphic.ShapeMutiplyerY">
            <summary>
            ShapeMutiplyerY
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.PulseSystem.PulseLaser">
            <summary>
            Class for pulsed laser
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.PulseLaser.ShapeData">
            <summary>
            Object array containing the pulse shape definitions
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.PulseLaser.dsShapeBackUpPath">
            <summary>
            Path for backup shape data.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.PulseLaser.diChanel">
            <summary>
            Access Laser chanel
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseLaser.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseLaser.#ctor(System.Int32,System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="channel"></param>
            <param name="prefix"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseLaser.WriteShape(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataInt)">
            <summary>
             Write shape data to the laser
            </summary>
            <param name="mcCaller"></param>
            <param name="ShapeID"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseLaser.ReadShape(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataInt)">
            <summary>
            Read shape data from the laser
            </summary>
            <param name="mcCaller"></param>
            <param name="ShapeID"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseLaser.SetActiveShape(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            SetActiveShape
            </summary>
            <param name="mcCaller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseLaser.UpdateLaserStatus(MPT.USN.CommonLib.Comp.PulseSystem.IPulseLaserStatus)">
            <summary>
            UpdateLaserStatus
            </summary>
            <param name="status"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.PulseLaser.Channel">
            <summary>
            Laser Channel
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.PulseLaser.LaserStatus">
            <summary>
            Access Laser Status.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem">
            <summary>
            Class to provide access to third-party motion system drivers
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.IOSystem">
            <summary>
            Class to provide access to third-party IO drivers.
            <para/>
            <para/>
            <list type="table"> 
            <listheader><term>Examples...</term></listheader>
            <item><term><see cref="M:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.OnEventsForComponent(MPT.USN.CommonLib.Comp.ComponentBase)">Setup callbacks to process generic calls</see></term></item>
            <item><term><see cref="M:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.SetDigOutput(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.IOSystem.Output.DigOutput,System.Boolean)">Writing a third-party handler for the generic callback</see></term></item>
            <item><term><see cref="M:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.InputTrigger(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.IOSystem.Input.Input)">Update generic input signals from third-party system</see></term></item>
            </list>
            <para/>
            <para/>
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SystemBase">
            <summary>
            Base class for all System objects
            <para/>
            <para/>
            <list type="table"> 
            <listheader><term>How to...</term></listheader>
            <item><term><see cref="M:MPT.USN.CommonLib.U.Create(System.Type,System.String,System.String)">How to create a component that uses a third-party driver.</see></term></item>
            <item><term><see cref="M:MPT.USN.CommonLib.Comp.SystemBase.OnInitialize">Basics about initializing the interface with the third-party driver.</see></term></item>
            <item><term><see cref="M:MPT.USN.CommonLib.Comp.SystemBase.OnDestroy">Basics about cleaning up the interface with the third-party driver.</see></term></item>
            <item><term><see cref="T:MPT.USN.CommonLib.Comp.IOSystem.IOSystem">Specifics about implementing an IO hardware driver</see></term></item>
            <item><term><see cref="T:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem">Specifics about implementing a Vision hardware driver</see></term></item>
            </list>
            <para/>
            <para/>
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SystemBase.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SystemBase.#ctor(System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SystemBase._evHandler">
            <summary>
            Synchronizer
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SystemBase.dsIPAddress">
            <summary>
            IP Address if communication is network 
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SystemBase.dbMaintainSimulation">
            <summary>
            Maintain simulation flag
            If false, we will continually ask to simulate.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SystemBase.Initialize">
            <summary>
            Initialize AKI elements
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SystemBase.ThreadUpdate">
            <summary>
            Called on System thread loop
            return 'true' if updating is complete
            this will suspend the thread
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SystemBase.InitializeComplete">
            <summary>
            Called after initialize has taken place
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SystemBase.Destroy">
            <summary>
            Destroy contents
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SystemBase.OnInitialize">
            <summary>
            This is called when it is time to initialize the interface with the Third-Party driver.
            It is executed on the thread dedicated to interface with the third -party controller.
            </summary>
            <remarks>
            If unable to initialize the driver, please throw an exception.
            A thrown exception will prompt the user to retry or put in simulation mode
            <example>This is an example of handling a driver initialize problem.
            <code>
            protected override void OnInitialize() 
            { 
                _thirdPartyDriver = new ThirdPartyDriver();
                if (!_thirdPartyDriver.Initialize())
                    throw new Exception("Unable to initialize the driver.");
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SystemBase.OnDestroy">
            <summary>
            This is called when it is time to clean up the interface with the third-party component.
            It is executed on the same thread used for OnInitialize.
            </summary>
            <remarks>
            <example>This is an example of cleaning up when the system driver is destroyed.
            <code>
            protected override void OnDestroy() 
            { 
                //
                // Do cleanup here
                //
                _thirdPartyDriver.Dispose();
                _thirdPartyDriver = null;
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SystemBase.OnSimEventsForComponent(MPT.USN.CommonLib.Comp.ComponentBase)">
            <summary>
            Add any events to be simulated
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SystemBase.OnEventsForComponent(MPT.USN.CommonLib.Comp.ComponentBase)">
            <summary>
            Add any events to be added by third party
            </summary>
            <param name="comp">Component object to add events for</param>
            <remarks>See specific SystemBase derived class (Like MotionSystem) for more information.</remarks>
            <seealso cref="N:MPT.USN.CommonLib.Comp.MotionSystem"/>
            <seealso cref="N:MPT.USN.CommonLib.Comp.IOSystem"/>
            <seealso cref="N:MPT.USN.CommonLib.Comp.VisionSystem"/>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SystemBase.AddCompletedEvent(MPT.USN.CommonLib.SMMethodCall,System.Delegate,MPT.USN.CommonLib.Comp.SystemBase.Duplicate)">
            <summary>
            Add to the Completed event array
            </summary>
            <param name="mc"></param>
            <param name="del"></param>
            <param name="actionOnDuplicate"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SystemBase.RemoveEvents(MPT.USN.CommonLib.Comp.ComponentBase)">
            <summary>
            Remove all events associtated with this comp
            </summary>
            <param name="comp"></param>
            <remarks>This is typically called when comp is to be deleted.</remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SystemBase.BuildEvents(MPT.USN.CommonLib.Comp.ComponentBase)">
            <summary>
            Build events just for this component
            </summary>
            <param name="comp"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SystemBase.OnDataChanged(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Handler for Changed event from DataType
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SystemBase.RunCompletedEvent(MPT.USN.CommonLib.SMMethodCall,System.Delegate)">
            <summary>
            Run the completed events
            </summary>
            <param name="mc"></param>
            <param name="del"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SystemBase.RunUpdateEvent(MPT.USN.CommonLib.MPTBase,System.Delegate)">
            <summary>
            Run the Update events
            </summary>
            <param name="mptBase"></param>
            <param name="del"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SystemBase.RunNextRoutineUpdate">
            <summary>
            Run the next update in the update list
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SystemBase.DoReset(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            OVerride to reset the system
            </summary>
            <param name="mc"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SystemBase.SendCommand(MPT.USN.CommonLib.SMMethodCall,System.String)">
            <summary>
            Posts the call to set acceleration
            </summary>
            <param name="mc"></param>
            <param name="str"></param>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.SystemBase.evReset">
            <summary>Event for Reset</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.SystemBase.evSendCommand">
            <summary>Event for SendCommand</summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SystemBase.MaintainSimulation">
            <summary>
            
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SystemBase.IsStubbed">
            <summary>
            Determines if the deriving class is a stub class
            </summary>
            <remarks>If it is a stubbed class, then calls are to be simulated.</remarks>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SystemBase.OnUpdateEvents">
            <summary>
            Property to access events defined for this object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SystemBase.WaitCompletedEvents">
            <summary>
            Property to access events defined for this object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SystemBase.OnChangedEvents">
            <summary>
            Property to access events defined for this object
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SystemBase.DelegateParmSMString">
            <summary>Delegate for string parm</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SystemBase.Duplicate">
            <summary>Enum for actions in adding to WaitCompletedEvents array</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SystemBase.Duplicate.REPLACE">
            <summary>Replace existing element with a new one.  Also set old to completed.</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SystemBase.Duplicate.ERROR">
            <summary>Throw an exception if duplicate exists.</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.ddEthInputUpdateRate">
            <summary>
            The update rate for ethernet inputs
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.ddDigInputUpdateRate">
            <summary>
            The update rate for Digital inputs
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.#ctor(System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.OnEventsForComponent(MPT.USN.CommonLib.Comp.ComponentBase)">
            <summary>
            Add any events to be added by third party
            </summary>
            <remarks>Third party driver must override this in order to handle the generic calls.
            If the event is not handled, it will be simulated by CommonLib.
            </remarks>
            <example>This code shows how to set up a digital output handling in the third-party driver
            <code>
            // Add events to handle requests for third-party operations
            protected override void OnEventsForComponent(ComponentBase comp)
            {
                if (comp == this)
                {
                    evSetDigOutput += new DelegateParmSMDigOutputBool(OnSetDigOutput);
                }
            }
            
            // This will be called on the thread dedicated to this Third-party driver
            private void OnSetDigOutput(SMMethodCall mc, DigOutput digOutput, bool bVal)
            {
                //
                // Make third party call to set the boolean output using information from parameters
                //
            
            
                if (mc != null)    
                {
                    // This call originated from state machine.
                    // Tell state machine, we are done.
                    mc.End();
                }
            }
            </code>
            </example>
            <seealso cref="M:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.InputTrigger(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.IOSystem.Input.Input)"/>
            <seealso cref="M:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.SetDigOutput(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.IOSystem.Output.DigOutput,System.Boolean)"/>
            <seealso cref="M:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.SetEthernetOutput(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.IOSystem.Output.EthernetOutput,System.Boolean)"/>
            <param name="comp">Component object to add events for</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.InputTrigger(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.IOSystem.Input.Input)">
             <summary>
             Trigger to request an input from third-party system
             </summary>
             <remarks>There are three methods the Third-party driver can update the input signals.
             <para></para>
             <para>1. Direct method (this method call)</para>
             <para>2. Automatic method 1: Third-party callback on input changed</para>
             <para>3. Automatic method 2: Third-party periodic polling</para>
             <para></para>
             <para>See following examples for each method.</para></remarks>
             <param name="mc">Method object.  Use to inform state machine when call is complete.</param>
             <param name="input">The Digital Input object making the call.</param>
             <example>Direct method.
             <code>
             
             // Add events to handle requests for third-party operations
             protected override void OnEventsForComponent(ComponentBase comp)
             {
                 if (comp == this)
                 {
                     evInputTrigger += new DelegateParmSMInput(OnInputTrigger);
                 }
             }
            
             // This will be called on the thread dedicated to this Third-party driver
             private void OnInputTrigger(SMMethodCall mc, Comp.IOSystem.Input.Input input)
             {
                 if (input is BoolInput)
                 {
                     //
                     // Make third party call to get the boolean output using information from parameters
                     // Assign to Signal
                     //
                     (input as BoolInput).Signal = thirdParty.GetInput(input.GetChannelFromName());
                 }        
             
                 if (mc != null)    
                 {
                     // This call originated from state machine.
                     // Tell state machine, we are done.
                     mc.End();
                 }
             }
             </code>
             </example>
             <example>Automatic method 1: Third-party callback on input changed.
             <code>
             
             // Respond to a change in input
             // This is code dictated according to third-party class definitions
             private void DriveIOComponent_DriveInputChanged(object sender, DriveIOChangedEventArgs e)
             {
                 //
                 // Driver must find a means to obtain the changed input
                 // 
                 BoolInput boolInput = GetBoolInput(e.AxisInfo);
                 boolInput.Signal = e.Value;
             
                 // Tell state machine that we are done
             
                 if (mc != null)    
                 {
                     // This call originated from state machine.
                     // Tell state machine, we are done.
                     mc.End();
                 }
             }
             </code>
             </example>
             <example>Automatic method 2: Third-party periodic polling for all inputs.
             <code>
             private DataDouble _ddInputHook = new DataDouble("Input Hook");
             
             // Add events to handle requests for third-party operations
             protected override void OnEventsForComponent(ComponentBase comp)
             {
                 if (comp == this)
                 {
                     // IOSystem component
             
                     // Update every 10 ms
                     _ddInputHook.UpdatePeriod = 1000000;
                     OnUpdateEvents.Add(_ddInputHook, new DelegateParmVoid(OnUpdateAllInputs));
                 }
                 else 
                 {
                    // Child components (Inputs, Output)
                 }
             }
             
             // Respond to a change in input
             // This is code dictated according to third-party class definitions
             private void OnUpdateAllInputs()
             {
                 //
                 // Driver must request info for all inputs
                 // 
                 bool[] allBools = thirdPartyDriver.GetAllInputs();
                 for (int i = 0; i &lt; allBools.Length; i++)
                 {
                     //
                     // Driver must find a means to obtain the input object
                     // 
                     BoolInput boolInput = GetBoolInput(i);
                     boolInput.Signal = allBools[i];                 
                 }
             
                 // Tell state machine that we are done
             
                 if (mc != null)    
                 {
                     // This call originated from state machine.
                     // Tell state machine, we are done.
                     mc.End();
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.SetDigOutput(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.IOSystem.Output.DigOutput,System.Boolean)">
             <summary>
             Base class virtual to write a digital output
             </summary>
             <param name="mc">Method object.  Use to inform state machine when call is complete.</param>
             <param name="output">The Digital Output object making the call.</param>
             <param name="bVal">The value to set.</param>
             <remarks>Third-party driver must implement a handler to make a set the hardware output</remarks>
             <example>This code shows how to set up a digital output handling in the third-party driver
             <code>
             
             // Add events to handle requests for third-party operations
             protected override void OnEventsForComponent(ComponentBase comp)
             {
                 if (comp == this)
                 {
                     // IOSystem component
                     evSetDigOutput += new DelegateParmSMDigOutputBool(OnSetDigOutput);
                 }
                 else 
                 {
                    // Child components (Inputs, Output)
                 }
             }
            
             // Write a digital output
             private void OnSetDigOutput(SMMethodCall mc, DigOutput digOutput, bool bVal)
             {
                 //
                 // Make third party call to set the boolean output using information from parameters
                 //
                 thirdPartyDriver.SetDigitalOutput(digOutput.GetChannelFromName(), bVal);
             
                 // Tell state machine that we are done
             
                 if (mc != null)    
                 {
                     // This call originated from state machine.
                     // Tell state machine, we are done.
                     mc.End();
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.SetEthernetOutput(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.IOSystem.Output.EthernetOutput,System.Boolean)">
            <summary>
            Write a digital Ethernet input
            </summary>
            <param name="mc"></param>
            <param name="output"></param>
            <param name="bVal"></param>        
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.SetAnalogOutput(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.IOSystem.Output.AnalogOutput,System.Double)">
            <summary>
            Write an Analog output
            </summary>
            <param name="mc"></param>
            <param name="output"></param>
            <param name="dVal">double val</param>        
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.ReadScaledAnalogInput(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.IOSystem.Input.ScaledAnalogInput)">
            <summary>
            ReadCustomAnalogInput
            </summary>
            <param name="mc"></param>
            <param name="input">The reference of this ScaledAnalogInput </param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.UpdateSettingsScaledAnalogInput(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.IOSystem.Input.ScaledAnalogInput)">
            <summary>
            Update ScaleAnalogInput settings
            </summary>
            <param name="mc"></param>
            <param name="input"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.SyncScaledAnalogInput(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.IOSystem.Input.ScaledAnalogInput)">
            <summary>
            Sync ScaledAnalogInput
            </summary>
            <param name="mc"></param>
            <param name="input"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.UpdateSettingAnalogInput(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.IOSystem.Input.AnalogInput)">
            <summary>
            Update setting Analog output
            </summary>
            <param name="mc"></param>
            <param name="input"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.SettingOffsetAnalogInput(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.IOSystem.Input.Input)">
            <summary>
            Setting offset analog output
            </summary>
            <param name="mc"></param>
            <param name="input"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.SetParam(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.IOSystem.Output.ParamOutput,System.String)">
            <summary>
            Set Device parameter
            </summary>
            <param name="mc"></param>
            <param name="output"></param>
            <param name="message"></param>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.evSetDigOutput">
            <summary>Event for Acquire</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.evSetEthernetOutput">
            <summary>Event for SetEthernetOutput</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.evSetAnalogOutput">
            <summary>Event for SetAnalogOutput</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.evInputTrigger">
            <summary>Event for InputTrigger</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.evSetScaledAnalogInput">
            <summary> Event for SetScaledAnalogInput</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.evSyncScaledAnalogInput">
            <summary>Event for Sync the ScaledAnalogInput</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.evUpdateSettingsScaledAnalogInput">
            <summary>Evnet for update the ScaledAnalogInput settings</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.evUpdateSettingAnalogInput">
            <summary>
            Evnet for update the AnalogInput settings
            </summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.evSettingOffsetAnalogInput">
            <summary>
            Evnet for update the AnalogInput offset (Tare)
            </summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.evSetParam">
            <summary>
            event for set device parameter
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.DelegateParmDigInput">
            <summary>delegate for DigInput</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.DelegateParmAnalogInput">
            <summary>delegate for DigInput</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.DelegateParmSMAnalogInput">
            <summary>delegate for DigInput</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.DelegateParmEthernetInput">
            <summary>delegate for EthernetInput</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.DelegateParmSMInput">
            <summary>delegate for generic Input</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.DelegateParmSMDigOutputBool">
            <summary>delegate for DigOutput with bool</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.DelegateParmSMEthernetOutputBool">
            <summary>delegate for EthernetOutput</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.DelegateParmSMAnalogOutputDouble">
            <summary>delegate for AnalogOutput</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.DelegateParmSMScaledAnalogInput">
            <summary>delegate for ScaledAnalogInput</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.IOSystem.DelegateParmSMOutputString">
            <summary>delegate for Param output</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem._ddRotaryConversion">
            <summary>System units per cycle</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem._ddLinearConversion">
            <summary>System units per um</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem._ddTimeConversion">
            <summary>System units per sec</summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.Convert(MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase,System.Double)">
            <summary>
            Convert distance units
            </summary>
            <param name="axis"></param>
            <param name="dVal"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.ConvertVel(MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase,System.Double)">
            <summary>
            Convert System velocity units to internal
            </summary>
            <param name="axis"></param>
            <param name="dVal"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.ConvertAcc(MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase,System.Double)">
            <summary>
            Convert System accel units to internal
            </summary>
            <param name="axis"></param>
            <param name="dVal"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.ConvertLinear(System.Double)">
            <summary>
            Convert System Linear units to internal (um)
            </summary>
            <param name="dVal"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.ConvertRotary(System.Double)">
            <summary>
            Convert System rotary units to internal (cycles)
            </summary>
            <param name="dVal"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.ConvertTime(System.Double)">
            <summary>
            Convert System Time units to internal (seconds)
            </summary>
            <param name="dVal"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.ConvertRotaryVel(System.Double)">
            <summary>
            Convert System rotary vel units to internal (cycles/Sec)
            </summary>
            <param name="dVal"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.ConvertLinearVel(System.Double)">
            <summary>
            Convert System linear vel units to internal (um/sec)
            </summary>
            <param name="dVal"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.ConvertRotaryAcc(System.Double)">
            <summary>
            Convert System rotary accel units to internal (cycles/sec/sec)
            </summary>
            <param name="dVal"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.ConvertLinearAcc(System.Double)">
            <summary>
            Convert System linear accel units to internal (um/sec/sec)
            </summary>
            <param name="dVal"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.ConvertLinear(System.Double[])">
            <summary>
            Convert System linear units to internal (um)
            </summary>
            <param name="dVals"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.ConvertLinearVel(System.Double[])">
            <summary>
            Convert System linear units to internal (um/sec)
            </summary>
            <param name="dVals"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.#ctor(System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add a settings page to this class
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.OnEventsForComponent(MPT.USN.CommonLib.Comp.ComponentBase)">
            <summary>
            Add any events for simulation
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.OnSimEventsForComponent(MPT.USN.CommonLib.Comp.ComponentBase)">
            <summary>
            Add any events for simulation
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.GetAxes(MPT.USN.CommonLib.Enums.AxisGroup,MPT.USN.CommonLib.Enums.AxisMsk)">
            <summary>
            Returns the Axes object given the axes identifying properties
            </summary>
            <param name="axisGroup"></param>
            <param name="axisMask"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.SetAccel(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase,System.Double)">
            <summary>
            Posts the call to set acceleration
            </summary>
            <param name="mc"></param>
            <param name="axis"></param>
            <param name="accel"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.SetDecel(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase,System.Double)">
            <summary>
            Posts the call to set deceleration
            </summary>
            <param name="mc"></param>
            <param name="axis"></param>
            <param name="decel"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.SetAxesUnits(MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axes,MPT.USN.CommonLib.Enums.Units)">
            <summary>
            Sets the axes units
            </summary>
            <param name="axes"></param>
            <param name="units"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.SetPositionMode(MPT.USN.CommonLib.Enums.AxisGroup,MPT.USN.CommonLib.Enums.AxisMode)">
            <summary>
            Sets the mode
            </summary>
            <param name="axisGroup"></param>
            <param name="mode"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.ProgramStart(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axes)">
            <summary>
            Start a program
            </summary>
            <param name="mc"></param>
            <param name="axes"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.ProgramStop(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axes)">
            <summary>
            Stop a program
            </summary>
            <param name="mc"></param>
            <param name="axes"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.ProgramCmd(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axes,System.String)">
            <summary>
            Send a program a command
            </summary>
            <param name="mc"></param>
            <param name="axes"></param>
            <param name="cmd"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.MoveContoured(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axes,System.Double[],System.Double)">
            <summary>
            Moves axes in coordianted fashion
            </summary>
            <param name="mc"></param>
            <param name="axes"></param>
            <param name="positions"></param>
            <param name="speed"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.MoveRapid(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axes,System.Double[],System.Double[])">
            <summary>
            Moves axes in rapid fashion
            </summary>
            <param name="mc"></param>
            <param name="axes"></param>
            <param name="positions"></param>
            <param name="speeds"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.MoveSingleAxisAbs(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase,System.Double,System.Double)">
            <summary>
            Base class virtual to move single axis in absolute
            </summary>
            <param name="mc"></param>
            <param name="axis"></param>
            <param name="pos"></param>
            <param name="speed"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.MoveSingleAxisAbsLimitWait(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase,System.Double,System.Double,System.Int32)">
            <summary>
            Move single axis absolute with limited wait time
            </summary>
            <param name="mc"></param>
            <param name="axis"></param>
            <param name="pos"></param>
            <param name="speed"></param>
            <param name="millisecondWait"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.MoveSingleAxisRel(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase,System.Double,System.Double)">
            <summary>
            Moves single axis in relative
            </summary>
            <param name="mc"></param>
            <param name="axis"></param>
            <param name="position"></param>
            <param name="speed"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.MoveSingleAxisRelLimitWait(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase,System.Double,System.Double,System.Int32)">
            <summary>
            Moves single axis in relative
            </summary>
            <param name="mc"></param>
            <param name="axis"></param>
            <param name="position"></param>
            <param name="speed"></param>
            <param name="millisecondWait"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.Enable(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataBool)">
            <summary>
            Enable the axes
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.EnableAxis(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase,System.Boolean)">
            <summary>
            Enable Axis
            </summary>
            <param name="mc"></param>
            <param name="axis"></param>
            <param name="bEnable"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.Home(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase)">
            <summary>
            Home the axis
            </summary>
            <param name="mc"></param>
            <param name="axis"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.Home(MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axes)">
            <summary>
            Home the axes
            </summary>
            <param name="axes"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.FindZero(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase)">
            <summary>
            Base class virtual to find the zero
            </summary>
            <param name="mc"></param>
            <param name="axis"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.RotarySetDirection(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotary,MPT.USN.CommonLib.Enums.RotaryDir)">
            <summary>
            Set the direction (CW/CCW) of the rotary axis
            </summary>
            <param name="mc"></param>
            <param name="axis"></param>
            <param name="dir"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.StartRotary(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotary,System.Double)">
            <summary>
            Start turning the rotary axis
            </summary>
            <param name="mc"></param>
            <param name="axis"></param>
            <param name="dSpeed"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.StopRotary(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotary)">
            <summary>
            Stop the rotary axis
            </summary>
            <param name="mc"></param>
            <param name="axis"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.GetParamFromAxis(MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase,System.Object,System.Object@)">
            <summary>
            Read parameter from Axis
            </summary>
            <param name="axis"></param>
            <param name="param"></param>
            <param name="paramVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.SetPositionLimit(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase,System.Double,System.Double)">
            <summary>
            Set Axis position Limit
            </summary>
            <param name="mc"></param>
            <param name="axis"></param>
            <param name="positiveLimit"></param>
            <param name="negativeLimit"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.Interlock(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase)">
            <summary>
            Interlock the axis
            </summary>
            <param name="mc"></param>
            <param name="axis"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.InterlockClear(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase)">
            <summary>
            Interlock the axis
            </summary>
            <param name="mc"></param>
            <param name="axis"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.UpdatePosition(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase)">
            <summary>
            Update axis position
            </summary>
            <param name="mc"></param>
            <param name="axis"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.IsAxisInMask(System.Int32,MPT.USN.CommonLib.Enums.AxisMsk)">
            <summary>
            Is this axis in the mask? 
            </summary>
            <param name="axisId"></param>
            <param name="axisMask"></param>
            <returns>Returns true if is in the mask.</returns>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.evSetAccel">
            <summary>Event for SetAccel</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.evSetDecel">
            <summary>Event for SetDecel</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.evMoveContoured">
            <summary>Event for MoveContoured</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.evMoveRapid">
            <summary>Event for MoveRapid</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.evMoveSingleAxisAbs">
            <summary>Event for MoveSingleAxisAbs</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.evMoveSingleAxisAbsLimitWait">
            <summary>Event for MoveSingleAxisAbs with limited wait time</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.evMoveSingleAxisRel">
            <summary>Event for MoveSingleAxisRel</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.evMoveSingleAxisRelLimitWait">
            <summary>Event for MoveSingleAxisRel with limited wait time</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.evProgramCommand">
            <summary>Event for Program Command</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.evProgramStart">
            <summary>Event for Program Start</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.evProgramStop">
            <summary>Event for Program Stop</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.evHome">
            <summary>Event for Home</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.evRotarySetDirection">
            <summary>Event for RotarySetDirection</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.evStartRotary">
            <summary>Event for StartRotary</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.evStopRotary">
            <summary>Event for StopRotary</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.evFindZero">
            <summary>Event for FindZero</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.evEnableAxis">
            <summary>Event for EnableAxis</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.evGetParamFromAxis">
            <summary>Event for get param from axis</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.evSetPositionLimit">
            <summary>Event for SetAxisPositionLimit</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.evInterlock">
            <summary>Event for Interlock Axis</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.evInterlockClear">
            <summary>Event for Clear Interlock Axis</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.evUpdateCurrentPosition">
            <summary>Event for Update Current Position</summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.RotaryConversion">
            <summary>
            Get/Set the Rotary Conversion value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.LinearConversion">
            <summary>
            Get/Set the Linear Conversion value
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.eInterfaceMode">
            <summary>
            Define Control Interface
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.DelegateParmSMAxisBase">
            <summary>Delegate for single axis parm</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.DelegateParmSMAxisBaseInt">
            <summary>Delegate for single axis parm</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.DelegateParmSMAxisBaseBool">
            <summary>Delegate for single axis parm</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.DelegateParmSMAxisBaseDouble">
            <summary>Delegate for single axis parm</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.DelegateParmSMAxisBaseDoubleDouble">
            <summary>Delegate for single axis parm</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.DelegateParmSMAxisBaseDoubleDoubleInt">
            <summary>
            Delegate for single axis parm
            </summary>
            <param name="mc"></param>
            <param name="axis"></param>
            <param name="pos"></param>
            <param name="speed"></param>
            <param name="millisecondWait"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.DelegateParmAxisBase">
            <summary>Delegate for single axis parm</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.DelegateParmAxes">
            <summary>Delegate for axes parm</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.DelegateParmSMAxes">
            <summary>Delegate for axes parm</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.DelegateParmSMAxesString">
            <summary>Delegate for Axes String</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.DelegateParmSMRAxis">
            <summary>Delegate for single rotary axis</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.DelegateParmRAxis">
            <summary>Delegate for single rotary axis</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.DelegateParmSMRAxisDouble">
            <summary>Delegate for single rotary axis and double</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.DelegateParmSMRAxisRDir">
            <summary>Delegate for single rotary axis and RDir</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.DelegateParmSMAxesDoublesDoubles">
            <summary>Delegate for axes position[] and speed[] parm</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.DelegateParmSMAxesDoublesDouble">
            <summary>Delegate for axes position[] and speed[] parm</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem.DelegateParmSMAxisBaseObjectObject">
            <summary>Delegate for single axis parm</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain">
            <summary>
            Summary description for Axis.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axis">
            <summary>
            Summary description for Axis.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase">
            <summary>
            Summary description for AxisBase.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.dbLimitError">
            <summary>
            Access to the LimitError data object 
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.ddCurrentPos">
            <summary>
            Access to the Current Position data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.ddAcceleration">
            <summary>
            Access to the "Acceleration" data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.ddTargetPos">
            <summary>
            Access to the "Target Position" data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.ddTargetSpeed">
            <summary>
            Access to the "Target Speed" data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.ddStartPos">
            <summary>
            Access to the "Start Position" data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.ddStartSpeed">
            <summary>
            Access to the "Start Speed" data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.dbMotorAlarm">
            <summary>
            Access to the "Motor Alarm" data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.ddMotorResolution">
            <summary>
            Access to the "Motor Resolution" data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.dsAutoActuatePath">
            <summary>
            Start trigger mnemonic
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.dsStartPosSensors">
            <summary>
            Start Sensors mnemonic
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.dsTargetPosSensors">
            <summary>
            Target Sensors mnemonic
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase._cmdMode">
            <summary>
            Set point
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.#ctor(System.String,MPT.USN.CommonLib.Enums.AxisGroup)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
            <param name="axisGroup"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.Initialize">
            <summary>
             Initialize the component
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase._simSetPoint">
            <summary>
            Simulation set point
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.SimStartMove(MPT.USN.CommonLib.SMMethodCall,System.Double)">
            <summary>
            Set point
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.Update">
            <summary>
            Called periodically to update current position
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.AdjustAbsolutePos(System.Double,System.Double)">
            <summary>
            Adjust the absolute position
            </summary>
            <param name="curPos"></param>
            <param name="prevPos"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.ToggleEnable(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Switch state of enable flag
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.Enable(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataBool)">
            <summary>
            Enable component
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.Home(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Home axis
            </summary>
            <param name="caller"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.diMoveTimeoutMilliSecond">
            <summary>
            Move time out in millisecond for this axis
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.dbEnableAutoRecoveryWhenFail">
            <summary>
            Whether Auto Recovery is enabled for this axis
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.CmdAxisGroup">
            <summary>
            Get/Set CmdAxisGroup property
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.LimitError">
            <summary>
            Access to the LimitError parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.CurrentPos">
            <summary>
            Access to the Current Position parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.Acceleration">
            <summary>
            Access to the Acceleration parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.TargetPos">
            <summary>
            Access to the Target Position parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.TargetSpeed">
            <summary>
            Speed in mm/sec
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.StartPos">
            <summary>
            Access to the Start Position parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.StartSpeed">
            <summary>
            Get/Set the Start Speed data value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.MotorAlarm">
            <summary>
            Access to the MotorAlarm parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.MotorResolution">
            <summary>
            Access to the Motor Resolution parameter
            </summary>
            <remarks>Scale factor to convert from motor counts to microns.</remarks>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.AutoActuatePath">
            <summary>
            Get/Set the dsAutoActuatePath
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.StartPosSensors">
            <summary>
            Get/Set the dsStartPosSensors
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.TargetPosSensors">
            <summary>
            Get/Set the dsTargetPosSensors
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.CmdMode">
            <summary>
            Get/Set CmdMode property
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.CmdUnits">
            <summary>
            Get/Set CmdUnits property
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase.Id">
            <summary>
            Obtain the channel integer value from the name
            </summary>
            <returns></returns>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axis.ddDeceleration">
            <summary>
            Access to the "Deceleration" data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axis.dbHomed">
            <summary>
            Access to the "Has Homed" data object
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axis.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axis.#ctor(System.Int32,MPT.USN.CommonLib.Enums.AxisGroup,MPT.USN.CommonLib.Enums.AxisDir)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="axisGroup"></param>
            <param name="axisDir"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axis.Clone(System.Type)">
            <summary>
            Clone this object
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axis.Initialize">
            <summary>
             Initialize the component
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axis.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add a settings page to this class
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axis.Update">
            <summary>
            Called on every thread loop
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axis.MoveAbs(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataDouble,MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
            Move axis absolute
            </summary>
            <param name="caller"></param>
            <param name="ddPos"></param>
            <param name="ddSpeed"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axis.MoveAbsLimitWait(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataDouble,MPT.USN.CommonLib.Data.DataDouble,MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
            Move axis absolute with limited wait time
            </summary>
            <param name="caller"></param>
            <param name="ddPos"></param>
            <param name="ddSpeed"></param>
            <param name="ddMillisecondWait"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axis.MoveRel(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataDouble,MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
            Move axis relative
            </summary>
            <param name="caller"></param>
            <param name="ddTargetPos"></param>
            <param name="ddTargetSpeed"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axis.MoveAbsDir(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Enums.AxisDir,MPT.USN.CommonLib.Data.DataDouble,MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
            Move axis absolute
            </summary>
            <param name="mc"></param>
            <param name="axisDir"></param>
            <param name="ddPos"></param>
            <param name="ddSpeed">axis speed.</param>
            <returns>Returns the amount moved</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axis.FindZero(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
             Find the Zero position
            </summary>
            <param name="caller"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axis.SetAccel(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
             Set the acceleration
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axis.SetDecel(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
            Set the deceleration
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axis.Deceleration">
            <summary>
            Access to the Deceleration parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axis.HasHomed">
            <summary>
            Access to the "Has Homed"
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axis.AxisDir">
            <summary>
            Get/Set the Axis direction 
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.dsOriginDirection">
            <summary>
            Origin Direction
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.dsOriginMode">
            <summary>
            Origin Mode
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.dsSpecificParamString">
            <summary>
            Specific param
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.ddOrgSpeed">
            <summary>
            Org Speed
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.ddOrgAccel">
            <summary>
            Org Accel
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.ddMotorResolution">
            <summary>
            Access to the "Motor Resolution" data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.ddSetupMovePrecision">
            <summary>
            Setup Move Precision
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.diBelongControlAddr">
            <summary>
            Access to the "BelongControlAddr" data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.diAxisIdOnCtrl">
            <summary>
            Access to the "AxisIdOnCtrl" data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.ddCountPerMetrics">
            <summary>
            Access to "CountPerMatric" data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain._diNumFailUpdateAllowed">
            <summary>
            Number Fail update allow
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.ddAxisPitchPerCycle">
            <summary>
            Pitch per Cycle
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.ddPositiveLimit">
            <summary>
            Positive direction limit
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.ddNegativeLimit">
            <summary>
            Negative direction limit
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.dbIsInterlock">
            <summary>
            Interlock signal
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.#ctor(System.Int32,MPT.USN.CommonLib.Enums.AxisGroup,MPT.USN.CommonLib.Enums.AxisDir,System.Int32,System.Int32)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="axisGroup"></param>
            <param name="axisDir"></param>
            <param name="belongControlAddr"></param>
            <param name="axisIdOnController"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add a settings page to this class
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.AxisReset(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Axis reset
            </summary>
            <param name="mcCaller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.GetParamFromAxis(System.Object,System.Object@)">
            <summary>
            Get parameter from axis
            </summary>
            <param name="param"></param>
            <param name="paramVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.SetPositionLimit(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataDouble,MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
            Set Position Limit
            </summary>
            <param name="caller"></param>
            <param name="ddPositiveLimit"></param>
            <param name="ddNegativeLimit"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.Interlock(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Interlock 
            </summary>
            <param name="caller"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.InterlockClear(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Interlock Clear
            </summary>
            <param name="caller"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.UpdateCurrentPosition(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Update Current Position
            </summary>
            <param name="caller"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.BelongControlAddr">
            <summary>
            Access to the BelongControlAddr parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.AxisIdOnCtrl">
            <summary>
            Access to the AxisIdOnCtrl parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.CountPerMatric">
            <summary>
            Access to CountPerMatric parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.NumFailAllow">
            <summary>
            Access to NumFailAllow
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.NumFailCount">
            <summary>
            Acees to Numfail count
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.SetupMovePrecision">
            <summary>
            Access to SetupMovePrecision
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.MotorResolution">
            <summary>
            Access to the Motor Resolution parameter
            </summary>
            <remarks>Scale factor to convert from motor counts to microns.</remarks>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.AxisPitchPerCycle">
            <summary>
            Access to the Axis Pitch per cycle parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.PositiveLimit">
            <summary>
            Access to Positive limit 
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.NegativeLimit">
            <summary>
            Access to Negative limit 
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain.CurrentPos">
            <summary>
            Access to the Current Position parameter
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Output.CurrentOutput">
            <summary>
            Summary description for AnalogOutput.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Output.AnalogOutput">
            <summary>
            Summary description for AnalogOutput.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Output.Output">
            <summary>
            Summary description for Output.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.IOBase">
            <summary>
            Summary description for IOBase.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.IOBase.channelPrefix">
            <summary>
            Prefix characters to be inserted into component name
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOBase.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOBase.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
            <param name="chanPrefix"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOBase.GetChannelFromName">
            <summary>
            Obtain the channel integer value from the name
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOBase.Clone(System.Type)">
            <summary>
            Clone his object
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.IOBase.AxisId">
            <summary>
            Get/Set Id for this axis
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.IOBase.Channel">
            <summary>
            Access to IO channel
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.Output.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.Output.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
            <param name="channelPrefix"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.Output.Initialize">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Output.AnalogOutput.ddSignal">
            <summary>
            Access to Dig Dignal data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Output.AnalogOutput.dsExtraIdentity">
            <summary>
            Access for extra identity
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.AnalogOutput.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.AnalogOutput.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.AnalogOutput.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
            <param name="channelPrefix"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.AnalogOutput.SetOutput(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
            Write the output
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Output.AnalogOutput.Signal">
            <summary>
            Access to the Signal parameter
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.CurrentOutput.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.CurrentOutput.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.CurrentOutput.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
            <param name="channelPrefix"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.CurrentOutput.Initialize">
            <summary>
            Initialize this component
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.CurrentOutput.SetOutput(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
            Write the output
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Output.CurrentOutput.CurrentType">
            <summary>
            Access to voltage type
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Input.CapacitanceInput">
            <summary>
            Summary description for ReistanceInput.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Input.AnalogInput">
            <summary>
            Summary description for AnalogInput.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Input.Input">
            <summary>
            Summary description for Input.
            </summary>
            
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.Input.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.Input.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
            <param name="channelPrefix"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.Input.Initialize">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.Input.Trigger(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
             Trigger the input
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AnalogInput.dsMode">
            <summary>
            read mode
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AnalogInput.ddRawSignal">
            <summary>
            Access to the "Raw Analog Signal"" data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AnalogInput.ddCorrectedSignal">
            <summary>
            Access to the "Corrected Signal"" data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AnalogInput.ddZeroOffset">
            <summary>
            Fully adjusted value
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AnalogInput.diNumAverages">
            <summary>
            Access to the "Raw Analog Signal"" data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AnalogInput.dbUseMinMaxRemoval">
            <summary>
            Whether to use min max removal if more than or equal 5 readings
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AnalogInput.ddSlopeLinearScale">
             <summary>
            Access to Slope for linear scale of input.
             </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AnalogInput.ddYInterceptLinearScale">
            <summary>
            Access to Y-Intercept for linear scale of input.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AnalogInput.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AnalogInput.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
            <param name="channelPrefix"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AnalogInput.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AnalogInput.Initialize">
            <summary>
            Initialize this component
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AnalogInput.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add property pages
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AnalogInput.dAverageVals">
            <summary>
            The average values
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AnalogInput.Trigger(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
             Trigger the input
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AnalogInput.DoReadInput(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            
            </summary>
            <param name="mc"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AnalogInput.SetInputOffset(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            setting offset
            </summary>
            <param name="mcCaller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AnalogInput.UpdateSetting(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Update setting
            </summary>
            <param name="mcCaller"></param>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.AnalogInput.RawSignal">
            <summary>
            Access to the Signal data value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.AnalogInput.UseMinMaxRemoval">
            <summary>
            Get/Set whether to use min/max removal
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.AnalogInput.NumAverages">
            <summary>
            Access to the Signal data value
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.CapacitanceInput.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.CapacitanceInput.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
            <param name="channelPrefix"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.CapacitanceInput.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.CapacitanceInput.Initialize">
            <summary>
            Initialize this component
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Enums">
            <summary>
            Summary description for Enums.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Enums.#ctor">
            <summary>
            Useless Constructor
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Enums.eGeneralResult">
            <summary>
            Pass/Fail criteria
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.eGeneralResult.Pass">
            <summary>No failure</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.eGeneralResult.None">
            <summary>No result</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.eGeneralResult.UnderSpec">
            <summary>Value is under the spec limit</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.eGeneralResult.OverSpec">
            <summary>Value is over the spec limit</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.eGeneralResult.UnderMarginalSpec">
            <summary>Value is under the Marginal spec limit</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.eGeneralResult.OverMarginalSpec">
            <summary>Value is over the Marginal spec limit</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.eGeneralResult.VisionFail">
            <summary>Vision acquisition failure</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.eGeneralResult.ProberFail">
            <summary>Prober acquisition failure</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Enums.eValMinMaxMode">
            <summary>
            Validation Min Max modes
            </summary>
            <remarks>How do we handle case where value violates Min/Max</remarks>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.eValMinMaxMode.PegValue">
            <summary>Set at Min or Max</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.eValMinMaxMode.NoChange">
            <summary>Do not change value</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.eValMinMaxMode.NoRestriction">
            <summary>Value can exceed min/max</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Enums.eSampleMode">
            <summary>
            Modes of sampling data
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.eSampleMode.Audit">
            <summary>Audit</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.eSampleMode.Stability">
            <summary>Stabilityr</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.eSampleMode.Development">
            <summary>DevelopmentC</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Enums.eDBFlag">
            <summary>
            Flag values for dirtiness
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.eDBFlag.Ignore">
            <summary>Ignore the item. Will not be put in database</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.eDBFlag.Clean">
            <summary>Not dirty at all</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.eDBFlag.Performance">
            <summary>Data for timing</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.eDBFlag.Setting">
            <summary>Normal settings data</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Enums.MachineType">
            <summary>
            Direction of travel for axis
            </summary>
            <remarks>Do not change the numeric values.  The numeric values are used for database</remarks>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType.All">
            <summary>Invalid selection</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType.None">
            <summary>No selection</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType.CommonLib">
            <summary>CommonLib</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType._beginApplications">
            <summary>Do not change 'begin' value or order!</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType.SPLBackEnd">
            <summary>MC/LS/SA</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType.SPLWelder">
            <summary>Welder</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType.WaveC">
            <summary>Wave C</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType.SPLPreLoad">
            <summary>Preload Machine</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType.AutoVision">
            <summary>AutoVision Machine</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType.WaveCViewer">
            <summary>WaveCViewer</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType.CRSTester">
            <summary>CRSTester</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType.RoboDisp">
            <summary>RoboDisp</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType.AutoFiller">
            <summary>AutoFiller</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType.MPSorter">
            <summary>MPSorter</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType.TGSorter">
            <summary>TGSorter</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType.USExtractor">
            <summary>USExtractor</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType.NDETester_Type1">
            <summary>NDETester-Type1 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType._endApplications">
            <summary>Alway the last one</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType._numApplications">
            <summary>Get the number</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType._beginProductUtilities">
            <summary>Do not change 'begin' value or order!</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType.ProductSpecs">
            <summary>Product Specs</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType._endProductUtilities">
            <summary>Alway the last one</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType._numProductUtilities">
            <summary>Get the number</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType._beginDevUtilities">
            <summary>Do not change 'begin' value or order!</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType.ReleaseMgr">
            <summary>ReleaseMgr</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType.DriverDevelop">
            <summary>For Driver development</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType.Tutorial">
            <summary>Tutorial</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType._endDevUtilities">
            <summary>Alway the last one</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType._numDevUtilities">
            <summary>Get the number</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType._beginDrivers">
            <summary>Do not change 'begin' value or order!</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType.Aki">
            <summary>Aki</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType._endDrivers">
            <summary>Alway the last one</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType._numDrivers">
            <summary>Get the number</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.MachineType._num">
            <summary>Total num items</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Enums.AxisDir">
            <summary>
            Direction of travel for axis
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisDir.None">
            <summary> No particluar direction </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisDir.X">
            <summary> X </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisDir.Y">
            <summary> Y </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisDir.Z">
            <summary> Z </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisDir.R">
            <summary> rotary </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Enums.PostSetMode">
            <summary>
            Execution mode for the machine
            </summary>
            <value></value>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.PostSetMode.CLEAR">
            <summary> Thread is clear of any prior Post Set requests </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.PostSetMode.POSTREQUEST">
            <summary> Thread Requests to POSTSET</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.PostSetMode.POSTREQUESTACCEPTED">
            <summary> Main thread has accepted request</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Enums.RunMode">
            <summary>
            Execution mode for the machine
            </summary>
            <value></value>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.RunMode.NORMAL">
            <summary> Running </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.RunMode.PLAYBACK">
            <summary> Playback </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.RunMode.RECORDING">
            <summary> Recording </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Enums.UserPrivileges">
            <summary>
            Security levels
            </summary>
            <value>My value description</value>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UserPrivileges.NONE">
            <summary>None</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UserPrivileges.OPERATOR">
            <summary>Operator</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UserPrivileges.TECHNICIAN">
            <summary>Technician</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UserPrivileges.ENGINEER">
            <summary>Engineer</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UserPrivileges.DEVELOPER">
            <summary>Developer</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Enums.ProcessRequest">
            <summary>
            Process run states
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.ProcessRequest.IDLE">
            <summary> Idle </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.ProcessRequest.STOP">
            <summary> Stop </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.ProcessRequest.RUN">
            <summary> Run </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.ProcessRequest.PAUSE">
            <summary> Pause </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.ProcessRequest.STEP">
            <summary> Step </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Enums.AxisGroup">
            <summary>
            Axis group assignements
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisGroup.G01">
            <summary> Group 1 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisGroup.G02">
            <summary> Group 2 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisGroup.G03">
            <summary> Group 3 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisGroup.G04">
            <summary> Group 4 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisGroup.G05">
            <summary> Group 5 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisGroup.G06">
            <summary> Group 6 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisGroup.G07">
            <summary> Group 7 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisGroup.G08">
            <summary> Group 8 </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Enums.AxisMode">
            <summary>
            Axis command modes
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMode.ABSOLUTE">
            <summary> Absolute 2 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMode.RELATIVE">
            <summary> Relative </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Enums.Units">
            <summary>
            Global units choices
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.Units.METRIC">
            <summary> Metric </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.Units.ENGLISH">
            <summary> English </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.Units.COUNTS">
            <summary> Counts </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Enums.RotaryDir">
            <summary>
            Direction for rotary axis
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.RotaryDir.CW">
            <summary> Clockwise </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.RotaryDir.CCW">
            <summary> Counter-Clockwise </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Enums.RotaryCommand">
            <summary>
            States for rotary axis
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.RotaryCommand.IDLE">
            <summary> Idle </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.RotaryCommand.START">
            <summary> Start </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.RotaryCommand.STOP">
            <summary> Stop </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.RotaryCommand.SETDIRECTION">
            <summary> Set Direction </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Enums.AxisMsk">
            <summary>
            Bit assinments for axis gouping
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.NOAXIS">
            <summary> No Axis </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.A01">
            <summary> Axis 1 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.A02">
            <summary> Axis 2 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.A03">
            <summary> Axis 3 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.A04">
            <summary> Axis 4 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.A05">
            <summary> Axis 5 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.A06">
            <summary> Axis 6 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.A07">
            <summary> Axis 7 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.A08">
            <summary> Axis 8 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.A09">
            <summary> Axis 9 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.A10">
            <summary> Axis 10 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.A11">
            <summary> Axis 11 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.A12">
            <summary> Axis 12 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.A13">
            <summary> Axis 13 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.A14">
            <summary> Axis 14 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.A15">
            <summary> Axis 15 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.A16">
            <summary> Axis 16 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.A17">
            <summary> Axis 17 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.A18">
            <summary> Axis 18 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.A19">
            <summary> Axis 19 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.A20">
            <summary> Axis 20 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.A21">
            <summary> Axis 21 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.A22">
            <summary> Axis 22 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.A23">
            <summary> Axis 23 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.A24">
            <summary> Axis 24 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.A25">
            <summary> Axis 25 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.A26">
            <summary> Axis 26 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.A27">
            <summary> Axis 27 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.A28">
            <summary> Axis 28 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.A29">
            <summary> Axis 29 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.A30">
            <summary> Axis 30 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.A31">
            <summary> Axis 31 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.A32">
            <summary> Axis 32 </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.AxisMsk.NUMAXIS">
            <summary> Number of axis </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Enums.UnitTypes">
            <summary>
            ENum for dirent unit types
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes._INVALID">
            <summary> Invalid Entry </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes._NONE">
            <summary> Dimensionless </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes._LINEAR">
            <summary> Automatic selection and beginning for linear </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.METRIC_LINEAR">
            <summary>Metric tag</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.um">
            <summary> microns (internal storage unit)</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.mm">
            <summary> mili-meters </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.nm">
            <summary> inches </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.ENGLISH_LINEAR">
            <summary>English tag</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.mils">
            <summary> Mils </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.inches">
            <summary> inches </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.uin">
            <summary> micro-inches </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes._RATIO">
            <summary> Automatic selection and beginning for Ratio units </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.scale">
            <summary> linear ratio (internal storage unit)</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.dB">
            <summary>decibels </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.percent">
            <summary>percentage</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes._SQRTHZ">
            <summary> Automatic selection and beginning for SqrtHz units </summary>            
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.SqrtHZ">
            <summary> SqrRoot of Hz (internal storage unit)</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes._ROTARY">
            <summary> Automatic selection and beginning for Rotary units </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.deg">
            <summary> degrees </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.Cycle">
            <summary> rotations (internal storage unit)</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.kCycle">
            <summary> Kili-rotations </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.rad">
            <summary> radians </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.deg_min">
            <summary> Degree Minutes</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes._TIME">
            <summary> Automatic selection and beginning for Time dimension</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.sec">
            <summary> seconds (internal storage unit)</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.msec">
            <summary> mili-seconds </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.usec">
            <summary> micro-seconds </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.min">
            <summary> minutes </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.hr">
            <summary> hours </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes._TEMPERATURE">
            <summary> Automatic selection and beginning for Temperature dimension</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.C">
            <summary> Celcius </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.F">
            <summary> Farenheiht </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.K">
            <summary> Kevin </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes._VOLTAGE">
            <summary> Automatic selection and beginning for voltage dimension</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.V">
            <summary> Volts </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.mV">
            <summary> mili-Volts </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.kV">
            <summary> Kili-Volts </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.Vp">
            <summary> Volts Peak </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.mVp">
            <summary> mili-Volts Peak </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.kVp">
            <summary> Kili-Volts Peak</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes._AMPS">
            <summary> Automatic selection and beginning for Amperage dimension</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.kA">
            <summary> Kili-Amps </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.A">
            <summary> Amps </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.mA">
            <summary> mili-Amps </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.uA">
            <summary> micro-Amps </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.nA">
            <summary> nano-Amps </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes._FORCE">
            <summary> Automatic selection and beginning for Force dimension</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.g">
            <summary> grams</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.mg">
            <summary> mili-grams </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.kg">
            <summary> kili-grams </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes._POWER">
            <summary> Automatic selection and beginning for Power dimension</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.watts">
            <summary> watts </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes._SAMPLES">
            <summary> Automatic selection and beginning for voltage dimension</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.Samples">
            <summary> unit </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.kSamples">
            <summary> Kili-samples </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes._BYTES">
            <summary> Automatic selection and beginning for bytes dimension</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.Bytes">
            <summary> Bytes </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.kB">
            <summary> kilo-Bytes </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.MB">
            <summary> Mega-Bytes </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.GB">
            <summary> Gigi-Bytes </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes._FREQUENCY">
            <summary> Frequency  </summary>     
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.Hz">
            <summary> Hz </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.KHz">
            <summary> Kili-Hz </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.MHz">
            <summary> Mega-Hz </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes._RESISTANCE">
            <summary> Resistance  </summary>   
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.Ohm">
            <summary> Ohm </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.KOhm">
            <summary> Kili-Ohm </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.MOhm">
            <summary> Mega-Ohm </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.GOhm">
            <summary> Giga-Ohm </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.TOhm">
            <summary> Tera-Ohm </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes._CAPACITANCE">
            <summary> Resistance  </summary>   
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.pf">
            <summary> pic- f </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.nf">
            <summary> nano-f </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.uf">
            <summary> micro-f </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.f">
            <summary>  f </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes._OTHER">
            <summary> other </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes.processState">
            <summary> ProcessState </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.UnitTypes._ENDOFLIST">
            <summary> End of list </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Enums.HistoricalType">
            <summary>
            Historical possible selections
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.HistoricalType.Avg">
            <summary>Average</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.HistoricalType.Min">
            <summary>Minimum</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.HistoricalType.Max">
            <summary>Maximum</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Enums.RateType">
            <summary>
            All possible rates
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.RateType.distance">
            <summary>position only</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.RateType.velocity">
            <summary>velocity</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Enums.RateType.acceleration">
            <summary>acceleration</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.DataType">
            <summary>
            Base class for all data types
            <para/>
            <para/>
            <list type="table"> 
            <listheader><term>Topics...</term></listheader>
            <item><term><see cref="M:MPT.USN.CommonLib.Data.DataType.RegisterObject(System.Object)">Linking a data Type with a control</see></term></item>
            <item><term><see cref="T:MPT.USN.CommonLib.Data.Validations.Validation">Validation</see></term></item>
            <item><term><see cref="T:MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction">Transfer Functions</see></term></item>
            <item><term><see cref="P:MPT.USN.CommonLib.Data.DataType.UnitType">Using Units</see></term></item>
            </list>
            <para/>
            <para/>
            </summary>
            <remarks>Data types are MCL wrappers around typical c# data types, like String, Int32, Double, etc.
            <para/>Each Data type can be registered in a Data Manager (DataMgr) list.  A registered data type will automatically 
            have several supporting utilities like, Watch logs, persistence, color, validation, and transfer functions.  Data Types can 
            also link to a control to automatically save and update.
            <para/>
            The MCL system can manage thousands of data objects with now performance degradation.
            <para/>
            <list type="table"> 
            <listheader><term>Available MCL data types...</term><description>Description</description></listheader>
            <item><term><see cref="T:MPT.USN.CommonLib.Data.DataDouble">DataDouble</see></term><description>Wrapper for System.Double</description></item>
            <item><term><see cref="T:MPT.USN.CommonLib.Data.DataFloat">DataFloat</see></term><description>Wrapper for float</description></item>
            <item><term><see cref="T:MPT.USN.CommonLib.Data.DataInt">DataInt</see></term><description>Wrapper for System.Int32</description></item>
            <item><term><see cref="T:MPT.USN.CommonLib.Data.DataString">DataString</see></term><description>Wrapper for System.String</description></item>
            <item><term><see cref="T:MPT.USN.CommonLib.Data.DataBool">DataBool</see></term><description>Wrapper for System.Boolean</description></item>
            <item><term><see cref="T:MPT.USN.CommonLib.Data.DataByte">DataByte</see></term><description>Wrapper for System.Byte</description></item>
            <item><term><see cref="T:MPT.USN.CommonLib.Data.DataUShort">DataUShort</see></term><description>Wrapper for System.UInt16</description></item>
            <item><term><see cref="T:MPT.USN.CommonLib.Data.DataLong">DataLong</see></term><description>Wrapper for System.Int64</description></item>
            <item><term><see cref="T:MPT.USN.CommonLib.Data.DataEnum">DataEnum</see></term><description>Wrapper for System.Enum</description></item>
            <item><term><see cref="T:MPT.USN.CommonLib.Data.DataDateTime">DataDateTime</see></term><description>Wrapper for System.DateTime</description></item>
            </list>
            <para/>
            </remarks>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.IDBClass">
            <summary>
            Interface for database-bound classes which cannot be derived from DBClass
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.IDBClass.dbFullPathName">
            <summary>
            Sub-path value of this object's name
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.IDBClass.dbDirty">
            <summary>
            Sub-path value of this object's name
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DataType.nativeInfo">
            <summary>
            MemberInfo info used for external interfacing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.SetMemberVal(System.Object)">
            <summary>
            Set the value
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.GetDbVal">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.GetVal(MPT.USN.CommonLib.Enums.UnitTypes)">
            <summary>
            Return the value as an Object
            </summary>
            <param name="ut"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.EnsureUnitType(MPT.USN.CommonLib.Enums.UnitTypes)">
            <summary>
            Make sure of unit type
            </summary>
            <param name="ut"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.BeforeFileSave">
            <summary>
            Before file save
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.AfterFileRead">
            <summary>
            After Machine xml File read
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DataType.validationResult">
            <summary>
            Result of validation
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DataType._validationColor">
            <summary>
            Result color for validation
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DataType.validation">
            <summary>
            Validation reference
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DataType.TFResponseLimits">
            <summary>
            Limits for TF response
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DataType.transferFunction">
            <summary>
            Transfer function 
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.SetVal(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Set the value from the given data type
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.VerifyVal(System.Object)">
            <summary>
            Converts Object to a value that matches this data type.
            It returns the converted value without saving the raw value internally in this class object.
            If error, Pops up message and returns null.
            </summary>
            <param name="oVal"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.ValidateAndSave(System.Object)">
            <summary>
            Validate and saves an unknown data type.  Throws exception on validation error
            </summary>
            <param name="oVal"></param>
            <remarks>This is used for process action statements and Page validation.
            It gerically converts an unknown object type to this data object value type</remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.IncrementPlayBackIndex(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Increment the playback index
            </summary>
            <param name="caller"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.GetPlayBackVal">
            <summary>
            Get the playback value from the file table if it exists.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.ConvertValidate(System.Object)">
            <summary>
            Validate basics for this type
            </summary>
            <param name="oVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.Save(System.Object)">
            <summary>
            Save the value after validation
            </summary>
            <param name="objVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.UnitFromString(System.String)">
            <summary>
            Set the units from string
            </summary>
            <param name="strUnit"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.GetUnitString">
            <summary>
            Return the unit string
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.Clone(System.Type)">
            <summary>
            Clone interface
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.CompareTo(System.Object)">
            <summary>
            Implementation of IComparable
            </summary>
            <param name="otherObj"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.ResetStats">
            <summary>
            Reset the statistical values
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.UnitConvert">
            <summary>
            Scale the value from internally stored units
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.UnitConvert(System.Double)">
            <summary>
            Convert to display units
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.UnitConvert(MPT.USN.CommonLib.Enums.UnitTypes,System.Double)">
            <summary>
            Scale the value from internally stored units
            </summary>
            <param name="ut"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.InvUnitConvert(System.Double)">
            <summary>
            InvertConvert from display units
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.UnitTypeRespectFactor">
            <summary>
            Converts the value to proper units
            </summary>
            <returns></returns>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DataType._postedSetVal">
            <summary>
            Value to update when time is right
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.#ctor">
            <summary>
            Constructor for Xml serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.#ctor(System.String,MPT.USN.CommonLib.Enums.UnitTypes,MPT.USN.CommonLib.Enums.RateType,MPT.USN.CommonLib.Enums.UnitTypes)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
            <param name="unitType"></param>
            <param name="rate"></param>
            <param name="unitTypeRespect"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="recordable"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.Register(MPT.USN.CommonLib.MPTBase)">
            <summary>
            Register this data type
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.Rename(System.String)">
            <summary>
            Rename this data type
            </summary>
            <param name="newName"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.UnRegisterDataMethods">
            <summary>
            Unregister the methods in this data type
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.Delete">
            <summary>
            Delete this 
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.SetDefault">
            <summary>
            Set value to its default
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.ValToString">
            <summary>
            Convert the value to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.ValToDisplayString">
            <summary>
            Convert the value to a formatted string
            </summary>
            <returns>Returns text fit for display.</returns>
            <remarks>Value is converted to proper units</remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.ValToDisplayString(System.String)">
            <summary>
            Convert the value to a formatted string
            </summary>
            <returns>Returns text fit for display.</returns>
            <remarks>Value is converted to proper units</remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.ValToString(System.String)">
            <summary>
            Convert the value to a formatted string
            </summary>
            <param name="fmt"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.ValToDefaultString">
            <summary>
            Convert the default value to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.ValFromString(System.String)">
            <summary>
            Set value from string
            </summary>
            <param name="str"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DataType._bLoopDriver">
            <summary>
            Flag to indicate if this data object is driving the thread loop
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.Increment(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Increment by one
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.RandomGausian(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataDouble,MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
            Random Gausian
            </summary>
            <param name="caller"></param>
            <param name="ddcenter"></param>
            <param name="ddtolerance"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.Decrement(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Decrement by one
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.Set(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Set the data type with a value
            </summary>
            <param name="caller"></param>
            <param name="value"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.TransferFunctionSetVal(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Set the value based in the transfer function's equation
            </summary>
            <param name="caller"></param>
            <returns></returns>
            <remarks>If the user has not defined a transfer function for this data type,
            it has no effect.</remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.TransferFunctionSetVal(MPT.USN.CommonLib.SMMethodCall,System.Double)">
            <summary>
            Set the value based in the transfer function's equation
            </summary>
            <param name="caller"></param>
            <param name="offsetWeight"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.TransferFunctionSetValWorstCase(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Set the value based on the TF's equation, in the worst case
            </summary>
            <param name="caller"></param>
            <returns></returns>
            <remarks>
            This should not be called at the first time. The working scheme is like this: Firstly we
            call to normal TransferFunctionSetVal, if the return value is not satisfied (out of a limit
            for example), then we will call to this to have the value in worst case.  Individual transfer
            function will have their own mechanism to handle the worst case
            </remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.TransferFunctionGetCoeff(MPT.USN.CommonLib.Data.DataType,System.Int32)">
            <summary>
            Returns the coefficient
            </summary>
            <param name="dtInput"></param>
            <param name="nCoeff"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.TransferFunctionGetInversion(System.Int32)">
            <summary>
            Set the value based in the transfer function's equation
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.TransferFunctionSetVal(System.Double)">
            <summary>
            Set the value based in the transfer function's equation
            </summary>
            <param name="offsetWeight"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.TransferFunctionValidate(System.Boolean,System.Boolean)">
            <summary>
            Validate that the transfer function is setup to run
            </summary>
            <param name="train"></param>
            <param name="AlwaysDoUpdate"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.TransferFunctionValidate(System.Boolean)">
            <summary>
            Validate that the transfer function is setup to run
            </summary>
            <param name="train"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.TransferFunctionUpdate(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Update the transfer function
            </summary>
            <param name="caller"></param>
            <param name="dtResponse"></param>
            <returns></returns>
            <remarks>If the user has not defined a transfer function for this data type,
            it has no effect.</remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.TransferFunctionUpdate(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataType,System.Double)">
            <summary>
            Update the transfer function which raw error specified
            </summary>
            <param name="caller"></param>
            <param name="dtResponse"></param>
            <param name="error">
            This is actual error = (Target - Final)
            This will be used in calculate for weighing when finding
            Section Point.
            </param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.TransferFunctionUpdateWithError(MPT.USN.CommonLib.Data.DataType,System.Double)">
            <summary>
            Update the transfer function which raw error specified
            </summary>
            <param name="dtResponse"></param>
            <param name="error">
            This is actual error = (Target - Final)
            This will be used in calculate for weighing when finding
            Section Point.
            </param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.TransferFunctionGetResponseSigmaOfCurrentBin">
            <summary>
            Get the sigma in term of response for current bin
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.TransferFunctionRegenerate(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Increment by one
            </summary>
            <param name="caller"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.TransferFunctionLoadTrainedResponses">
            <summary>
            Read from a file and import into trained response list
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.Increment">
            <summary>
            Increment by one
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.RandomGausian(System.Double,System.Double,System.Int32)">
            <summary>
            Random gausian
            </summary>
            <param name="center"></param>
            <param name="tolerance"></param>
            <param name="pos"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.Decrement">
            <summary>
            Decrement by one
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DataType.tfInputs">
            <summary>
            container for input bins
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DataType.transferFunctionTrainFile">
            <summary>
            String to hold the transfer function file path
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DataType.transferFunctionTrainedResponse">
            <summary>
            String array of transfer function Trained responses.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.RegisterObject(System.Object)">
            <summary>
            Add text boxes that receive the current state text
            </summary>
            <param name="objBox"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.UnRegisterObject(System.Object)">
            <summary>
            Remove control from list
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.IsTrue(System.Object)">
            <summary>
            Returns true if Val is true
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.UpdateObject(System.Windows.Forms.Control,System.Object)">
            <summary>
            Refrtesh the display of the TextBox
            </summary>
            <param name="ctl"></param>
            <param name="oVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.BroadcastPageChange">
            <summary>
            Allow those pages that use this control to update display
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.BroadcastChange">
            <summary>
            Refresh all controls that reference this data object
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.IsMetric">
            <summary>
            Return true if unit type is metric
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.IsEnglish">
            <summary>
            Return true if unit type is metric
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.OnGlobalUnitChanged">
            <summary>
            Broadcast to all GUI items registered
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.BroadcastGUIChange">
            <summary>
            Broadcast to all GUI items registered
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.MakeTextBoxesReadOnly">
            <summary>
            Set all TextBoxes to readonly
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.ConfirmValidation(System.Type)">
            <summary>
            Return a validation object.  Create if it doesn't exist
            </summary>
            <param name="tyVal"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.ConfirmResponseLimits">
            <summary>
            Return the TF Response limit object.  Create if it doesn't exist
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.CopyValidationFrom(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Copy the validation info
            </summary>
            <param name="dtFrom"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.CopyTFInputsFrom(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Copy the SaveTFInputs info
            </summary>
            <param name="dtFrom"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.CopyDataFrom(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Copy the value from a different data object
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.ResetPlayback">
            <summary>
            Close all playback files and reset flags
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.PlayBack">
            <summary>
            Checks if data is actively reading from file
            </summary>
            <returns>Returns true is palying back from file.</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.UpdatePlaybackValue">
            <summary>
            Update the current value according to what's stored in the record file
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataType.OnModeChange">
            <summary>
            Response to Record/RUn/Playback mode change
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.dbFullPathName">
            <summary>
            IDBClass Interface implementation
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.dbDirty">
            <summary>
            IDBClass Interface implementation
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.IsDbField">
            <summary>
            Flag to 
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.DbFlag">
            <summary>
            Flag to indicate whether it is a performance field
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.UnitType">
            <summary>
            Primary Unit associated with this data Type
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.SerUnitType">
            <summary>
            Property used for serialization only
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.SkipUpdate">
            <summary>
            Don't train
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.TFUnitType">
            <summary>
            Position units
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.SerTFUnitType">
            <summary>
            Serialize the value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.MaxArrayLength">
            <summary>
            Get/Set the maximum array length
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.SerMaxArrayLength">
            <summary>
            Serialize the value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.Persistent">
            <summary>
            Report back if this DataType is persistent
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.colorNeutral">
            <summary>Maximim fail color</summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.SerColorNeutral">
            <summary>Serializes the 'colorMin' Color to XML.</summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.validationColor">
            <summary>
            Get/set the validation color
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.validationColorHtml">
            <summary>
            Serializes the 'validation color' Color to XML. 
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.UseLocalTrainedValues">
            <summary>
            Returns whether or not to use local trained values.
            This is used in TFPanel
            It is applied when there are we do not want to share common trained values
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.SerUseLocalTrainedValues">
            <summary>
            Serialize the value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.UsePlaybackTable">
            <summary>
            Returns whether or not to use Playback table.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.SerUsePlaybackTable">
            <summary>
            Serialize the value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.Dynamic">
            <summary>
            Returns whether or not this data type is dynamic.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.ValidationResult">
            <summary>
            Property for validation result
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.ValidationColor">
            <summary>
            Property for validation color
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.ObjRawVal">
            <summary>
            Get/Save the value from an unknown object
            No validation takes place
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.NonAutoUnitType">
            <summary>
            Position units
            </summary>
            <remarks>This will return a true unit type (no Auto)</remarks>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.NonAutoUnitTypeRespect">
            <summary>
            Position units
            </summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Data.DataType.OnChanged">
            <summary>
            Event to handle Change 
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.UnitTypeRespect">
            <summary>
            Position with repect to
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.SerUnitTypeRespect">
            <summary>
            Serialize the value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.RateType">
            <summary>
            Whether the unit is Distance, velocity, or acceleration
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.SerRateType">
            <summary>
            Serialize the value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.OwnerClassType">
            <summary>
            The class type of the parent that owns this field
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.fieldInfo">
            <summary>
            The Field Info for this data type
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.AverageCount">
            <summary>
            Amount of error to apply
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.SerAverageCount">
            <summary>
            Serialize the value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.UpdatePeriod">
            <summary>
            This value is stored here until ready to update.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.SerUpdatePeriod">
            <summary>
            Serialize the value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.SusUpdate">
            <summary>
            Prevent data from being updated
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.TimeToUpdate">
            <summary>
            Determines if it is time to update this data
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.PostedSetVal">
            <summary>
            Returns true if value is posted
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.CanDelete">
            <summary>
            Returns true if this data type can be deleted
            </summary>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.TransferFunctionIndex">
            <summary>
            Get/Set the transfer function train index
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.TransferFunctionTrain">
            <summary>
            Set whether transfer function is trained
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.TransferFunctionAutomatic">
            <summary>
            Set whether transfer function is in Automatic mode
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.RegistrationCount">
            <summary>
            Get the number of registrations
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.SerSaveTFInputs">
            <summary>
            Used only to serialize the SaveTFInputs Hashtable
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.SerOldSaveTFInputs">
            <summary>
            Obsolete. Only used for backward compatibility
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.Recordable">
            <summary>
            Get/Set flag to indicate that the data type is recordable
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.SerRecordable">
            <summary>
            Serialize the value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.GuiInvalidate">
            <summary>
            Get/Set the Gui Invalidate flag
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataType.EnableControl">
            <summary>
            Enable/ disable any registered controls
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.DataType.DelegateOnChanged">
            <summary>
            Delegate to store change method
            </summary>
            <param name="sender"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.DataType.UpdateObjectDelegate">
            <summary>
            Delegate for UpdateObject
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.NativeData">
            <summary>
            DataType that wraps around an object array
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.NativeData.#ctor(System.String,System.String,System.Type,System.Reflection.MemberInfo,System.Object,System.Collections.IList,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="strCompletePath"></param>
            <param name="memberName"></param>
            <param name="t"></param>
            <param name="mi"></param>
            <param name="classObj"></param>
            <param name="list"></param>
            <param name="index"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.NativeData.SetMemberVal(System.Object)">
            <summary>
            Set the array member value
            </summary>
            <param name="val"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.DBControlTag">
            <summary>
            Class to contain DB info for non-MPTControl
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DBControlTag.data">
            <summary>
            Data from data base
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DBControlTag.name">
            <summary>
            Fiewld name
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DBControlTag.classType">
            <summary>
            Type of the class
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DBControlTag.fullPathName">
            <summary>
            THe full path
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DBControlTag.className">
            <summary>
            The class namne (DB table name)
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DBControlTag.#ctor(MPT.USN.CommonLib.Data.DBControlTag)">
            <summary>
            Constructor
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DBControlTag.#ctor(System.Type,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="classType"></param>
            <param name="name"></param>
            <param name="fullPathName"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DBControlTag.#ctor(System.Object,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="classObj"></param>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DBControlTag.GetAllData">
            <summary>
            Get the data fromn the data base
            </summary>
            <returns>The number of rows</returns>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.DataFloat">
            <summary>
            Summary description for DataFloat.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataFloat.GetVal(MPT.USN.CommonLib.Enums.UnitTypes)">
            <summary>
            Return the value as an Object
            </summary>
            <param name="ut"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataFloat.#ctor">
            <summary>
            Constructor for Xml serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataFloat.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataFloat.#ctor(System.String,System.Single)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
            <param name="fVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataFloat.#ctor(System.String,System.Single,MPT.USN.CommonLib.Enums.UnitTypes)">
            <summary>
            Constructor for Distance setting
            </summary>
            <param name="name"></param>
            <param name="fVal"></param>
            <param name="unitType"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataFloat.#ctor(System.String,System.Single,MPT.USN.CommonLib.Enums.UnitTypes,MPT.USN.CommonLib.Enums.RateType,MPT.USN.CommonLib.Enums.UnitTypes)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
            <param name="fVal"></param>
            <param name="unitType"></param>
            <param name="rate"></param>
            <param name="unitTypeRespect"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataFloat.CopyDataFrom(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Copy data from another  DataFloat object
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataFloat.SetDefault">
            <summary>
            Set value to its default
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataFloat.ValToString">
            <summary>
            Convert the value to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataFloat.ConvertValidate(System.Object)">
            <summary>
            Validate basics for this type
            </summary>
            <param name="oVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataFloat.ValToDisplayString">
            <summary>
            Convert the value to string in proper units
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataFloat.ValToDisplayString(System.String)">
            <summary>
            Convert the value to string in proper units
            </summary>
            <param name="fmt"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataFloat.ValToString(System.String)">
            <summary>
            Convert the value to a formatted string
            </summary>
            <param name="fmt"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataFloat.ValToDefaultString">
            <summary>
            Convert the default value to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataFloat.ValFromString(System.String)">
            <summary>
            Set value from string
            </summary>
            <param name="str"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataFloat.ObjRawVal">
            <summary>
            Get/Save the value from an unknown object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataFloat.RawVal">
            <summary>
            Get/Set the raw value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataFloat.Val">
            <summary>
            Get/Set the value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataFloat.Default">
            <summary>
            Get/Set the default
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Process.BreakPointPage">
            <summary>
            Page to display the breakpoints
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.BreakPointPage.#ctor(MPT.USN.CommonLib.Process.BreakPointForm,MPT.USN.CommonLib.Process.BreakPoint,MPT.USN.CommonLib.Process.SMAction)">
            <summary>
            Constructor
            </summary>
            <param name="formParent"></param>
            <param name="bp"></param>
            <param name="action"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.BreakPointPage.RefreshPage">
            <summary>
            Refresh the contents of this page
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.BreakPointPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.BreakPointPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.BreakPointPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.ModeDisplayForm">
            <summary>
            Class to display the operating mode in big, transparent letters
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.ModeDisplayForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.ModeDisplayForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.ModeDisplayForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.ModeDisplayForm.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.ModeDisplayForm.SetWorkingModeString(System.String,System.Drawing.Color)">
            <summary>
            Set the display text and fore color
            </summary>
            <param name="text"></param>
            <param name="color"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Help.HelpForm">
            <summary>
            Form to contain the help pages
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Help.HelpForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Help.HelpForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Help.HelpForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Help.HelpForm.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Help.HelpForm.NewUrl(System.Object)">
            <summary>
            New help context address
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrderYBin">
            <summary>
            Class to define linear least squares fit transfer function
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrder">
            <summary>
            Class to define MultiVar least squares fit transfer function
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrder.#ctor">
            <summary>
            Constructor for serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrder.#ctor(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            For use when not serializing but using all defaults
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrder.#ctor(System.String,System.Int32,System.Int32,MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Constructor for external control of path and poly order (ma)
            </summary>
            <param name="buffTitle"></param>
            <param name="inputs"></param>
            <param name="polyorder"></param>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrder.Clone">
            <summary>
            Copy data
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrder.CopyDataFrom(MPT.USN.CommonLib.Data.DBClass)">
            <summary>
            Copy data
            </summary>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrder.Name">
            <summary>
            Name of TransferFunction class
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrderYBin.#ctor">
            <summary>
            default Constructor - must call Initialize after setting public properties
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrderYBin.#ctor(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Use when not serializing but using all other defaults
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrderYBin.#ctor(System.String,System.Int32,System.Int32,MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Constructor for external control of path and poly order (ma)
            </summary>
            <param name="buffTitle"></param>
            <param name="inputs"></param>
            <param name="polyorder"></param>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrderYBin.Update(System.Object,System.Object[])">
            <summary>
            Update transfer function characteristics
            </summary>
            <param name="response"></param>
            <param name="inputs"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrderYBin.Name">
            <summary>
            Name of TransferFunction class
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TransferFunctions.OffsetFromZero">
            <summary>
            Class to define linear least squares fit transfer function
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TransferFunctions.Linear">
            <summary>
            Class to define linear least squares fit transfer function
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.Linear.#ctor">
            <summary>
            default Constructor - must call Initialize after setting public properties
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.Linear.#ctor(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Use when not serializing but using all other defaults
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.Linear.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructor for external control but no DataType available yet
            </summary>
            <param name="buffTitle"></param>
            <param name="inputs"></param>
            <param name="polyorder"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.Linear.#ctor(System.String,System.Int32,System.Int32,MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Constructor for external control of path and poly order (ma)
            </summary>
            <param name="buffTitle"></param>
            <param name="inputs"></param>
            <param name="polyorder"></param>
            <param name="dt"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.Linear.Name">
            <summary>
            Name of TransferFunction class
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.OffsetFromZero.#ctor">
            <summary>
            default Constructor - must call Initialize after setting public properties
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.OffsetFromZero.#ctor(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Use when not serializing but using all other defaults
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.OffsetFromZero.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructor for external control but no DataType available yet
            </summary>
            <param name="buffTitle"></param>
            <param name="inputs"></param>
            <param name="polyorder"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.OffsetFromZero.#ctor(System.String,System.Int32,System.Int32,MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Constructor for external control of path and poly order (ma)
            </summary>
            <param name="buffTitle"></param>
            <param name="inputs"></param>
            <param name="polyorder"></param>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.OffsetFromZero.Regenerate">
            <summary>
            Regenerate coeficients based on updated data
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.OffsetFromZero.Regression">
            <summary>
            Linear least squares fit (may be overridden in subclass)
            </summary>
            
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.OffsetFromZero.Name">
            <summary>
            Name of TransferFunction class
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TransferFunctions.Offset">
            <summary>
            Class to define linear least squares fit transfer function
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.Offset.#ctor">
            <summary>
            default Constructor - must call Initialize after setting public properties
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.Offset.#ctor(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Use when not serializing but using all other defaults
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.Offset.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructor for external control but no DataType available yet
            </summary>
            <param name="buffTitle"></param>
            <param name="inputs"></param>
            <param name="polyorder"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.Offset.#ctor(System.String,System.Int32,System.Int32,MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Constructor for external control of path and poly order (ma)
            </summary>
            <param name="buffTitle"></param>
            <param name="inputs"></param>
            <param name="polyorder"></param>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.Offset.Regenerate">
            <summary>
            Regenerate coeficients based on updated data
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.Offset.Regression">
            <summary>
            Linear least squares fit (may be overridden in subclass)
            </summary>
            
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.Offset.Name">
            <summary>
            Name of TransferFunction class
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DbCompareForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DbCompareForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DbCompareForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.DataUInt">
            <summary>
            Summary description for DataUInt.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataUInt.GetVal(MPT.USN.CommonLib.Enums.UnitTypes)">
            <summary>
            Return the value as an Object
            </summary>
            <param name="ut"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataUInt.#ctor">
            <summary>
            Constructor for Xml serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataUInt.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataUInt.#ctor(System.String,System.UInt32)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
            <param name="sVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataUInt.CopyDataFrom(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Copy data from another  DataUInt object
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataUInt.Save(System.Object)">
            <summary>
            Save the value after validation
            </summary>
            <param name="objVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataUInt.SetDefault">
            <summary>
            Set value to its default
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataUInt.ValToString">
            <summary>
            Convert the value to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataUInt.ValToString(System.String)">
            <summary>
            Convert the value to a formatted string
            </summary>
            <param name="fmt"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataUInt.ValToDefaultString">
            <summary>
            Convert the default value to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataUInt.ValFromString(System.String)">
            <summary>
            Set value from string
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataUInt.Increment">
            <summary>
            Increment by one
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataUInt.Decrement">
            <summary>
            Decrement by one
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataUInt.RawVal">
            <summary>
            Get/Set the raw value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataUInt.ObjRawVal">
            <summary>
            Get/Save the value from an unknown object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataUInt.Val">
            <summary>
            Get/Set the value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataUInt.Default">
            <summary>
            Get/Set the default
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2Page">
            <summary>
            Property page for CameraV2
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.FixedVisibleChangePage">
            <summary>
            Page which raise evFixedVisibleChanged event whenever the control
            goes visible or invisible regardless it is a child control.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.FixedVisibleChangePage.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.FixedVisibleChangePage.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="refObj"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.FixedVisibleChangePage.OnPageLoad">
            <summary>
            Page load 
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.FixedVisibleChangePage.OnVisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Override to handle the visible change
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks>If you override this, should call the base to make the event available</remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.FixedVisibleChangePage.Destroy">
            <summary>
            Clean up code
            </summary>
        </member>
        <member name="E:MPT.USN.CommonLib.FixedVisibleChangePage.evFixedVisibleChanged">
            <summary>
            The fixed visible changed event
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2Page.#ctor(MPT.USN.CommonLib.Comp.VisionSystem.CameraV2)">
            <summary>
            Constructor
            </summary>
            <param name="cam"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2Page.OnVisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Thing to do when visible change
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2Page.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2Page.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2Page.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.StringCommSystem.StringCommSystem">
            <summary>
            Class to provide access to third-party String Command System Driver.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.StringCommSystem.StringCommSystem.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.StringCommSystem.StringCommSystem.#ctor(System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.StringCommSystem.StringCommSystem.OnEventsForComponent(MPT.USN.CommonLib.Comp.ComponentBase)">
            <summary>
            OnEventsForComponent
            </summary>
            <param name="comp"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.StringCommSystem.StringCommSystem.ShareController">
            <summary>
            Share controler
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisPage">
            <summary>
            Summary description for AxisPage.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisPage.#ctor(MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axis)">
            <summary>
            Constructor
            </summary>
            <param name="axis"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisPage.UpdateControls">
            <summary>
            Update the properties of some controls
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisPage.CanSafeDispose">
            <summary>
            Indicate whether this can safely disposed when run out of scene
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Output.DigOutput">
            <summary>
            Summary description for DigOutput.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Output.BoolOutput">
            <summary>
            Summary description for EthernetOutput.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Output.BoolOutput.dbSignal">
            <summary>
            Access to Dig Dignal data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Output.BoolOutput.dbSimSignal">
            <summary>
            Access to Dig Dignal data object
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.BoolOutput.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.BoolOutput.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
            <param name="channelPrefix"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.BoolOutput.PackInRecurse(MPT.USN.CommonLib.MPTBase)">
            <summary>
            Just after file read
            </summary>
            <remarks>We are using this to convert old data</remarks>
            <param name="parent"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.BoolOutput.Initialize">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.BoolOutput.SetOutput(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataBool)">
            <summary>
            Write the output
            </summary>
            <param name="mcCaller"></param>
            <param name="dbSignal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.BoolOutput.SetBoolOutput(MPT.USN.CommonLib.SMMethodCall,System.Boolean)">
            <summary>
            Abstract function for setting the digital output
            </summary>
            <param name="mc"></param>
            <param name="bVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.BoolOutput.CreateAssociateCheckBox">
            <summary>
            Create an associate check box to provide GUI triggering output
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.BoolOutput.BindToMPTCheckBox(MPT.USN.CommonLib.MPTControls.MPTCheckBox)">
            <summary>
            Bind to an MPTCheckBox
            </summary>
            <param name="cbGUI"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Output.BoolOutput.Signal">
            <summary>
            Access to the Signal parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Output.BoolOutput.SimSignal">
            <summary>
            Access to the Signal parameter
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.DigOutput.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.DigOutput.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.DigOutput.SetBoolOutput(MPT.USN.CommonLib.SMMethodCall,System.Boolean)">
            <summary>
            Override for trigger
            </summary>
            <param name="mc"></param>
            <param name="bVal"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.IOGroup">
            <summary>
            Summary description for IOGroup.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOGroup.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOGroup.#ctor(System.String,System.Int32,System.Type)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
            <param name="ioChans"></param>
            <param name="chanType"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOGroup.Initialize">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOGroup.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add a settings page to this class
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.CompWatchListPage">
            <summary>
            Class to manage watch window modifications
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompWatchListPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompWatchListPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompWatchListPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompWatchListPage.#ctor(MPT.USN.CommonLib.Comp.CompWatchList)">
            <summary>
            Constructor
            </summary>
            <param name="compWatchList"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompWatchListPage.OnPageLoad">
            <summary>
            Set up the visibility flag check
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ComponentMachinePage">
            <summary>
            Summary description for ComponentMachinePage.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ComponentMachinePage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMachinePage.#ctor(MPT.USN.CommonLib.Comp.CompMachine)">
            <summary>
            Constructor
            </summary>
            <param name="compMachine"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMachinePage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMachinePage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ComponentMachinePage.CanSafeDispose">
            <summary>
            Indicate whether this can safely disposed when run out of scene
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ComponentMachinePage.ShowIt">
            <summary>
            Show the page based on privilege
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPC.SPCSubGroupItem">
            <summary>
            Class for the subgroups 
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCSubGroupItem.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="subGroupSize"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCSubGroupItem.Add(MPT.USN.CommonLib.DBFieldItem)">
            <summary>
            Add an element to the array
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCSubGroupItem.SubgroupItem">
            <summary>
            Get the item number of the subgroup
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCSubGroupItem.Filled">
            <summary>
            Returns true if filled
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCSubGroupItem.Data">
            <summary>
            Get the SPCDataItem array
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCSubGroupItem.Values">
            <summary>
            Get the SPCDataItem array
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCSubGroupItem.SubGroupSize">
            <summary>
            Get the current number of subgroups
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPC.SPCSetupPage">
            <summary>
            SPC Setup Page
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCSetupPage.#ctor(MPT.USN.CommonLib.Comp.SPC.SPCData)">
            <summary>
            Primary constructor
            </summary>
            <param name="spcData"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCSetupPage.SelectChart">
            <summary>
            This is called from either the constructor or 
            combo box change of selection
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCSetupPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCSetupPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCSetupPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCSetupPage.TheSPCPage">
            <summary>
            Get the parent object
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPC.Histo">
            <summary>
            Class Histo constructs and maintians a Histogram of input data.
            Input data is sorted into bins and a count is kept of how many data
            points fell into each bin. For example if the bin boundaries are
            
              b0, b1, b2,...,bn-1
             
             The n-1 bins are the intervals
             
             [b0,b1), [b1,b2), [b2,b3),...[bn-2,bn-1]
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.Histo.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Constructs a Histogram with the specified number of bins and the 
            specified maximum and mininum values.
            </summary>
            <param name="numBins">The number of bins. Must be greated than zero</param>
            <param name="minValue">The maximum value for the Histogram.</param>
            <param name="maxValue">The minimum value for the Histogram.</param>
            <exception cref="T:System.ArgumentException">Thrown if the specified maximum
            and minimum values are the same. Or if the specified number of bins cannot
            be created.</exception>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.Histo.#ctor(System.Double[])">
            <summary>
            Create a Histogram with the specified bin boundaries.
            </summary>
            <param name="binBoundaries">Bin boundaries. Most be strictly
            monotonically increasing, i.e. <c>binBoundares[i]</c> is strictly
            less than <c>binBoundaries[i+1]</c> for each i.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.Histo.#ctor(System.Int32,System.Double[])">
            <summary>
            Construct a Histogram from the data in <c>data</c> with
            <c>numBins</c> bins. The bins are of eqaul size and scaled
            with the maximim and minimum data in <c>data</c>. The counts
            in the Histogram are initialized with the contents of <c>data</c>.
            </summary>
            <param name="numBins">Desired number of bins.</param>
            <param name="data">Vector of data to place in the Histogram.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.Histo.ToString">
            <summary>
            Formats the contents of the Histogram into a string.
            </summary>
            <remarks>If the bin boundaries are b0, b1, b2,...,bn-1, and the 
            counts for these bins are c1, c2,...,cn, respectively,
            then the this method returns a string with the following 
            format:
            Number Smaller:   number smaller
            [b0,b1)  :   c1
            [b1,b2)  :   c2
            [b2,b3)  :   c3
            .
            .
            .
            [bn-2,bn-1]: cn
            Number larger : number larger</remarks>
            <returns>Fomatted string.</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.Histo.StemLeaf">
            <summary>
            Formats the contents of the Histogram into a simple acsii stem-leaf
            diagram.
            </summary>
            <remarks>If the bin boundaries are b0, b1, b2,...,bn-1, and the 
            counts for these bins are c1, c2,...,cn, respectively,
            then the this method returns a string with the following 
            format:
            Number smaller:   ***number smaller
            [b0,b1):     *****c1
            [b1,b2):     **********c2
            [b2,b3):     ***************c3
            .
            .
            .
            [bn-2,bn-1]: *****cn
            Number larger : *****number larger.
            Where the number of '*'s is for a particular bin is equal to
            the count for that bin minus one.</remarks>
            <returns>Fomatted string.</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.Histo.Count(System.Int32)">
            <summary>
            Gets the count for the specifed bin.
            </summary>
            <param name="binNumber">Bin number to get the count for.
            <c>binNumber</c> must be between 0 and (number of bins - 1)</param>
            <returns>The count for the specified bin.</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.Histo.AddData(System.Double)">
            <summary>
            Updates the Histogram counts for the bin that the data
            point <c>d</c> falls into.
            </summary>
            <param name="d">The data point.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.Histo.AddData(System.Double[])">
            <summary>
            Updates the Histograms bin counts with the given data points.
            </summary>
            <param name="data">Data to update bin counts with.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.Histo.Reset">
            <summary>
            Resets all counts to zero. The number of bins and bin boundaries 
            stay the same.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.Histo.CalcBinBoundaries(System.Int32,System.Double,System.Double)">
            <summary>
            Given the minimum and maximum data values and the number of bins
            this method fills in the boundaries vector.
            </summary>
            <param name="numBins">The number of bins desired.</param>
            <param name="minValue">The lower bin boundary.</param>
            <param name="maxValue">The upper bin boundary.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.Histo.CheckBinBoundaries(System.Double[])">
            <summary>
            Verifies that the given vector contains a strictly monotonically
            increasing sequence of numbers.
            </summary>
            <param name="boundaries">The boundaries to check.</param>
            <exception cref="T:System.ArgumentException">Thrown if the vector is not
            strictly monotonically increasing.</exception>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.Histo.FloatFormat">
            <summary>
            Gets/sets the format string used to print the bin boundaries.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.Histo.BinBoundaries">
            <summary>
            Gets the bin boundaries of the Histogram.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.Histo.Counts">
            <summary>
            Gets the counts for each bin.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.Histo.NumBins">
            <summary>
            Gets the number of bins in the Histogram.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.Histo.NumSmaller">
            <summary>
            Gets the number of data points that were smaller
            than the smallest bin boundary.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.Histo.NumLarger">
            <summary>
            Gets the number of data points that were larger than
            the larges bin boundary.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ScanSystem.WeldPaternDataGridDisplay">
            <summary>
            Object for display weld spot pattern.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WeldPaternDataGridDisplay.#ctor(MPT.USN.CommonLib.Comp.WelderPattern.WeldPatternComponent,MPT.USN.CommonLib.Comp.PulseSystem.PulseLaser,MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner)">
            <summary>
            
            </summary>
            <param name="ptComp"></param>
            <param name="laser"></param>
            <param name="scanner"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WeldPaternDataGridDisplay.UpdateGridValue">
            <summary>
            Update Datagrid display
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.WeldPaternDataGridDisplay.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WeldPaternDataGridDisplay.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WeldPaternDataGridDisplay.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.ScanSystem.WeldPaternDataGridDisplay.evDatagridValueChange">
            <summary>
            Event for pattern value change when edit datagrid value
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ScanSystem.WeldPaternDataGridDisplay.DelegateDataGridValueChange">
            <summary>
            Delegate for pattern value change when edit datagrid value
            </summary>
            <param name="sender"></param>
            <param name="spotID"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ScanSystem.WelderSpotLayoutPage">
            <summary>
            Display Weldspot layout
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.WelderSpotLayoutPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WelderSpotLayoutPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WelderSpotLayoutPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WelderSpotLayoutPage.#ctor(MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WelderSpotLayoutPage.UpdateLayout">
            <summary>
            Update Layout weld spot.
            </summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.ScanSystem.WelderSpotLayoutPage.evSpotPositionChange">
            <summary>
            Spot position change event.
            </summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.ScanSystem.WelderSpotLayoutPage.evAddNewSpot">
            <summary>
            Add new spot event.
            </summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.ScanSystem.WelderSpotLayoutPage.evDeleteSpot">
            <summary>
            Delete spot event.
            </summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.ScanSystem.WelderSpotLayoutPage.evClearAllSpots">
            <summary>
            Clear all spots event.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.WelderSpotLayoutPage.StringColor">
            <summary>
            Set/Get string color
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.WelderSpotLayoutPage.SpotColor">
            <summary>
            Set/Get spot color.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ScanSystem.WelderSpotLayoutPage.DelegateSpotPosition">
            <summary>
            Delegate for update spot position.
            </summary>
            <param name="spotID"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ScanSystem.WelderSpotLayoutPage.DelegateAddNewSpot">
            <summary>
            Delegate for add new spot position.
            </summary>
            <param name="afterSpotID"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ScanSystem.WelderSpotLayoutPage.DelegateDelSpot">
            <summary>
            Delegate for delete spot position.
            </summary>
            <param name="deleteSpotID"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ScanSystem.WelderSpotLayoutPage.DelegateClearAllSpots">
            <summary>
            Delegate for clear all spots position.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Output.ResistanceOutput">
            <summary>
            Summary description for AnalogOutput.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.ResistanceOutput.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.ResistanceOutput.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.ResistanceOutput.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
            <param name="channelPrefix"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.ResistanceOutput.Initialize">
            <summary>
            Initialize this component
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.ResistanceOutput.SetOutput(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
            Write the output
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.Agilent4263BStub">
            <summary>
            Stubs for AgilentGpib
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.GpibDevice">
            <summary>
            Class to provide access to third-party Gpib Device.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.GpibDevice.diDeviceGpibAddress">
            <summary>
            device GPIB Address
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.GpibDevice.dsDeviceName">
            <summary>
            Device name
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.GpibDevice.ddReadTimeout">
            <summary>
            The read timeout
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.GpibDevice.diRetryCount">
            <summary>
            The retry count
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.GpibDevice.dsInitializeString">
            <summary>
            Initialize device by string
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.GpibDevice.dsDymanicParamString">
            <summary>
            Dynamic Param change during running.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.GpibDevice.dsReadValueString">
            <summary>
            Read data from device
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.GpibDevice.dsReadCommandString">
            <summary>
            read command
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.GpibDevice.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.GpibDevice.#ctor(System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.GpibDevice.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add a settings page to this class
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.GpibDevice.SetGpibCommand(MPT.USN.CommonLib.SMMethodCall,System.String)">
            <summary>
            Set Gpib Command to Device
            </summary>
            <param name="mc"></param>
            <param name="output"></param>
            <param name="message"></param>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.GpibDevice.evSetGpibCommand">
            <summary>
            event for set device parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.GpibDevice.Controller">
            <summary>
            Access to Controller
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.GpibDevice.ReadCommand">
            <summary>
            Access to read command
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.GpibDevice.InitializeString">
            <summary>
            Access to Initialize String;
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.GpibDevice.DynamicParamString">
            <summary>
            Acees to dynamic param string
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.GpibDevice.ReadValueString">
            <summary>
            Access to Read string
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.GpibDevice.DeviceGpibAddress">
            <summary>
            Access to device GPIB address
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.GpibDevice.DeviceName">
            <summary>
            Access to device name
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.GpibDevice.ReadTimeOut">
            <summary>
            Aceess to read time out
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.GpibDevice.RetryCount">
             <summary>
            Access to Retry count
             </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.GpibDevice.DelegateParmSMString">
            <summary>delegate for Param output</summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.Agilent4263BStub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.Agilent4263BStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.Agilent34401AStub">
            <summary>
            Stubs for AgilentGpib
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.Agilent34401AStub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.Agilent34401AStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.Agilent4294AStub">
            <summary>
            Stubs for AgilentGpib
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.Agilent4294AStub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.Agilent4294AStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.AgilentE5071CStub">
            <summary>
            Stubs for AgilentGpib
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.AgilentE5071CStub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.AgilentE5071CStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.Agilent4339BStub">
            <summary>
            Stubs for AgilentGpib
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.Agilent4339BStub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.Agilent4339BStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.AgilentE4980AStub">
            <summary>
            Stubs for AgilentGpib
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.AgilentE4980AStub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.AgilentE4980AStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IDSystem.IDSystem">
            <summary>
            Class for all laser components
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IDSystem.IDSystem.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IDSystem.IDSystem.#ctor(System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IDSystem.IDSystem.SetIdRead(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.IDSystem.ID,System.String,System.String)">
            <summary>
            Pass read command to ID Controller.
            </summary>
            <param name="mc"></param>
            <param name="id"></param>
            <param name="Addr"></param>
            <param name="Length"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IDSystem.IDSystem.SetSvIdRead(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.IDSystem.ID,System.String,System.String)">
            <summary>
            Pass service read command to ID Controller.
            </summary>
            <param name="mc"></param>
            <param name="id"></param>
            <param name="Addr"></param>
            <param name="Length"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IDSystem.IDSystem.SetIdWrite(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.IDSystem.ID,System.String,System.String)">
            <summary>
            Pass read command to ID Controller.
            </summary>
            <param name="mc"></param>
            <param name="id"></param>
            <param name="Addr"></param>
            <param name="Data"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IDSystem.IDSystem.GetIdDefault(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.IDSystem.ID)">
            <summary>
            Get default Read / Write ID Controller Address.
            </summary>
            <param name="mc"></param>
            <param name="id"></param>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.IDSystem.IDSystem.evGetIdDefault">
            <summary>DelegateDefautParm</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.IDSystem.IDSystem.evSetIdRead">
            <summary>DelegateParmSMIdStringRD</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.IDSystem.IDSystem.evSetIdWrite">
            <summary>DelegateParmSMIdStringWR</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.IDSystem.IDSystem.evSetSvIdRead">
            <summary>DelegateParmSMIdStringRD</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IDSystem.IDSystem.DelegateParm">
            <summary>Delegate for Com Port</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IDSystem.IDSystem.DelegateParmSMIdStringRW">
            <summary>Delegate for ID Read / Write</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.U">
            <summary>
            Static class for all utilities
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.NullDataValue">
            <summary>
            const to identify missing data in graphs
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.LOCKED">
            <summary>
            Locked text
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.WM_KEYDOWN">
            <summary>
            Key Down message index
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.WM_RBUTTONDOWN">
            <summary>
            Mouse R Button Down
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.WM_MOUSEMOVE">
            <summary>
            Mouse Move
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.WM_LBUTTONDOWN">
            <summary>
            Mouse L Button Down
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.WM_LBUTTONUP">
            <summary>
            Mouse L Button Up
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.MK_CONTROL">
            <summary>
            Control key down when click
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.MK_SHIFT">
            <summary>
            Shift key down when click
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.WM_CHAR">
            <summary>
            Char messageIndex
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.WM_PAINT">
            <summary>
            Paint messageIndex
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.Report">
            <summary>
            Report string
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.CrashCount">
            <summary>
            The number of times this app has crashed
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.CrashRecovery">
            <summary>
            This instance is recovering from a recent crash
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.U.IsDerivedFrom(System.Type,System.Type)">
            <summary>
            This returns true if the specified class is derived from a specified base class.
            </summary>
            <param name="t"></param>
            <param name="baseType"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.IsExponent(System.String,System.Int32)">
            <summary>
            Returns true if string is a numberwith Exponent
            </summary>
            <param name="sVal"></param>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.FireOnPrivilegesChanged(MPT.USN.CommonLib.Enums.UserPrivileges)">
            <summary>
            Fire to event when Privileges Changed
            </summary>
            <param name="userPrivileges"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.BeginThreadQuantum">
            <summary>
            Begin using the thread quantum value
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.U.SetThreadQuantum(System.Int32)">
            <summary>
            Set the thread quantum value
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.EndThreadQuantum">
            <summary>
            End using the thread Quantum Value
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.U.BeginThreadSleepResolution(System.UInt32)">
            <summary>
            Establish the thread sleep resolution
            </summary>
            <param name="milliseconds"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.EndThreadSleepResolution">
            <summary>
            close the thread sleep resolution
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.U.DelegateToSearchCriteria(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Used to filter for datatypes
            </summary>
            <param name="objMemberInfo"></param>
            <param name="objOnlySerializable"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetDataNameList(System.Type)">
            <summary>
            Get a list of public field names found in this class
            </summary>
            <param name="ty"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetDataNames(System.Type,System.Boolean,System.Int32@,System.String[]@)">
            <summary>
            Return the list of data names
            </summary>
            <param name="ty"></param>
            <param name="onlySerializable"></param>
            <param name="nTotal"></param>
            <param name="dataList"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.IsDataFieldSerializable(System.Reflection.FieldInfo)">
            <summary>
            Checks if DataType field is serializable
            </summary>
            <param name="fld"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.ToDouble(System.String)">
            <summary>
            Safe conversion to double (handles null or empty text string)
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.ToInt(System.String)">
            <summary>
            Safe conversion to int (handles null or empty text string)
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetTypesDerivedFrom(System.Type)">
            <summary>
            Returns array of all types derived from a particular base class
            </summary>
            <param name="baseClass"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetArrayIndex(System.Object[],System.Object)">
            <summary>
            Locate an element of an array and return its index
            </summary>
            <param name="objs"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.SaveBackup(System.String,System.Int32)">
            <summary>
            Make a backup of the file.
            Restrict the number of stored backups to the specified baks
            </summary>
            <remarks>The backups are stored in a directory with the same name as the filename without extension.
            <para/>
            The backups are stored using the following format: 'nnn_filename.ext'
            </remarks>
            <param name="filePath"></param>
            <param name="nMaxBaks"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetBackupFiles(System.String)">
            <summary>
            Obtain a list of all the backup files
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.SwapChildren(System.Object[],System.Object,System.Int32)">
            <summary>
            Switches the order of children in an array
            </summary>
            <param name="objs"></param>
            <param name="objChild"></param>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.RemoveArrayElement(System.Array,System.Type,System.Int32)">
            <summary>
            Removes an array element.  Array is compacted as a result
            </summary>
            <param name="array"></param>
            <param name="ty"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.AppendArrayElement(System.Array,System.Object)">
            <summary>
            Appends new element to end of array.  Array grows by one
            </summary>
            <param name="array"></param>
            <param name="newElement">New element object</param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.AppendArrayElement(System.Array,System.Type,System.Object)">
            <summary>
            Appends an array element to an array.  Array grows by one
            </summary>
            <param name="array"></param>
            <param name="ty">Needed in case new Element is null</param>
            <param name="newElement"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.SwapChildren(System.Object[],System.Int32,System.Int32)">
            <summary>
            Switch elements of an array
            </summary>
            <param name="objs"></param>
            <param name="nObj1"></param>
            <param name="nObj2"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.ThreadSnapshotAddCurrentThreadName">
            <summary>
            Add a new thread to the snapshot list
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.U.ThreadSnapshotAddCurrentThreadName(System.String)">
            <summary>
            Add a new thread to the snapshot list
            </summary>
            <param name="name">Name for this thread</param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.ThreadSnapshotBegin">
            <summary>
            Begin the snapshot
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.U.ThreadSnapshotEnd(System.String)">
            <summary>
            Report the snapshot thread usage
            </summary>
            <param name="tag"></param>
            <returns>The report string</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.ThreadSliceSleep(MPT.USN.CommonLib.SMMethodCall,System.String,System.Int32)">
            <summary>
            Causes thread to sleep the number of miliseconds
            </summary>
            <param name="mc"></param>
            <param name="name"></param>
            <param name="milisecondTimeout"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.ThreadSliceSleep(System.Int32)">
            <summary>
            Causes thread to sleep the number of miliseconds
            </summary>
            <param name="milisecondTimeout"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetTempPath">
            <summary>
            Return the temp directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.StripNextName(System.String,System.String@)">
            <summary>
            Strip off the first name
            </summary>
            <param name="path"></param>
            <param name="remainingPath">Returns the remainder path</param>
            <returns>The first name in path</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.MeasureString(System.String,System.Drawing.Font,System.IntPtr)">
            <summary> TODO
            
            </summary>
            <param name="text"></param>
            <param name="font"></param>
            <param name="hwnd"></param>
            <returns>SizeF</returns>
        </member>
        <member name="F:MPT.USN.CommonLib.U.Translations">
            <summary>
            List of third-party devices
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.Devices">
            <summary>
            List of third-party devices
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.U.Create(System.Type,System.String,System.String)">
             <summary>
             This is used to create components that interface with third-party drivers
             <para/>
             Check the referenced assemblies in the system for the existence of the preferred type.
             If we don't have the preferred type, create the generic base (stubbed) object instead.
             </summary>
             <param name="tGeneric">The system base class type. For example, 'VisionSystem' or 'MotionSystem'</param>
             <param name="strTypePreferred">The preferred third-party type</param>
             <param name="name">Name for the new component</param>
             <returns>The newly created (or existing) system component</returns>
             <remarks>
             This call is made in MainForm.DefineDefaultMachine.
             <para/>
             If the object to be created already exists, then the
             reference arg is reassigned to the existing.  
             If the object does not exist, then a new one is created
              <example>This example shows how to create a vision system component
             <code>
             protected override void DefineDefaultMachine(MPT.USN.CommonLib.Comp.CompMachine machineComp)
             {
                 VisionSystem visionSystem = U.Create(typeof(VisionSystem), "WebCamera", "VisionSystem") as VisionSystem;
                 visionSystem.Add(new Camera("WebCam"));
                 machineComp.Add(visionSystem);
             }
             </code>
             </example>
            </remarks>
        </member>
        <member name="F:MPT.USN.CommonLib.U.dbTrue">
            <summary>
            Static dbBool True
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.dbFalse">
            <summary>
            Static dbBool False
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.U.EnsureDirectory(System.String)">
            <summary>
            Ensure that directory exists
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.ReadFromFile(System.String,System.Type)">
            <summary>
            Deserializes and constructs from an Xml file
            </summary>
            <param name="filePath"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.SaveToFile(System.String,System.Object)">
            <summary>
            Saves the object and all it's decendents to an Xml file
            </summary>
            <param name="filePath"></param>
            <param name="obj"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.MCLClass(System.Type)">
            <summary>
            Returns true if class type is MCL 
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.U.BuildDbClassName(System.Type)">
            <summary>
            Build a table name for this class type
            </summary>
            <param name="ty"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetFieldInfoFromName(System.Type,System.String,System.Type@)">
            <summary>
            Get the class type from the field name
            </summary>
            <param name="tyBaseClass"></param>
            <param name="name"></param>
            <param name="tyClass"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetType(System.String)">
            <summary>
            Return the CommonLib Type
            </summary>
            <param name="tyFullName"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.Vfinal(System.Double,System.Double,System.Double)">
            <summary>
            Final Velocity
            </summary>
            <param name="Vinit"></param>
            <param name="Accel"></param>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.Displacement(System.Double,System.Double,System.Double)">
            <summary>
            Displacement based on velocity
            </summary>
            <param name="Vinit"></param>
            <param name="Vfinal"></param>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.Displacement(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Displacement based on Acceleration, velocity
            </summary>
            <param name="Dinit"></param>
            <param name="Vinit"></param>
            <param name="Accel"></param>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.VfinalSqr(System.Double,System.Double,System.Double)">
            <summary>
            Final velocity squared
            </summary>
            <param name="Vinit"></param>
            <param name="Accel"></param>
            <param name="Displacement"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.RampVelocity(System.Double,System.Double,System.Double)">
            <summary>
            ramp velocity to final vel with const accel (can be used with decel)
            </summary>
            <param name="Vfinal"></param>
            <param name="Accel"></param>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.dtConstV(System.Double,System.Double)">
            <summary>
            Get change in time with distance at a constant velocity
            </summary>
            <param name="Displacement"></param>
            <param name="Vconst"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.dtConstAccel(System.Double,System.Double)">
            <summary>
            Get acceleration
            </summary>
            <param name="Displacement"></param>
            <param name="Vmax"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.ThetaDiff(System.Double,System.Double)">
            <summary>
            Compute the difference betwee two angles
            </summary>
            <param name="theta1">Radians</param>
            <param name="theta2">Radians</param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.ConvertFromInternal(MPT.USN.CommonLib.Enums.UnitTypes,System.Double)">
            <summary>
            Converts the value to proper units
            </summary>
            <param name="ut"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.ConvertToInternal(MPT.USN.CommonLib.Enums.UnitTypes,System.Double)">
            <summary>
            Converts the value to proper units
            </summary>
            <param name="ut"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetUnitString(MPT.USN.CommonLib.Enums.UnitTypes,MPT.USN.CommonLib.Enums.RateType,MPT.USN.CommonLib.Enums.UnitTypes)">
            <summary>
            Return the unit string
            </summary>
            <param name="UnitType"></param>
            <param name="RateType"></param>
            <param name="UnitTypeRespect"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.ParseUnitString(System.String,MPT.USN.CommonLib.Enums.UnitTypes@,MPT.USN.CommonLib.Enums.RateType@,MPT.USN.CommonLib.Enums.UnitTypes@)">
            <summary>
            Convert a double value from internal unit to specified unit
            </summary>
            <param name="strUnit"></param>
            <param name="UnitType"></param>
            <param name="RateType"></param>
            <param name="UnitTypeRespect"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.CreateDataObject(System.String,System.String)">
            <summary>
            Create a data object with the supplied initial value
            </summary>
            <param name="name"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.CreateDataObject(System.String,System.String,MPT.USN.CommonLib.Data.DataType,System.Object)">
            <summary>
            Create a data object with the supplied initial value
            </summary>
            <param name="name"></param>
            <param name="valueType"></param>
            <param name="similarTo"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.NonAutoUnitType(MPT.USN.CommonLib.Enums.UnitTypes)">
            <summary>
            Position units
            </summary>
            <remarks>This will return a true unit type (no Auto)</remarks>
            <param name="unitType"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.ConvertDoubleFromInternal(System.Double,System.String)">
            <summary>
            Convert a double from internal units to supplied units
            </summary>
            <param name="val"></param>
            <param name="strUnit"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetSecondsFromStartCount(System.Int64)">
            <summary>
            Return seconds given the start count
            </summary>
            <param name="startCount"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetSecondsFromCounts(System.Int64)">
            <summary>
            Return seconds given the counts
            </summary>
            <param name="counts"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetImage(System.String)">
            <summary>
            Return the image resource
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.CloneControl(System.Windows.Forms.Control)">
            <summary>
            Clone a control and all its children
            </summary>
            <param name="o"></param>
            <remarks>It is important to re-define the Name, Text, Location, and TabIndex to 
            insure uniquness</remarks>
            <returns>The cloned control</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetClassAndDataNames(System.String,System.String@,System.String@,System.String@)">
            <summary>
            Given the classDataName, return the className, shortClassName, and dataName
            </summary>
            <param name="classDataName"></param>
            <param name="className"></param>
            <param name="shortClassName"></param>
            <param name="dataName"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetSuspensionProductList">
            <summary>
            Get a list of all the products
            </summary>
            <remarks>We look at the folders under CommonLib\product\Suspensions</remarks>
            <returns>String array of all products</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetSuspensionProductName">
            <summary>
            Get the currently chosen product
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.MakeLong(System.Int32,System.Int32)">
            <summary>
            Pack two 32 bit ints into a 64 bit long
            </summary>
            <param name="lowPart"></param>
            <param name="hghPart"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.LoInt(System.Int64)">
            <summary>
            Return the low 32 bit value of a 64 bit long
            </summary>
            <param name="lVal"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.NextRandomGausian(System.Double,System.Double,System.Int32)">
            <summary>
            Return the next random Gausian
            </summary>
            <param name="center"></param>
            <param name="tolerance"></param>
            <param name="randomArrayPos"></param>
            <returns></returns>
        </member>
        <member name="F:MPT.USN.CommonLib.U._randomArr">
            <summary>
            Gausian number array
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.U.NewPageReference(System.Windows.Forms.Control,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="control"></param>
            <param name="objOld"></param>
            <param name="objNew"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.UpdatePages(System.Windows.Forms.Control,System.String,System.String)">
            <summary>
            Call to update pages in each of the page base components.
            Override UpdatePage in PageBase controls to handle call.
            Pass null for control to start recurse at MainFrm.
            </summary>
            <param name="control"></param>
            <param name="tag1"></param>
            <param name="tag2"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.CalcUPH(MPT.USN.CommonLib.MPTBase,MPT.USN.CommonLib.MPTBase)">
            <summary>
            Calculate the UPH for this component
            </summary>
            <param name="masterClock"></param>
            <param name="compClock"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.ProcessAlert(System.String)">
            <summary>
            Append message to alert form with log
            </summary>
            <param name="msgText"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.ProcessAlertNoLog(System.String)">
            <summary>
            Append message to alert form without log
            </summary>
            <param name="msgText"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.ProcessAlert(MPT.USN.CommonLib.AlertItem)">
            <summary>
            Append message to alert form
            </summary>
            <param name="fa"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.ProcessAlertNoLog(MPT.USN.CommonLib.AlertItem)">
            <summary>
            Append message to alert form
            </summary>
            <param name="fa"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.U.debugStartTick">
            <summary>
            public acess to start tick
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.U.DebugEvent(System.String)">
            <summary>
            Append message to Event queue
            </summary>
            <param name="msgText"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.LogUsageStart(System.String)">
            <summary>
            Add start time to usage log
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.LogUsageStop(System.String)">
            <summary>
            Add stop time to usage log
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.HiDefTickToSec(System.Int64)">
            <summary>
            Get the number of miliseconds given the tick duration
            </summary>
            <param name="tickDuration"></param>
            <returns>Number of seconds</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.HiDefSecToTick(System.Double)">
            <summary>
            Get the number of ticks given the miliseconds
            </summary>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="F:MPT.USN.CommonLib.U.ProcessUsageStartTick">
            <summary>Starting timestamp for usage dump</summary>
        </member>
        <member name="M:MPT.USN.CommonLib.U.ProcessUsageAddIndependentItem(System.String,System.String)">
            <summary>
            Add an independent thread item
            </summary>
            <param name="name"></param>
            <param name="origination"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.ProcessUsageStart">
            <summary>
            Begin usage dump
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.U.OnProcessUsageStop">
            <summary>
            End the usage dump
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.IndependentThreadItemList">
            <summary>
            List of independant (of State machine) thread activity
            </summary>      
        </member>
        <member name="M:MPT.USN.CommonLib.U.CustomLog(System.String,System.String)">
            <summary>
            Append message to Event queue
            </summary>
            <param name="filename"></param>
            <param name="msgText"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetLogDirectory">
            <summary>
            Get the full qualified log file name
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetLogFileName">
            <summary>
            Get the full qualified log file name
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.MakeLogString(System.Int32,System.DateTime,MPT.USN.CommonLib.U.LogSeverity,System.String,System.String)">
            <summary>
            Make standard log string
            </summary>
            <param name="threadId"></param>
            <param name="dateTime"></param>
            <param name="severity"></param>
            <param name="procedureName"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.MakeLogDumpFolder(System.DateTime,MPT.USN.CommonLib.U.LogSeverity,System.String,System.String)">
            <summary>
            Make a log dump folder
            </summary>
            <param name="dateTime"></param>
            <param name="severity"></param>
            <param name="procedureName"></param>
            <param name="prefix"></param>
            <returns>The full path to the folder</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.WriteLog(MPT.USN.CommonLib.U.LogSeverity,System.String,System.String)">
            <summary>
            Write an entry to the log file
            </summary>
            <param name="severity">The type of log submitted ordered by importance</param>
            <param name="procedureName">Description of the entry or source of problem</param>
            <param name="text">The actual msg to log</param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.WriteLog(MPT.USN.CommonLib.U.LogSeverity,System.String,System.String,MPT.USN.CommonLib.U.LogOptions)">
            <summary>
            Write an entry to the log file 
            </summary>
            <param name="severity">The type of log submitted ordered by importance</param>
            <param name="procedureName">Description of the entry or source of problem</param>
            <param name="text">The actual msg to log</param>
            <param name="logOptions">OR all the options desired</param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.WriteLog(MPT.USN.CommonLib.U.LogSeverity,System.String,System.String,MPT.USN.CommonLib.U.LogOptions,System.String[])">
            <summary>
            Write a log with custom dump files
            </summary>
            <remarks>
            Custom dump files are assembled into a string array.
            </remarks>
            <example>This code shows how write a log and send attachments to Email notifiers
            <code>
               U.WriteLog(U.LogSeverity.Error, "Testing", "Dump Log File",
                          U.LogAttachment.ScreenShot | U.LogAttachment.ProcessDump,
                          new string[] { @"C:\MPT\USN\SPLBackEnd\SA Adjust\ScanLines.xls"} );
            </code>
            </example>
            <param name="severity">The type of log submitted ordered by importance</param>
            <param name="procedureName">Description of the entry or source of problem</param>
            <param name="text">The actual msg to log</param>
            <param name="logOptions">OR all the options desired</param>
            <param name="customFileDumps">Array of filepaths to be dumped as well.</param>
        </member>
        <member name="F:MPT.USN.CommonLib.U.killLogThread">
            <summary>
            Flag to kill the log thread
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetDetailedMCInfo">
            <summary>
            Get the PC information (placed in the email body)
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.WriteLogFormat(MPT.USN.CommonLib.U.LogSeverity,System.String,System.String,System.Object[])">
            <summary>
            Write a log with formating enable
            </summary>
            <param name="severity"></param>
            <param name="procedureName"></param>
            <param name="text"></param>
            <param name="args"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.Mean(System.Double[])">
            <summary>
            Take the average of a double array
            </summary>
            <param name="X"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.ExpandFilePath(System.String,MPT.USN.CommonLib.MPTBase)">
            <summary>
            Expand any arguments contained in the string
            Also ensure that directory exists
            </summary>
            <param name="fmt"></param>
            <param name="mptBase"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.ExandArgs(System.String,MPT.USN.CommonLib.MPTBase)">
            <summary>
            Expand any arguments contained in the string
            </summary>
            <param name="fmt"></param>
            <param name="mptBase"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetTextBlock(System.String@,MPT.USN.CommonLib.MPTBase)">
            <summary>Get the next block of texty</summary>
            <param name="rawText">the incoming text, and the ouotgoing remains</param>
            <param name="mptBase"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.IsOfUnitType(MPT.USN.CommonLib.Enums.UnitTypes,MPT.USN.CommonLib.Enums.UnitTypes)">
            <summary>
            Returns true if the unittype
            </summary>
            <param name="unitTestType">The unit we are testing</param>
            <param name="unitBaseType">The unit base type</param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.InitUnitMenu(System.Windows.Forms.ContextMenu,MPT.USN.CommonLib.Enums.UnitTypes,MPT.USN.CommonLib.Enums.RateType,MPT.USN.CommonLib.Enums.UnitTypes,System.EventHandler)">
            <summary>
            Fill the context menu with unit choices
            </summary>
            <param name="unitTypeMenu"></param>
            <param name="origUnitType"></param>
            <param name="origRateType"></param>
            <param name="origUnitTypeRespect"></param>
            <param name="OnClick"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetNextTag(System.String@,MPT.USN.CommonLib.MPTBase)">
            <summary>
              Processes the tag 
            </summary>
            <remarks>
            Date formats:
            d :08/17/2000
            D :Thursday, August 17, 2000
            f :Thursday, August 17, 2000 16:32
            F :Thursday, August 17, 2000 16:32:32
            g :08/17/2000 16:32
            G :08/17/2000 16:32:32
            m :August 17
            r :Thu, 17 Aug 2000 23:32:32 GMT
            s :2000-08-17T16:32:32
            t :16:32
            T :16:32:32
            u :2000-08-17 23:32:32Z
            U :Thursday, August 17, 2000 23:32:32
            y :August, 2000
            dddd, MMMM dd yyyy :Thursday, August 17 2000
            ddd, MMM d "'"yy :Thu, Aug 17 '00
            dddd, MMMM dd :Thursday, August 17
            M/yy :8/00
            dd-MM-yy :17-08-00
            </remarks>
            <param name="fmt"></param>
            <param name="mptBase"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.CheckDefinition(System.String@,System.String[])">
            <summary>
            Replace the value with the definition
            </summary>
            <param name="value"></param>
            <param name="definitions"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.EnsureMainGuiThread">
            <summary>
            Make sure current thread is main gui thread
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.U.IsEven(System.Int32)">
            <summary>
            Check int to see if it is an even number
            </summary>
            <param name="N"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.ValidDivisor(System.Double)">
            <summary>
            Returns true if double value can be divisor (not equal to zero)
            </summary>
            <param name="dVal"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.ShowEnablePages(System.Windows.Forms.Control)">
            <summary>
            Recursively updates all pages
            </summary>
            <param name="parentControl"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.IsEqual(System.Double,System.Double)">
            <summary>
            Compare two doubles for equality
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.IsEqual(System.Single,System.Single)">
            <summary>
            Compare two floats for equality
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetFileHash(System.String)">
            <summary>
            Get hash number for file
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.IsHashEqual(System.Byte[],System.Byte[])">
            <summary>
            Compare two file hash numbers for equality (could be any byte array)
            </summary>
            <param name="hash1"></param>
            <param name="hash2"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.RegisterNativeData(System.Windows.Forms.Control,System.Object,System.String)">
            <summary>
            Register the native data (double, int, etc)
            </summary>
            <param name="control"></param>
            <param name="classObj"></param>
            <param name="dataName"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.RegisterReferencedControl(System.Object,System.String,MPT.USN.CommonLib.MPTControls.MPTControl)">
            <summary>
            Register the datatype with the control
            </summary>
            <param name="classOwner"></param>
            <param name="fieldName"></param>
            <param name="control"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.SetupRadioButton(System.Windows.Forms.RadioButton,System.Object,System.Object)">
            <summary>
            Initialize a radio button and setup the tag value
            </summary>
            <param name="rb"></param>
            <param name="currentValue"></param>
            <param name="tagValue"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.U.helpForm">
            <summary>
            Help form window
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.U.ViewHelp(System.Object)">
            <summary>
            Call up the help window
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.EditFile(System.String,System.String)">
            <summary>
            Edit a file given using the given application
            </summary>
            <param name="processName"></param>
            <param name="filePath"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.CreateCustomHelp(System.String)">
            <summary>
            Create a custom help file
            </summary>
            <param name="htmFilePath"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.CreateHelp(System.Windows.Forms.Control)">
            <summary>
            Call up the help window
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.CreateScreenShot(System.Windows.Forms.Control,System.String)">
            <summary>
            Generate a jpg file of the control
            </summary>
            <param name="control"></param>
            <param name="screenShotFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetHelpName(System.Windows.Forms.Control)">
            <summary>
            Get the help name from the control
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetMPTTypeFromControl(System.Windows.Forms.Control)">
            <summary>
            explore base classes for the MPT class name
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetDeviceName(System.Type)">
            <summary>
            Return the device name from the full class name
            </summary>
            <param name="ty"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetHelpBasePath(System.Windows.Forms.Control)">
            <summary>
            Get the base path for the help files
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.ParseVersion(System.String)">
            <summary>
            Parse the version number to make it more readable
            1.12.04pp.tbbb
            Where:
            p-Patch number
            b-build number
            t-Type (blank-Official, 0-candidate, 1-Interim, 2-other)
            </summary>
            <remarks>For example:  
            
            Literal Rev         Readable Rev (as seen by user)   
            --------------      -------------------------------------------------
            1.12.0401           Ver 1.12.04 Patch 1 (Official)
            1.12.0401.0002      Ver 1.12.04 Patch 1 (Candidate 2)
            1.12.0401.0001      Ver 1.12.04 Patch 1 (Candidate 1)
            1.12.0401.1002      Ver 1.12.04 Patch 1 (Interim 2)
            1.12.0401.1001      Ver 1.12.04 Patch 1 (Interim 1)           
             
            1.12.04             Ver 1.12.04 (Official)
            1.12.04.0002        Ver 1.12.04 (Candidate 2)
            1.12.04.0001        Ver 1.12.04 (Candidate 1)
            1.12.04.1002        Ver 1.12.04 (Interim 2)                       
            1.12.04.1001        Ver 1.12.04 (Interim 1) 
            </remarks>
            <param name="ver"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetAssemblyVersion(System.Reflection.Assembly)">
            <summary>
            Get the assembly version
            </summary>
            <param name="assy"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetHelpFilePath(System.Windows.Forms.Control)">
            <summary>
            Parses the control class name and returns a filepath
            </summary>
            <param name="control"></param>
            <returns>the htm help file path</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.HelpFileExists(System.Windows.Forms.Control)">
            <summary>
            Returns true if the help file exists
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.SetDumpCheck">
            <summary>
            Flag to check folders for sending emails
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetEmailRecipients(MPT.USN.CommonLib.U.LogSeverity,System.String)">
            <summary>
            Return a list of the Email recipients that request 
            notification for this severity
            </summary>
            <param name="logSeverity"></param>
            <param name="procedureName">Null if we exclude all custom severity registrants</param>
            <returns>List of recipient Ids</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetNotifierFromId(System.String)">
            <summary>
            Get the notifier EMail address from the id
            </summary>
            <param name="recipientId"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.SendEmails">
            <summary>
            Send EMails to those requesting notification
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.U.EmailZipAttachments(System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.String)">
            <summary>
            Zip attachements in 'Working' folder and send Emaiuls to all recipients
            </summary>
            <param name="dumpFolder"></param>
            <param name="sendToRecipients"></param>
            <param name="subject"></param>
            <param name="subSubject"></param>
            <param name="msg"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetStandardDeviation(System.Collections.ICollection)">
            <summary>
            Get population STDEV of an ICollection of double
            </summary>
            <param name="doubleCollection"></param>
            <returns>STDEV of the population</returns>
            <remarks>Exception will be thrown if the collection does not contain valid double numbers</remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetStandardDeviation(System.Collections.ICollection,System.Boolean)">
            <summary>
            Get population STDEV of an ICollection of double after remove min and max (5 elements up)
            </summary>
            <param name="doubleCollection"></param>
            <param name="removeMinMax"></param>
            <returns>STDEV of the population after remove min max (5 elements up)</returns>
            <remarks>Exception will be thrown if the collection does not contain valid double numbers</remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetMean(System.Collections.ICollection)">
            <summary>
            Get mean of an ICollection of double
            </summary>
            <param name="doubleCollection"></param>
            <returns>Mean of the population</returns>
            <remarks>Exception will be thrown if the collection does not contain valid double numbers</remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetMean(System.Collections.ICollection,System.Boolean)">
            <summary>
            Get mean of an ICollection of double after remove min and max (5 elements up)
            </summary>
            <param name="doubleCollection"></param>
            <param name="removeMinMax"></param>
            <returns>Mean the population after remove min max (5 elements up)</returns>
            <remarks>Exception will be thrown if the collection does not contain valid double numbers</remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.U.TrimMinMax(System.Collections.ICollection)">
            <summary>
            Trim MinMax from a double Collection. Original collection will be copied if the number of elements is less than 5.
            </summary>
            <param name="doubleCollection"></param>
            <returns>List of double without min and max</returns>
            <remarks>Exception will be thrown if the collection does not contain valid double numbers</remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.U.SafeDivide(System.Double,System.Double)">
            <summary>
            Safe divide 2 double
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetControlDisplayName(System.Windows.Forms.Control)">
            <summary>
            Get full qualified name of a control for logging, messaging, etc ...
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetParentPageBase(System.Windows.Forms.Control)">
            <summary>
            Get parent PageBase
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.IsDBType(System.Type)">
            <summary>
            Checks if is a dbClass type 
            </summary>
            <param name="tyClass"></param>
            <returns>True if either derived from or contains the IDBClass interface</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MPT.USN.CommonLib.U.PutIDBClassField(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.DbClassItem,System.Reflection.FieldInfo,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:MPT.USN.CommonLib.U.PutIDBClass(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.DbClassItem,System.Object,System.String,System.Int32,System.Boolean)" -->
        <member name="M:MPT.USN.CommonLib.U.EnsureFileIsWritable(System.String)">
            <summary>
            Ensure a file is writable
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetMultiLingual(System.Enum,System.Object[])">
            <summary>
            Get the enum val
            </summary>
            <param name="eVal"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetMultiLingual(System.String@,System.Object[])">
            <summary>
            Get the enum val
            </summary>
            <param name="sVal"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.AnsiOnly(System.String)">
            <summary>
            Strip out non-ansi text
            </summary>
            <param name="multiLingualText"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetBestObjectValue(System.Object)">
            <summary>
            Get best string which can represent the value of an object for logging, messageing, etc ...
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.U.GetPersistentDynamicData(MPT.USN.CommonLib.Data.MCLData,System.String)">
            <summary>
            Get a dynamic persistent mcldata if existed, otherwise try to create new.
            </summary>
            <param name="mclData"></param>
            <param name="dataName"></param>
            <returns></returns>
            <remarks>In order to be able to create new, the MPTBase object that own mclData need to declare a place holder with same name structor. For example, we already have a place holder as:
            public DataDouble ddPatternCount = new DataDouble("AllPatterns.Pattern[].Count", 0);
            then we can create new data by passing the following name:
            "AllPatterns.Pattern[0].Count"
            </remarks>
        </member>
        <member name="P:MPT.USN.CommonLib.U.DataMgr">
            <summary>
            Easy access to data manager
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.U.CompMgr">
            <summary>
            Get the CompMgr
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.U.ProcMgr">
            <summary>
            Get the ProcMgr
            </summary>
        </member>
        <member name="E:MPT.USN.CommonLib.U.OnPrivilegesChanged">
            <summary>
            On change to Global Units
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.U.ProductionMode">
            <summary>
            Flag to indicate if we want production mode
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.U.MS_LOCK_WAIT">
            <summary>
            Timeout for thread lock waiting
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.U.SuspendGuiUpdate">
            <summary>
            Flag to indicate that all GUI updating is to be supressed
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.U.MachineType">
            <summary>
            Get the machine type
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.U.MachineSerialNumber">
            <summary>
            Get the machine SerialNumber
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.U.DBRecEnable">
            <summary>
            Get the DBRecEnable
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.U.DBFilename">
            <summary>
            Get the DBFilename
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.U.DBDataSource">
            <summary>
            Get the DBDataSource
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.U.NextDbInstance">
            <summary>
            Get the next dbinstance
            </summary>
            <remarks>Gauranteed to be unique.
            Least count is 0.3333 milliseconds</remarks>
        </member>
        <member name="P:MPT.USN.CommonLib.U.HiDefTick">
            <summary>
            Returns the current high definition tick count value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.U.HiDefTicksPerSecond">
            <summary>
            Returns the current high definition ticks per second
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.U.ProcessUsageActive">
            <summary>Flag to indicate usage dump in progress</summary>
        </member>
        <member name="P:MPT.USN.CommonLib.U.ProcessUsageTimeStamp">
            <summary>
            Return the usage time stamp.  It is relative to the starting point
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.U.IsGUIThread">
            <summary>
            Returns true if the current thread is the main WIndows (GUI) thread.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MPT.USN.CommonLib.U.DelegateParmUserPrivileges">
            <summary>General purpose void delegate/// </summary>
            <param name="userPrivileges"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.U.LogSeverity">
            <summary>
            Severity for log
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.LogSeverity.Debug">
            <summary>
            Lowest severity, for debugging
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.LogSeverity.Info">
            <summary>
            Info
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.LogSeverity.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.LogSeverity.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.LogSeverity.Fatal">
            <summary>
            Highest severity, Fatal
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.U.LogOptions">
            <summary>
            What to attach to Email notifier
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.LogOptions.None">
            <summary>No Options</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.LogOptions.DumpScreenShot">
            <summary>Screen Shot</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.LogOptions.DumpProcess">
            <summary>ProcessDump</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.LogOptions.DumpMachineXml">
            <summary>Dump of MachineXml file</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.LogOptions.DumpAll">
            <summary>Dump all</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.LogOptions.Pause">
            <summary>Pause the state machines</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.LogOptions.Stop">
            <summary>Stop the state machines</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.LogOptions.Continue">
            <summary>Continue the state machine</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.LogOptions.PauseAction">
            <summary>Pause the action statement</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.LogOptions.StateAll">
            <summary>All State machine choices</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.LogOptions.Alert">
            <summary>Send to the alert window</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.LogOptions.Popup">
            <summary>Send to Popup (messageBox)</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.U.LogOptions.ViewAll">
            <summary>All Viewing options</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.U.RandomDataGenerator">
            <summary>
            Class for random data generation
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.U.RandomDataGenerator.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="mean"></param>
            <param name="std"></param>
            <param name="seed"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.U.RandomDataGenerator.GetNext">
            <summary>
            Get the random data
            </summary>
            <returns></returns>
        </member>
        <member name="T:MPT.USN.CommonLib.Help.HelpPanel">
            <summary>
            Control to contain the help web pages
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Help.HelpPanel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Help.HelpPanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Help.HelpPanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Help.HelpPanel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Help.HelpPanel.NewUrl(System.Object)">
            <summary>
            New help context address
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Process.RenameProcess">
            <summary>
            Class to rename the process
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.RenameProcess.#ctor(MPT.USN.CommonLib.Process.ProcessBase)">
            <summary>
            Constructor
            </summary>
            <param name="proc"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.RenameProcess.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.RenameProcess.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.RenameProcess.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.RenameProcess.NewName">
            <summary>
            Get the new name
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Process.OriginationSel">
            <summary>
            Form to select the products that use this node
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.OriginationSel.#ctor(MPT.USN.CommonLib.Process.ProcessNode)">
            <summary>
            Contructor
            </summary>
            <param name="pNode"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.OriginationSel.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.OriginationSel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.OriginationSel.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.Validations.ValidateMinMaxWithMarginPage">
            <summary>
            Page for Validate Min/Max
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.Validations.ValidateMinMaxWithMarginPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidateMinMaxWithMarginPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidateMinMaxWithMarginPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidateMinMaxWithMarginPage.#ctor(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Constructor
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidateMinMaxWithMarginPage.OnRefresh">
            <summary>
            Refresh due to changes in Dt
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrderPage">
            <summary>
            Class for Robust definitions
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrderPage._graph">
            <summary>
            local access to graph object
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrderPage.#ctor">
            <summary>
            Default Constructor for designer view
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrderPage.#ctor(MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrder)">
            <summary>
            Constructor for ThirdOrder property page
            </summary>
            <param name="thirdOrder"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrderPage.OnRefresh">
            <summary>
            Used to notify this page of an update required
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrderPage.OnPageLoad">
            <summary>
            Set up for the first time with valid window handle and parental windows established
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrderPage.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrderPage.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrderPage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrderPage.GetGraph">
            <summary>
            Public access to graph object
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TransferFunctions.SegmentApproximationPage">
            <summary>
            Class for SegmentApproximation GUI
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.SegmentApproximationPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentApproximationPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentApproximationPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.SegmentApproximationPage._graph">
            <summary>
            The graph
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentApproximationPage.#ctor(MPT.USN.CommonLib.Data.TransferFunctions.SegmentApproximation)">
            <summary>
            Construct with a SegmentApproximation
            </summary>
            <param name="segmentApprox"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentApproximationPage.OnRefresh">
            <summary>
            Used to notify this page of an update required
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentApproximationPage.OnPageLoad">
            <summary>
            Set up for the first time with valid window handle and parental windows established
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.SegmentApproximationPage.GetGraph">
            <summary>
            Get the graph
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TransferFunctions.MultipleLinearRegression">
            <summary>
            Class to handle multiple linear regression, which polyorder
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.MultipleLinearRegression._numInputs">
            <summary>
            Number of inputs
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.MultipleLinearRegression._polyOrder">
            <summary>
            Poly Order
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.MultipleLinearRegression._numCoeffs">
            <summary>
            Number of Coefficients
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.MultipleLinearRegression._dataTable">
            <summary>
            The table which contain raw data for regression
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.MultipleLinearRegression._parameters">
            <summary>
            List of output parameter after regression (the output coefficients)
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.MultipleLinearRegression.#ctor(System.Int32,System.Int32,System.Data.DataTable)">
            <summary>
            Constructor
            </summary>
            <param name="numInputs">Number of inputs</param>
            <param name="polyOrder">Poly Order</param>
            <param name="dataTable">The table contains data. First column is for dependent variable.
            Rest columns are for independent variables</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.MultipleLinearRegression.Compute">
            <summary>
            Compute the regression. Parameters will be available after compute.
            </summary>
            <remarks>Exceptions, if occured, will be thrown</remarks>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.MultipleLinearRegression.Parameters">
            <summary>
            Get the list of parameter (the return coeffs)
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TransferFunctions.NRMultipleLinearRegression">
            <summary>
            Multiple Linear Regression using Numerical Recipes library
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.NRMultipleLinearRegression._evaluationFunction">
            <summary>
            delegate to support function for NR least squares fit routine
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.NRMultipleLinearRegression._arrayOfIndependentVariables">
            <summary>
            Array of independent variables (the inputs)
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.NRMultipleLinearRegression._arrayOfDependentVariable">
            <summary>
            Array of dependent variable (the response)
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NRMultipleLinearRegression.#ctor(System.Int32,System.Int32,System.Data.DataTable)">
            <summary>
            Constructor
            </summary>
            <param name="numInputs">Number of inputs</param>
            <param name="polyOrder">Poly Order</param>
            <param name="dataTable">The table contains data. First column is for dependent variable.
            Rest columns are for independent variables</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NRMultipleLinearRegression.Compute">
            <summary>
            Compute the regression. Parameters will be available after compute.
            </summary>
            <remarks>Exceptions, if occured, will be thrown</remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.NRMultipleLinearRegression.EvalNOrder(System.Int32)">
            <summary>
            actual fit equation evaluator
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TransferFunctions.LinearYBin">
            <summary>
            Class to define linear least squares fit transfer function
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.LinearYBin.#ctor">
            <summary>
            default Constructor - must call Initialize after setting public properties
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.LinearYBin.#ctor(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Use when not serializing but using all other defaults
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.LinearYBin.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructor for external control but no DataType available yet
            </summary>
            <param name="buffTitle"></param>
            <param name="inputs"></param>
            <param name="polyorder"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.LinearYBin.#ctor(System.String,System.Int32,System.Int32,MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Constructor for external control of path and poly order (ma)
            </summary>
            <param name="buffTitle"></param>
            <param name="inputs"></param>
            <param name="polyorder"></param>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.LinearYBin.Update(System.Object,System.Object[])">
            <summary>
            Update transfer function characteristics
            </summary>
            <param name="response"></param>
            <param name="inputs"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.LinearYBin.Name">
            <summary>
            Name of TransferFunction class
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TransferFunctions.InputSelForm">
            <summary>
            Form to manage Transfer Function definitions
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.InputSelForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.InputSelForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.InputSelForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.InputSelForm.#ctor(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.InputSelForm.Dirty">
            <summary>
            Flag to indicate the form data has changed
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.InputSelForm.DataMgr">
            <summary>
            Easy access to data manager
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.InputSelForm.CurrentInput">
            <summary>
            Access to the DataType Object for the selected input
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.InputSelForm.CurrentInputName">
            <summary>
            Current Input Name
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.InputSelForm.inputBinsArrayList">
            <summary>
            Access to the Arraylist for the current data input bins
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TransferFunctions.InputDoubleForm">
            <summary>
            Setup form for Transferfunction inputs and binning
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.InputDoubleForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.InputDoubleForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.InputDoubleForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.InputDoubleForm.tfInput">
            <summary>
            local copy of inputs while editing.  If changes are made it is copied to the global TFInput object
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.InputDoubleForm.#ctor">
            <summary>
            constructor for xml serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.InputDoubleForm.#ctor(MPT.USN.CommonLib.Data.TFInput)">
            <summary>
            constructor for new objects
            </summary>
            <param name="_tfInput"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.InputDoubleForm.ValidateInputValue">
            <summary>
            Check for valid bin boundries
            </summary>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.InputDoubleForm.LBTFBins">
            <summary>
            Transfer function bin boundries
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.InputDoubleForm.InputBinLabel">
            <summary>
            Label property for setting GUI text over input bin edit
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.InputDoubleForm.MinimumInputBoundry">
            <summary>
            Use for setup of bin boundry limits
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.InputDoubleForm.MaximumInputBoundry">
            <summary>
            Use for setup of bin boundry limits
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.InputDoubleForm.InputBinBoundry">
            <summary>
            Use to get of bin boundry value
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.GeneralPage">
            <summary>
            Class to hold general properties
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.GeneralPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.GeneralPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.GeneralPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.GeneralPage.#ctor(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Constructor
            </summary>
            <param name="dt"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.DataLong">
            <summary>
            Summary description for DataLong.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataLong.GetVal(MPT.USN.CommonLib.Enums.UnitTypes)">
            <summary>
            Return the value as an Object
            </summary>
            <param name="ut"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataLong.#ctor">
            <summary>
            Constructor for Xml serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataLong.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataLong.#ctor(System.String,System.Int64)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
            <param name="iVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataLong.#ctor(System.String,System.Int64,MPT.USN.CommonLib.Enums.UnitTypes)">
            <summary>
            Constructor for Distance setting
            </summary>
            <param name="name"></param>
            <param name="iVal"></param>
            <param name="unitType"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataLong.#ctor(System.String,System.Int64,MPT.USN.CommonLib.Enums.UnitTypes,MPT.USN.CommonLib.Enums.RateType,MPT.USN.CommonLib.Enums.UnitTypes)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
            <param name="iVal"></param>
            <param name="unitType"></param>
            <param name="rate"></param>
            <param name="unitTypeRespect"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataLong.CopyDataFrom(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Copy data from another  DataLong object
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataLong.SetVal(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Set the value from the given data type
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataLong.SetDefault">
            <summary>
            Set value to its default
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataLong.ValToDisplayString">
            <summary>
            Convert the value to string in proper units
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataLong.ConvertValidate(System.Object)">
            <summary>
            Validate basics for this type
            </summary>
            <param name="oVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataLong.ValToString">
            <summary>
            Convert the value to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataLong.ValToString(System.String)">
            <summary>
            Convert the value to a formatted string
            </summary>
            <param name="fmt"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataLong.ValToDefaultString">
            <summary>
            Convert the default value to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataLong.ValFromString(System.String)">
            <summary>
            Set value from string
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataLong.Increment">
            <summary>
            Increment by one
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataLong.Decrement">
            <summary>
            Decrement by one
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataLong.IsTrue(System.Object)">
            <summary>
            Returns true if Val is true
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataLong.ObjRawVal">
            <summary>
            Get/Save the value from an unknown object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataLong.RawVal">
            <summary>
            Get/Set the raw value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataLong.Val">
            <summary>
            Get/Set the value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataLong.Default">
            <summary>
            Get/Set the default
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem">
            <summary>
            Class to provide access to third-party Vision drivers.
            <para/>
            <para/>
            <list type="table"> 
            <listheader><term>Examples...</term></listheader>
            <item><term><see cref="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem.OnEventsForComponent(MPT.USN.CommonLib.Comp.ComponentBase)">Setup the basic vision system driver.</see></term></item>
            </list>
            <para/>
            <para/>
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem.diNumCameras">
            <summary>
            Number of cameras found on this vision system
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem.#ctor(System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem.Initialize">
            <summary>
            Initialize in the UI thread
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem.OnEventsForComponent(MPT.USN.CommonLib.Comp.ComponentBase)">
            <summary>
            Add any events to be added by third party
            </summary>
            <remarks>Third party driver must override this in order to handle the generic calls.
            If the event is not handled, it will be simulated by CommonLib.
            <example>This code shows how to set up a basic vision system driver 
            <code>
            // Add events to handle requests for third-party operations
            protected override void OnEventsForComponent(ComponentBase comp)
            {
                if (comp == this)
                {
                    evAcquire += new DelegateParmSMCamera(OnAcquire);
                    evCreateCameraWindow += new DelegateParmControlString(OnCreateCameraWindow);
                }
            }
            
            private Control _displayWindow;
            
            // This will be called on the thread dedicated to this Third-party driver
            private void OnCreateCameraWindow(Camera cam, Control parent, string name)
            {
                // 
                // Associate the parent control with an acquisition.
                // If we want to use the parent control directly to display our image, 
                // we can simply hold onto the reference.
                //
            
                _displayWindow = parent;
            }
            
            // This will be called on the thread dedicated to this Third-party driver
            private void OnAcquire(SMMethodCall mc, Camera cam)
            {
               //
               // Now we make our acquisition
               //
               
               Image image = thirdPartyDriver.AcquireImage();
                
               //
               // And display it in our Display window
               //
            
               _displayWindow.BackgroundImage = image;
            
                if (mc != null)    
                {
                    // This call originated from state machine.
                    // Tell state machine, we are done.
                    mc.End();
                }
            }
            </code>
            </example>
            </remarks>
            <param name="comp">Component object to add events for</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem.CreateCameraWindow(MPT.USN.CommonLib.Comp.VisionSystem.Camera,System.Windows.Forms.Control,System.String)">
            <summary>
            Create the camera window
            </summary>
            <param name="cam"></param>
            <param name="parent"></param>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem.RegisterCameraFile(MPT.USN.CommonLib.Comp.VisionSystem.Camera)">
            <summary>
            Register the camera file
            </summary>
            <param name="cam"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem.Acquire(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.VisionSystem.Camera)">
            <summary>
            Start the acquisition
            </summary>
            <param name="mc"></param>
            <param name="cam"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem.AcquireV2(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.VisionSystem.CameraV2)">
            <summary>
            Start the acquisition on CameraV2
            </summary>
            <param name="mc"></param>
            <param name="cam"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem.AcquireV2Live(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.VisionSystem.CameraV2)">
            <summary>
            Start the acquisition for live on CameraV2
            </summary>
            <param name="mc"></param>
            <param name="cam"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem.RunVisionJob(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.VisionSystem.VisionJob)">
            <summary>
            Run a vision job
            </summary>
            <param name="mc"></param>
            <param name="visionJob"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem.SwitchLive(MPT.USN.CommonLib.Comp.VisionSystem.Camera,System.Windows.Forms.Control)">
            <summary>
            Toggle between live and not live
            </summary>
            <param name="cam"></param>
            <param name="parent"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem.SizeCameraWindow(System.Windows.Forms.Control,System.Drawing.Size)">
            <summary>
            Resize the camera window
            </summary>
            <param name="parentControl"></param>
            <param name="size"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem.GetHWCameraInfo(MPT.USN.CommonLib.Comp.VisionSystem.HWCamera[]@)">
            <summary>
            Get the camera hardware info 
            </summary>
            <param name="hwCamera"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem.GetHWCameraInfo(MPT.USN.CommonLib.Comp.VisionSystem.HWCamera[]@,MPT.USN.CommonLib.Comp.VisionSystem.CameraV2)">
            <summary>
            Get the camera hardware info
            </summary>
            <param name="hwCamera"></param>
            <param name="cam"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem.SyncAcquireImage(MPT.USN.CommonLib.Comp.VisionSystem.Camera)">
            <summary>
            Perform a sync aquisition of image from a camera
            </summary>
            <param name="cam"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem.CreateThirdPartyVisionJob(MPT.USN.CommonLib.Comp.VisionSystem.VisionJob)">
            <summary>
            Create a third party vision job
            </summary>
            <returns></returns>
            <param name="visionJob"></param>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem.evRegisterCameraFile">
            <summary>Event for RegisterCameraFile command</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem.evAcquire">
            <summary>Event for Acquire command</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem.evAcquireV2">
            <summary>Event for AcquireV2 command</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem.evAcquireV2Live">
            <summary>Event for Live Aquire</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem.evRunVisionJob">
            <summary>Event for Run VisionJob command</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem.evSwitchLive">
            <summary>Event for SwitchLive command</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem.evSizeCameraWindow">
            <summary>Event for SizeCameraWindow command</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem.evCreateCameraWindow">
            <summary>Event for CreateCameraWindow command</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem.DelegateParmCamera">
            <summary>Delegate with Camera parameter</summary>
            <param name="cam"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem.DelegateParmSMCamera">
            <summary>Delegate with SM and Camera paramter</summary>
            <param name="mc"></param>
            <param name="cam"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem.DelegateParmSMCameraV2">
            <summary>Delegate with SM and CameraV2 paramter</summary>
            <param name="mc"></param>
            <param name="cam"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem.DelegateParmSMVisionJob">
            <summary>Delegate with SM and VisionJob paramter</summary>
            <param name="mc"></param>
            <param name="cam"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem.DelegateParmCameraControl">
            <summary>Delegate with Camera, Control parameters</summary>
            <param name="cam"></param>
            <param name="parent"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem.DelegateParmCameraControlString">
            <summary>Delegate with Camera, Control parameters</summary>
            <param name="cam"></param>
            <param name="parent"></param>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.VisionSystem.DelegateParmSMCameraSize">
            <summary>Delegate with Camera and Size parameters</summary>
            <param name="mc"></param>
            <param name="cam"></param>
            <param name="size"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.HWCamera">
            <summary>
            Class to store information about found hardware
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.HWCamera.id">
            <summary>
            The camera id
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.HWCamera.description">
            <summary>
            The description of the camera
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.HWCamera.#ctor(System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="id"></param>
            <param name="description"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.HWCamera.ToString">
            <summary>
            Include id in the toString
            </summary>
            <returns></returns>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.SimAcquire">
            <summary>
            Class to simulate the image acquisition
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.SimAcquire.#ctor(MPT.USN.CommonLib.Data.DataString)">
            <summary>
            Constructor, this will come to the specific path and read for all bmp files
            </summary>
            <param name="dsPath"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.SimAcquire.GetNext">
            <summary>
            Get the next available image
            </summary>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.SimAcquire.ImageQueue">
            <summary>
            Get the queue with lock
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.RS232">
            <summary> Class to hold Com port settings</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.RS232.diCommPort">
            <summary>Commport</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.RS232.diBandRate">
            <summary>
            Band Rate.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.RS232.diDataLength">
            <summary>
            Data Lenght.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.RS232.diParity">
            <summary>
            Parity.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.RS232.diStopBit">
            <summary>
            Stop Bit Length.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.RS232.ddReadWriteTimeOut">
            <summary>
            Com Port Read Write Time Out.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.RS232.diBaudRate">
            <summary>Baud rate</summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.RS232.#ctor">
            <summary>
            Parameterless constructor for serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.RS232.#ctor(System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.RS232.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="commPort"></param>
            <param name="baudRate"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.RS232.Initialize">
            <summary>
            Initialize this component
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.RS232.ReadTo(System.String)">
            <summary>
            Port ReadTo function.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.RS232.ReadExisting">
            <summary>
            Port ReadExisting.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.RS232.Write(System.String)">
            <summary>
            Port Write function.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.RS232.RefreshPort">
            <summary>
            Port Refresh.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.RS232.CommPort">
            <summary>
            Get the Comm Port
            </summary>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.RS232.IsOpen">
            <summary>
            Return true if is open
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.RS232.BaudRate">
            <summary>
            Return the baud rate
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Output.AcqOutput">
            <summary>
            Summary description for AcqOutput.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Output.AcqOutput.diSampleRate">
            <summary>
            Sample Rate Data Object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Output.AcqOutput._data">
            <summary>
            Where the output data is stored
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.AcqOutput.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.AcqOutput.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.AcqOutput.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
            <param name="channelPrefix"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.AcqOutput.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add a settings page to this class
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.AcqOutput.WriteOutput(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Write the output
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Output.AcqOutput.SampleRate">
            <summary>
            Sample Rate
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Output.AcqOutput.SampleRateDefault">
            <summary>
            The default Sample rate (in KHz)
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Output.AcqOutput.Data">
            <summary>
            Get reference to the data 
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.DPM3Stub">
            <summary>
            Stubs for DPM3
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.DPM3Stub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.DPM3Stub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.NCDTStub">
            <summary>
            Stubs for NCDT
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.NCDTStub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.NCDTStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.AdvantechDAQStub">
            <summary>
            Stubs for AdvantechDAQ
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.AdvantechDAQStub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.AdvantechDAQStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.ModbusTcpIOStub">
            <summary>
            Stubs for ModbusTcpIO
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.ModbusTcpIOStub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.ModbusTcpIOStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.AgilentGpibStub">
            <summary>
            Stubs for AgilentGpib
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.AgilentGpibStub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.AgilentGpibStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.AdamDAQStub">
            <summary>
            Stubs for AdamAuisition
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.AdamDAQStub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.AdamDAQStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.NIStub">
            <summary>
            Stubs for National Instrument IO
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.NIStub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.NIStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.AdLinkPci9112Stub">
            <summary>
            Stubs for AdLinkPci9112
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.AdLinkPci9112Stub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.AdLinkPci9112Stub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.AdLinkDAQStub">
            <summary>
            Stubs for AdLinkDAQ
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.AdLinkDAQStub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.AdLinkDAQStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.ADLink8124CStub">
            <summary>
            Stubs for ADLink8124C
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.ADLink8124CStub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.ADLink8124CStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.HylaxPciIOStub">
            <summary>
            Stubs for AdLinkDAQ
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.HylaxPciIOStub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.HylaxPciIOStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Input.InputGroup">
            <summary>
            Summary description for InputGroup.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.InputGroup.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.InputGroup.#ctor(System.String,System.Int32,System.Type)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
            <param name="ioChans"></param>
            <param name="chanType"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.InputGroup.Initialize">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.CompWatch">
            <summary>
            Class for Watch window and data logging
            </summary>
            <remarks>This component is used for a utility to create your own custom tabulated csv file.  
            Registered data type objects can be selected as columns in the table. 
            Trigger mechanism will take a snapshot of all data and output to screen or file.  
            The trigger can be hard-coded, or as an action in a process, or by a timer.
            <para/>
            Since much of this is managed by the end user, there is not much for the developer to do here.
            </remarks>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompWatch.dsColumnDefinition">
            <summary>
            Access to string array of "Column Definition"
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompWatch.dbIncludeTypeRow">
            <summary>
            Flag to indicate if we want to include the type row
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompWatch.dsColumnTitle">
            <summary>
            Access to string array of "Column Title"
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompWatch.dsColumnUnit">
            <summary>
            Access to string array of "Column Unit"
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompWatch.ddContinuousTriggerInterval">
            <summary>
            Continuous Trigger Interval
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompWatch.dbActive">
            <summary>
            Access to string array of "Active"
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompWatch.dbTemplate">
            <summary>
            Access to string array of "Template"
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompWatch.dbWriteToFile">
            <summary>
            Access to string array of "Save To File"
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompWatch.dsLogFilePath">
            <summary>
            Access to string array of "Log FilePath"
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompWatch.LogFilePath">
            <summary>
            Get/Set the "Log FilePath" data value
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompWatch.diCount">
            <summary>
            Record count
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompWatch.previousHeader">
            <summary>
            Previously written header
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompWatch.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompWatch.#ctor(System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompWatch.Initialize">
            <summary>
            Initializer the component
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompWatch.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add a settings page to the 'tab' of this inherited class.
            If skip is set to true, then any pages assigned to this inherited 
            class will be skipped.
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompWatch.Clear(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Clear the contents (delete the file
            </summary>
            <param name="caller"></param>
            <returns></returns>
            <remarks>Destination is the Watch window then possibly to a file</remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompWatch.Trigger(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Update the table with new values
            </summary>
            <param name="caller"></param>
            <returns></returns>
            <remarks>Destination is the Watch window then possibly to a file</remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompWatch.WriteRowData(System.String[])">
            <summary>
            Write a record of data
            </summary>
            <param name="definitions"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompWatch.RegisterWatchPage(MPT.USN.CommonLib.Comp.CompWatchPage)">
            <summary>
            Register a Watch Window
            </summary>
            <param name="page"></param>
            <remarks>This will allow Trigger to update the pages with new data.</remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompWatch.GetUnitString(System.Int32)">
            <summary>
            Get the unit string given the column index
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompWatch.ColumnDefinition">
            <summary>
            Get/Set the "Column Definition" data value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompWatch.ColumnTitle">
            <summary>
            Get/Set the "Column Title" data value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompWatch.ColumnUnits">
            <summary>
            Get/Set the "Column Units" data value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompWatch.Active">
            <summary>
            Get/Set the "Active" data value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompWatch.Template">
            <summary>
            Get/Set the "Template" data value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompWatch.WriteToFile">
            <summary>
            Get/Set the "Save To File" data value
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPC.XBarRChartResults">
            <summary>
            Class to report the data for the XBarR chart
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.XBarRChartResults.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.XBarRChartResults.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.XBarRChartResults.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.XBarRChartResults.#ctor(MPT.USN.CommonLib.Comp.SPC.XBarRChartData)">
            <summary>
            constructor
            </summary>
            <param name="xBarRChartData"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPC.SPCGroupList">
            <summary>
            contains one set of SPC charts
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCGroupList.#ctor">
            <summary>
            default construtor for serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCGroupList.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCGroupList.GetGroup(System.String)">
            <summary>
            Return a group by name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCGroupList.GetInstanceGroup(System.String)">
            <summary>
            Return a group by name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCGroupList.DeleteInstanceGroup(MPT.USN.CommonLib.Comp.SPC.SPCGroup)">
            <summary>
            Deletes a group of SPC Charts
            </summary>
            <param name="spcGroup"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCGroupList.Convert(MPT.USN.CommonLib.Comp.ComponentBase)">
            <summary>
            Convert to from the old method
            </summary>
            <param name="propList">This has the old SPC settings</param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPC.SPCData">
            <summary>
            Module for accessing data for SPC Charts and results
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData._d2_table">
            <summary>
            useage _d2_table[DataLength, subgroup]
            subgroup GT 1 and LT 16, DataLength GT 15 use row 16
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData._A_Constants">
            <summary>
            Observations in Sample (n) 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData._A2_Constants">
            <summary>
            Observations in Sample (n) 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData._D1_Constants">
            <summary>
            Observations in Sample (n) 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData._D2_Constants">
            <summary>
            Observations in Sample (n) 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData._D3_Constants">
            <summary>
            Observations in Sample (n) 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData._D4_Constants">
            <summary>
            Observations in Sample (n) 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData._A3_Constants">
            <summary>
            Observations in Sample (n) 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData._B3_Constants">
            <summary>
            Observations in Sample (n) 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData._B4_Constants">
            <summary>
            Observations in Sample (n) 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData._d2_Constants">
            <summary>
            Observations in Sample (n) 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData._c4_Constants">
            <summary>
            Observations in Sample (n) 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.SpecialCauseNames">
            <summary>
            Names of special Causes 
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.GetXBar(System.Double[])">
            <summary>
            Do Average of a double array
            </summary>
            <param name="X"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.GetXBar(System.Single[])">
            <summary>
            Do Average of a float array
            </summary>
            <param name="X"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.IsEven(System.Int32)">
            <summary>
            Test to see if int is even or odd
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.GetSigma(System.Double[])">
            <summary>
            Return sigma of an array of doubles
            </summary>
            <param name="X"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.GetSigmaEst(System.Int32,System.Int32,System.Double)">
            <summary>
            Use d2 factor to get sigma estimate
            </summary>
            <param name="samplesize"></param>
            <param name="subGroupSize"></param>
            <param name="rbar"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.GetMedian(System.Double[])">
            <summary>
            Returns the median of an array of doubles
            </summary>
            <param name="X"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.CalculateControlLimits">
            <summary>
            Calculate control limits
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.GetGraphType">
            <summary>
            Returns the graph type for inserting in the SPCPage (must be overridden)
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.GetResultsType">
            <summary>
            Returns the results insert type for inserting in the SPCPage (must be overridden)
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.UpdateResults">
            <summary>
            for updating the results section of the SPCPage (may be overridden)
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.SpecialCauseTestsMean">
            <summary>
            list of Bit arrays for each data point identifying special causes for each point
            For X bar chart
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.SpecialCauseTestsRange">
            <summary>
            list of Bit arrays for each data point identifying special causes for each point
            For R bar chart
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.UpdateSpecialCauseTests(System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            indentifies all special causes for each datapoint
            </summary>
            <param name="data"></param>
            <param name="CL"></param>
            <param name="UCL"></param>
            <param name="LCL"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.InitialGraphSetup">
            <summary>
            Initial setup for subclasses
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.CalculateGRR">
            <summary>
            Calculate GRR in subclass
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData._meanArr">
            <summary>
            Control chart parameter arrays
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData._uclmeanArr">
            <summary>
            Control chart parameter arrays
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData._lclmeanArr">
            <summary>
            Control chart parameter arrays
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData._averagemeanArr">
            <summary>
            Control chart parameter arrays
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData._rangeArr">
            <summary>
            Control chart parameter arrays
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData._uclrangeArr">
            <summary>
            Control chart parameter arrays
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData._lclrangeArr">
            <summary>
            Control chart parameter arrays
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData._averagerangeArr">
            <summary>
            Control chart parameter arrays
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData._xLabelArr">
            <summary>
            Control chart parameter arrays
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData._meanGoodArr">
            <summary>
            Control chart parameter arrays
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData._rangeGoodArr">
            <summary>
            Control chart parameter arrays
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData._uslArr">
            <summary>
            Control chart parameter arrays
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData._lslArr">
            <summary>
            Control chart parameter arrays
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData._subgroupsizeArr">
            <summary>
            Control chart parameter arrays
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData._registrationCount">
            <summary>
            count for how many groups were registered
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dbTriggerNextSubgroup">
            <summary>
            Used to initiate a capture for SPC Subgroup measurement
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.IgnoreDataValue">
            <summary>
            Used by graphs to ignore this data point
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.diSPCChartSelected">
            <summary>
            to support public method
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.ddtLastUpdate">
            <summary>
            Date and Time of last point plotted
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.FillAllDataArrays">
            <summary>
            load up arrays with current data
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.GetCopyQueue">
            <summary>
            Return a copy of the queue
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.GetSubsets">
            <summary>
            Return subset data (all data by subset)
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.GetDateTimeStamps">
            <summary>
            get array of date/time stamps for plotting
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.GetPartItems">
            <summary>
            wrapper for SetSubgroups when Sampling Continuous
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.GetSubgroups">
            <summary>
            Returns the array of subgroups in queue
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.GetAllGoodData">
            <summary>
            Get all data that is within control limits
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.GetAllData">
            <summary>
            Get all data, good and bad
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.GetAverageArray">
            <summary>
            Get Array of mean subset values, all subsets
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.GetAverageArray(System.Int32)">
            <summary>
            get average of a range of subsets
            </summary>
            <param name="maxSubsets"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.GetRangeArray">
            <summary>
            Get range array of all subsets
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.GetRangeArray(System.Int32)">
            <summary>
            get range array of a fixed number of subsets
            </summary>
            <param name="maxSubsets"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.GetSigmaArray">
            <summary>
            Get sigma array of all subsets
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.GetSigmaArray(System.Int32)">
            <summary>
            get sigma array of a fixed number of subsets
            </summary>
            <param name="maxSubsets"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.GetXLabels">
            <summary>
            return array of x values
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.CopyTo(MPT.USN.CommonLib.Comp.SPC.SPCData@)">
            <summary>
            to make a copy of the object without cloning
            </summary>
            <param name="spcData"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.Initialize">
            <summary>
             Initialize this component
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.GetControlLimitInsert">
            <summary>
            To get the correct control limit insert to place in the setup page (can be overridden)
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.Clone(System.Type)">
            <summary>
            To clone object
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.diPointsToPlot">
            <summary>
            Number of points plotted on a chart
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dsMainTitle">
            <summary>
            Label for the Main Title
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dsSubTitle">
            <summary>
            Label for the Subtitle
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dsXAxisTitle">
            <summary>
            Label for the X Axis
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dsYAxisTitle">
            <summary>
            Label for the Y Axis
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.diSamplingSize">
            <summary>
            Number of sample subsets to be collected duriing each sampling period
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dsSamplingLotEnd">
            <summary>
            Last lot to sample when doing it by lot
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dsSamplingLotStart">
            <summary>
            First lot to sample when doing it by lot
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData._samplingContinous">
            <summary>
            Turns on continuous plotting of real time data (not sampled)
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dbSamplingEvenlySpaced">
            <summary>
            Turns on Evenly Spaced plotting of real time data (not sampled)
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dbSamplingRandom">
            <summary>
            Turns on Random plotting of data
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dbSamplingPeriodDay">
            <summary>
            Turns on Sampling Period of a Day plotting of data
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dbSamplingPeriodHour">
            <summary>
            Turns on Sampling Period of an Hour plotting of data
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dbSamplingPeriodLot">
            <summary>
            Turns on Sampling Period by Lot plotting of data
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dbSamplingPeriodShift">
            <summary>
            Turns on Sampling Period by Shift plotting of data
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dbSamplingPeriodMinute">
            <summary>
            Turns on Sampling Period each Minute plotting of data
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dbSamplingPeriodSecond">
            <summary>
            Turns on Sampling Period each Second plotting of data
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dbSamplingPeriodShiftGraveyard">
            <summary>
            Turns on Sampling Period each Graveyard Shift plotting of data
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dbSamplingPeriodShiftNight">
            <summary>
            Turns on Sampling Period each Night Shift plotting of data
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dbSamplingPeriodShiftDay">
            <summary>
            Turns on Sampling Period each Day Shift plotting of data
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.ddSpecLimits">
            <summary>
            Lower Specification Limit parameter
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.ddXBarBar">
            <summary>
            XBarBar parameter
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.ddMean">
            <summary>
            Mean parameter
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.ddMedian">
            <summary>
            Median parameter
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.ddSigma">
            <summary>
            Sigma parameter
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.ddCpk">
            <summary>
            Cpk parameter
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.ddCp">
            <summary>
            Cp parameter
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.ddPpk">
            <summary>
            Ppk parameter
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.ddPp">
            <summary>
            Pp parameter
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.ddRange">
            <summary>
            Range parameter
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.ddMaximum">
            <summary>
            Maximum parameter
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.ddMinimum">
            <summary>
            Minimum parameter
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.ddYield">
            <summary>
            Yield parameter
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dbSpecialCause1">
            <summary>
            Select for enabling Special Causes of variation detection on control chart
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dbSpecialCause2">
            <summary>
            Select for enabling Special Causes of variation detection on control chart
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dbSpecialCause3">
            <summary>
            Select for enabling Special Causes of variation detection on control chart
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dbSpecialCause4">
            <summary>
            Select for enabling Special Causes of variation detection on control chart
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dbSpecialCause5">
            <summary>
            Select for enabling Special Causes of variation detection on control chart
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dbSpecialCause6">
            <summary>
            Select for enabling Special Causes of variation detection on control chart
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dbSpecialCause7">
            <summary>
            Select for enabling Special Causes of variation detection on control chart
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dbSpecialCause8">
            <summary>
            Select for enabling Special Causes of variation detection on control chart
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dbSpecialCause9">
            <summary>
            Select for enabling Special Causes of variation detection on control chart
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dbDataFormatIndividual">
            <summary>
            Format of data requested from database
            Individual data format is every data point from all subgroups
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dbDataFormatSigma">
            <summary>
            Format of data requested from database
            Sigma data format is an array of the standard deviations of the subgroups
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dbDataFormatRange">
            <summary>
            Format of data requested from database
            Range data format is an array of the Max - Min of the subgroups
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dbDataFormatMedian">
            <summary>
            Format of data requested from database
            Median data format is an array of the middle of the subgroups
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dbDataFormatMean">
            <summary>
            Format of data requested from database
            Mean data format is an array of the average of the subgroups
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dbPostProcess">
            <summary>
            Format of data requested from database
            Grab data from database one time (not continually during process)
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dbRealTime">
            <summary>
            Format of data requested from database
            Grab data from database continually during process
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.diSubgroupSize">
            <summary>
            Format of data requested from database
            Size of the sample group
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dsDateTimeEnd">
            <summary>
            End date/time for the data search in database
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.dsDateTimeStart">
            <summary>
            Start date/time for the data search in database
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData._allData">
            <summary>
            Queue for all the data
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.AllDataLock">
            <summary>
            Public access used for locking allData
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData._newData">
            <summary>
            new data just added to the queue
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData._discardedData">
            <summary>
            Data that just got deQueued
            null if nothing dequeued
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCData.temp_classDataName">
            <summary>
            Old version to pass value up to parent class
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.ProcessNewData">
            <summary>
            Called when _newData is available
            _allData also has _newData added to it
            Both _newData and _allData are not gaurenteed after 
            returning from this method
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.ClearQueue">
            <summary>
            Reset the queue
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.AddNewDataToQueue">
            <summary>
            Queue up the _newData item.
            We also set the _discardData if any data is to be dequeued
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.OnNewData(MPT.USN.CommonLib.DBFieldItem)">
            <summary>
            Just in: new data value
            </summary>
            <param name="fieldItem"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.PackOutRecurse">
            <summary>
            Saves the object and all it's decendents to an Xml file
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCData.PackInRecurse(MPT.USN.CommonLib.MPTBase)">
            <summary>
            Assign Parent to all components after file read
            </summary>
            <param name="parent"></param>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.SPC.SPCData.evFreshData">
            <summary>
            event to process new data
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.TriggerNextSubgroup">
            <summary>
            Used to initiate a capture for SPC Subgroup measurement
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.SPCChartSelected">
            <summary>
            The selected chart type in a drop down box
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.CountInQueueNoLock">
            <summary>
            Number of data points in queue
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.CountInQueueLock">
            <summary>
            Number of data points in queue
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.XLabelArr">
            <summary>
            Labels for X axis
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.MeanArr">
            <summary>
            Mean data for xbar graph
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.MeanGoodArr">
            <summary>
            Mean values that are within control limits
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.UCLMeanArr">
            <summary>
            Array of Upper Control Limit values for xbar data
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.LCLMeanArr">
            <summary>
            Array of Lower Control Limit values for xbar data
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.AverageMeanArr">
            <summary>
            Array of xbarbar data
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.RangeArr">
            <summary>
            array of range values for rbar chart
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.RangeGoodArr">
            <summary>
            array of rbar data that is within control limits
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.UCLRangeArr">
            <summary>
            upper control limit values for rbar data
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.LCLRangeArr">
            <summary>
            Lower control limit values for rbar data
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.AverageRangeArr">
            <summary>
            Average range values for the rbar graph
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.USLArr">
            <summary>
            Upper control limit array
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.LSLArr">
            <summary>
            Lower control limit array
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.LastUpdate">
            <summary>
            Date and Time of last point plotted
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.RegistrationCount">
            <summary>
            Number of times this class was registered
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.PointsToPlot">
            <summary>
            Number of points plotted on a chart
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.MainTitle">
            <summary>
            Label for the Main Title
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.SubTitle">
            <summary>
            Label for the Subtitle
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.XAxisTitle">
            <summary>
            Label for the X Axis
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.YAxisTitle">
            <summary>
            Label for the Y Axis
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.SamplingSize">
            <summary>
            Number of sample subsets to be collected duriing each sampling period
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.SamplingLotEnd">
            <summary>
            Last lot to sample when doing it by lot
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.SamplingLotStart">
            <summary>
            First lot to sample when doing it by lot
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.SamplingContinous">
            <summary>
            Turns on continuous plotting of real time data (not sampled)
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.SamplingEvenlySpaced">
            <summary>
            Turns on Evenly Spaced plotting of real time data (not sampled)
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.SamplingRandom">
            <summary>
            Turns on Random plotting of data
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.SamplingPeriodDay">
            <summary>
            Turns on Period of a Day plotting of data
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.SamplingPeriodHour">
            <summary>
            Turns on Sampling Period of an Hour plotting of data
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.SamplingPeriodLot">
            <summary>
            Turns on Sampling Period by Lot plotting of data
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.SamplingPeriodShift">
            <summary>
            Turns on Sampling Period by Shift plotting of data
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.SamplingPeriodMinute">
            <summary>
            Turns on Sampling Period each Minute plotting of data
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.SamplingPeriodSecond">
            <summary>
            Turns on Sampling Period each Second plotting of data
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.SamplingPeriodShiftGraveyard">
            <summary>
            Turns on Sampling Period each Graveyard Shift plotting of data
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.SamplingPeriodShiftNight">
            <summary>
            Turns on Sampling Period each Night Shift plotting of data
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.SamplingPeriodShiftDay">
            <summary>
            Turns on Sampling Period each Day Shift plotting of data
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.UCL">
            <summary>
            Upper Control Limit parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.LCL">
            <summary>
            Lower Control Limit parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.USL">
            <summary>
            Upper Specification Limit parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.LSL">
            <summary>
            Lower Specification Limit parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.XBarBar">
            <summary>
            XBarBar parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.Mean">
            <summary>
            Mean parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.Median">
            <summary>
            Mean parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.Sigma">
            <summary>
            Sigma parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.Cpk">
            <summary>
            Cpk parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.Cp">
            <summary>
            Cp parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.Ppk">
            <summary>
            Ppk parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.Pp">
            <summary>
            Pp parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.Group">
            <summary>
            Returns the parent group which contains SPC Settings like UCL, LCL
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.Range">
            <summary>
            Range parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.Maximum">
            <summary>
            Maximum parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.Minimum">
            <summary>
            Minimum parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.Yield">
            <summary>
            Yield parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.SpecialCause1">
            <summary>
            Select for enabling Special Causes of variation detection on control chart
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.SpecialCause2">
            <summary>
            Select for enabling Special Causes of variation detection on control chart
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.SpecialCause3">
            <summary>
            Select for enabling Special Causes of variation detection on control chart
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.SpecialCause4">
            <summary>
            Select for enabling Special Causes of variation detection on control chart
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.SpecialCause5">
            <summary>
            Select for enabling Special Causes of variation detection on control chart
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.SpecialCause6">
            <summary>
            Select for enabling Special Causes of variation detection on control chart
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.SpecialCause7">
            <summary>
            Select for enabling Special Causes of variation detection on control chart
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.SpecialCause8">
            <summary>
            Select for enabling Special Causes of variation detection on control chart
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.SpecialCause9">
            <summary>
            Select for enabling Special Causes of variation detection on control chart
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.DataFormatIndividual">
            <summary>
            Format of data requested from database
            Individual data format is every data point from all subgroups
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.DataFormatSigma">
            <summary>
            Format of data requested from database
            Sigma data format is an array of the standard deviations of the subgroups
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.DataFormatRange">
            <summary>
            Range of data requested from database
            Sigma data format is an array of the Max - Min of the subgroups
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.DataFormatMedian">
            <summary>
            Median of data requested from database
            Sigma data format is an array of the middle of the subgroups
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.DataFormatMean">
            <summary>
            Format of data requested from database
            Mean data format is an array of the average of the subgroups
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.PostProcess">
            <summary>
            Format of data requested from database
            Grab data from database one time (not continually during process)
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.RealTime">
            <summary>
            Format of data requested from database
            Grab data from database continually during process
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.SubgroupSize">
            <summary>
            Format of data requested from database
            Size of the sample group
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.DateTimeEnd">
            <summary>
            End date/time for the data search in database
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.DateTimeStart">
            <summary>
            Start date/time for the data search in database
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.ser_classDataName">
            <summary>
            Old version to get serialzed value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCData.classDataName">
            <summary>
            Object instance identifier
            Selected using Data.ClassDataSel form
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPC.SPCData.DelegateFreshData">
            <summary>
            delegate for method to process new data
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisTriggersSensorsPage">
            <summary>
            Class for the Logical Axis page
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisTriggersSensorsPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisTriggersSensorsPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisTriggersSensorsPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisTriggersSensorsPage.#ctor(MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisBase)">
            <summary>
            Constructor
            </summary>
            <param name="axis"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisTriggersSensorsPage.ShowIt">
            <summary>
            Show the page based on privilege
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisTriggersSensorsPage.CanSafeDispose">
            <summary>
            Indicate whether this can safely disposed when run out of scene
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxesPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxesPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxesPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxesPage.#ctor(MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axes)">
            <summary>
            Constructor
            </summary>
            <param name="axes"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.MPTControls.MPTCheckBox">
            <summary>
            User Control of checkbox for DataBool or DataString
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.MPTControls.MPTControl">
            <summary>
            Base class for all MPTcontrols
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MPTControls.MPTControl._dt">
            <summary>
            Acccess to the data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MPTControls.MPTControl.refStringFieldInfo">
            <summary>
            Storage for reference string
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MPTControls.MPTControl.refStringClassOwner">
            <summary>
            Object of where reference is located
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTControl.FireOnChanged">
            <summary>
            Fire the onChanged event
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTControl.SelectControl">
            <summary>
            Select the underlying control for input focus
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTControl.GetVal">
            <summary>
            Return the current Value of the underlying control
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTControl.DataSelection_Click(System.Object,System.EventArgs)">
            <summary>
            Response to Data Selection click
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTControl.DataProperties_Click(System.Object,System.EventArgs)">
            <summary>
            Response to Data Properties click
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTControl.Init(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Populate the control
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTControl.RegisterSelf">
            <summary>
            Register this control with the data object
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTControl.UnRegisterSelf">
            <summary>
            UnRegister this control with the data object
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTControl.UpdateVal">
            <summary>
            Update the value of the control
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTControl.DataValidation(System.ComponentModel.CancelEventArgs)">
            <summary>
            Do the validating
            </summary>
            <param name="e"></param>
            <returns>True if passes validation</returns>
        </member>
        <member name="E:MPT.USN.CommonLib.MPTControls.MPTControl.OnChanged">
            <summary>
            OnChange event
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTControl.dataType">
            <summary>
            Return reference to the data type object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTControl.UnvalidatedVal">
            <summary>
            Get/Set the unvalidated value
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTCheckBox.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTCheckBox.Init(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Populate the control
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTCheckBox.UpdateVal">
            <summary>
            Update the inner control
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTCheckBox.SelectControl">
            <summary>
            Select the underlying control for input focus
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTCheckBox.GetVal">
            <summary>
            Return the current Value of the underlying control
            </summary>
            <returns></returns>
        </member>
        <member name="F:MPT.USN.CommonLib.MPTControls.MPTCheckBox.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTCheckBox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTCheckBox.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTCheckBox.Text">
            <summary>
            Get set, the underlying check box value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTCheckBox.ValTag">
            <summary>
            Value if checked
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTCheckBox.Checked">
            <summary>
            Get/Set the inner check box control
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTCheckBox.Appearance">
            <summary>
            Get/set underlying checkbox appearence
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTCheckBox.TextAlign">
            <summary>
            Get/set underlying checkbox Text alignment
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTCheckBox.AutoSize">
            <summary>
            Auto Size
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Help.HelpContextForm">
            <summary>
            Form to contain the help band display and menu
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Help.HelpContextForm.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Help.HelpContextForm.RButtonDown(System.Windows.Forms.Control)">
            <summary>
            Handle the right mouse button
            </summary>
            <param name="ctl"></param>
            <returns>True if handled</returns>
        </member>
        <member name="F:MPT.USN.CommonLib.Help.HelpContextForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Help.HelpContextForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Help.HelpContextForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.Validations.ValidateTargetMinMax">
            <summary>
            Class to validate a double entry
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.Validations.ValidateTargetMinMax.Target">
            <summary>Mean</summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidateTargetMinMax.#ctor">
            <summary>
            Parameterless constructor for serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidateTargetMinMax.ConvertInternalCycle">
            <summary>
             Convert due to Machine xml change
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidateTargetMinMax.CopyDataFrom(MPT.USN.CommonLib.Data.DBClass)">
            <summary>
            Copy the data from another validation object
            </summary>
            <param name="from"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidateTargetMinMax.Clone">
            <summary>
            Copy data
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidateTargetMinMax.bValidateRaw(MPT.USN.CommonLib.Data.DataType,System.Object)">
            <summary>
            Validate the double entry.  True if inside max/min range.
            </summary>
            <param name="dt"></param>
            <param name="oVal"></param>
            <returns>bool</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidateTargetMinMax.ValidateRaw(MPT.USN.CommonLib.Data.DataType,System.Object)">
            <summary>
            Validate the double entry
            </summary>
            <param name="dt"></param>
            <param name="oVal"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TFInput">
            <summary>
            Class to define inputs used in transferfunctions
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TFInput.InputBins">
            <summary>
            list of bin boundries for input datatypes
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TFInput.TFLimits">
            <summary>
            user limits on overall datatype range used for regression
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TFInput.RegressLimits">
            <summary>
            calculated limits on datatype actually used to establish range used for regression 
            Only used with binning
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TFInput.UseFloatingInputBins">
            <summary>
            flag to turn on floating input bins
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TFInput.FloatingBinRange">
            <summary>
            range used with floating bins
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFInput.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFInput.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFInput.#ctor(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Constructor
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFInput.CopyDataFrom(MPT.USN.CommonLib.Data.DBClass)">
            <summary>
            copy data from another TFInput
            </summary>
            <param name="tfFrom"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFInput.Clone">
            <summary>
            Clone this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFInput.GetListBinValidation">
            <summary>
            Get a list of validation based on the TFLimits and bins
            The returned validations are in specific unit (e.g. deg), not internal.
            </summary>
            <returns>The list of validation for every possible bin, cloned.</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFInput.GetBinBoundariesString">
            <summary>
            Get a string contains all bin boundaries include min and max.
            The values return are in specific unit, not internal
            </summary>
            <returns>A string contains a list of bin boundaries, separate by commas</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFInput.AfterFileRead">
            <summary>
            After Machine xml File read
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TFInput.InputBinsCount">
            <summary>
            Return the number of input items
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TFInput.UnitType">
            <summary>
            Units to be used for this TF
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TFInput.SerUnitType">
            <summary>
            Serialize the value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TFInput.Name">
            <summary>
            Object name
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TFInput.InputObject">
            <summary>
            Input object for this TFInput
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TFInputList">
            <summary>
            Container for TFInput Objects
            Accessable by input full path name (key)
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFInputList.#ctor">
            <summary>
            default constructor for serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFInputList.RemoveAt(System.String)">
            <summary>
            Remove the TFInput with the given name
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFInputList.NameAt(System.Int32)">
            <summary>
            return the name at a specific index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFInputList.GetInputAt(System.String)">
            <summary>
            return a TFInput object for a name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFInputList.GetIndexOf(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Return index of TFInput with given DataType
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFInputList.GetIndexOf(System.String)">
            <summary>
            Return index of TFInput with given name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFInputList.Clone">
            <summary>
            method to make a new object with the data from this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFInputList.CopyDataFrom(MPT.USN.CommonLib.Data.TFInputList)">
            <summary>
            copy data from another TFInput
            </summary>
            <param name="tfFrom"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFInputList.AfterFileRead">
            <summary>
            After Machine xml File read
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TFInputList.dbDirty">
            <summary>
            IDBClass Interface implementation
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TFInputList.dbFullPathName">
            <summary>
            IDBClass Interface implementation
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TFInput_Ver1_8">
            <summary>
            Obsolete Class to define inputs used in transferfunctions
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TFInput_Ver1_8.Validation">
            <summary>
            user limits on overall datatype range used for regression
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFInput_Ver1_8.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.ValidateMinMax_Ver1_8">
            <summary>
            Obsolete Class to define inputs used in transferfunctions
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.ValidateMinMax_Ver1_8.TFMin">
            <summary>TFMin (Obsolete)</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.ValidateMinMax_Ver1_8.TFMax">
            <summary>TFMax (Obsolete)</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.DbAcceptChangeRequestsForm">
            <summary>
            Class to contain change requests insert
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DbAcceptChangeRequestsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DbAcceptChangeRequestsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DbAcceptChangeRequestsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DbAcceptChangeRequestsForm.#ctor(System.Collections.Generic.List{MPT.USN.CommonLib.Data.DBRequest})">
            <summary>
            Constructor
            </summary>
            <param name="requests"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.VisionJobControl">
            <summary>
            Page for add/remove vision jobs
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.VisionJobControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionJobControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionJobControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionJobControl.#ctor(MPT.USN.CommonLib.Comp.VisionSystem.Camera)">
            <summary>
            Constructor
            </summary>
            <param name="cam"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPL.SPLStation">
            <summary>
            Software component to hold station info
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLStation.diIndexPos">
            <summary>
            Index position for this station
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLStation.dsCurrentSuspension">
            <summary>
            Current suspension at this station
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLStation.dsCurrentSuspensionID">
            <summary>
            Current suspension ID at this station
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLStation.ddUPH">
            <summary>
            UPH For this station
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLStation.diUPH_MinPart">
            <summary>
            Cycle for calculate UPH
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLStation.diUPH_MaxPart">
            <summary>
            Max part for average calculate UPH
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLStation.diUPH_PartCount">
            <summary>
            Count total comming part
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLStation.diUPH_PartCountforCalc">
            <summary>
            Check for show UPH
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLStation.AL_MemberUPH">
            <summary>
            Array list for store UPH of each part 
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLStation.dAverage">
            <summary>
            Parameter for calculating for UPH
            </summary>
            <remarks>I put the comment to resolve compile warning, concern please change,
            also please make the variable name more comprehensive.
            </remarks>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLStation.diUPH_ConPartCount">
            <summary>
            Part count when calculating for UPH
            </summary>
            <remarks>I put the comment to resolve compile warning, concern please change,
            also please make the variable name more comprehensive.
            </remarks>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLStation.dsCurrentBoat">
            <summary>
            Current Boat at this station
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLStation.deMode">
            <summary>
            Operating mode
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLStation.dbRework">
            <summary>
            Rework flag
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLStation.dbMeasure">
            <summary>
            Flag if is to measure
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLStation.SetCurrentSuspension">
            <summary>
            Set the current suspension
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLStation._curSuspension">
            <summary>
            Current suspension object at this station
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLStation._splMachine">
            <summary>
            Reference to machine object
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLStation.SetPartProcessed(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Set the suspension as Processed
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLStation.StationActive(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Indicate that this station is active
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLStation.OnStart">
            <summary>
            Run button has been pressed
            Assume not active.  Let process change if it is truly active
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLStation.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLStation.#ctor(System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLStation.Initialize">
            <summary>
            Initialize this component
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLStation.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add pages to this component
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLStation.CreateStationInsert">
            <summary>
            Create a child insert
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLStation.ShortModeText">
            <summary>
            Return the short description of the mode
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLStation.SetClockEnd(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            ClockEnd occurs 
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLStation.Mode">
            <summary>
            Get Operating mode
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLStation.LaserActive">
            <summary>
            Returns true if station needs the laser turned on
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLStation.AdjustActive">
            <summary>
            Returns true if station is adjusting or training part
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLStation.Measure">
            <summary>
            True if mesurement to take place
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLStation.Rework">
            <summary>
            True if reworking
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLStation.UPH">
            <summary>
            Get/Set the UPH
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLStation.Active">
            <summary>
            Indicates if this process is active
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLStation.FreeCycle">
            <summary>
            Flag to indicat that the station has free cycle available.
            (No part at station)
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLStation.CurSuspension">
            <summary>
            Get/Set the current suspension
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLStation.PartAtMyStation">
            <summary>
            Returns true if a suspension is at the indexed position
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLStation.PartBeforeStation">
            <summary>
            Check Part at IndexPos - 1. 
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLStation.PartProcessed">
            <summary>
            Returns true if station is through processing this suspension
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLStation.IndexPos">
            <summary>
            Get/Set the index pos
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPL.SPLStation.eMode">
            <summary>
            Enum for operating mode
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLStation.eMode.Disable">
            <summary>Deactivate the adjustability of this station</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLStation.eMode.Adjust">
            <summary>Adjustment mode</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLStation.eMode.Train">
            <summary>Train mode</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLStation.eMode.Idle">
            <summary>No adjustment takes place.</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLStation.eMode.Pseudo">
            <summary>Like adjustment, with no adjustment.</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.Axis.SimSetPoint">
            <summary>
            Class for simulate move axis
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.SimSetPoint.tickStartMove">
            <summary>
            tickstartMove field
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.SimSetPoint.dSetPoint">
            <summary>
            setpoint field
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.SimSetPoint.mc">
            <summary>
            mc field
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.SimSetPoint.vel">
            <summary>
            vel field
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.SimSetPoint.#ctor(MPT.USN.CommonLib.SMMethodCall,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="mc"></param>
            <param name="setPoint"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.SimSetPoint.End">
            <summary>
            End simulate move
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Output.OutputGroup">
            <summary>
            Summary description for OutputGroup.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.OutputGroup.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.OutputGroup.#ctor(System.String,System.Int32,System.Type)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
            <param name="ioChans"></param>
            <param name="chanType"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.OutputGroup.Initialize">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPL.SPLBoats">
            <summary>
            
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLBoats.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLBoats.#ctor(System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLBoats.#ctor(System.String,System.Int32,System.Type)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
            <param name="numBoats"></param>
            <param name="tySusp"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLBoats.RegisterSuspMclData(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Register for Extra MCL item dynamic load to all Suspension
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLBoats.RemoveSuspMclData(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Remove for Extra MCL item dynamic load from all Suspension
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLBoats.RemoveSuspMclData(System.String)">
            <summary>
            Remove for Extra MCL item dynamic load from all Suspension overload2
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPL.SPLLoaderInsert">
            <summary>
            Class for the SPLLoader axis insert
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLLoaderInsert.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLLoaderInsert.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLLoaderInsert.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLLoaderInsert.#ctor(MPT.USN.CommonLib.Comp.SPL.SPLLoader)">
            <summary>
            Constructor
            </summary>
            <param name="splLoader"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPC.RunChartResults">
            <summary>
            Class to display run chart parameter data
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.RunChartResults.#ctor(MPT.USN.CommonLib.Comp.SPC.RunChartData)">
            <summary>
            constructor
            </summary>
            <param name="runChartData"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.RunChartResults.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.RunChartResults.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.RunChartResults.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPC.HistogramGraph">
            <summary>
            Basic Run Chart Graph
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPC.SPCGraph">
            <summary>
            Basic Control Chart Graph
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCGraph.Demo">
            <summary>
            To run demo of graph with fake data (handled by subclass)
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCGraph.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCGraph.#ctor(MPT.USN.CommonLib.Comp.SPC.SPCData)">
            <summary>
            Constructor
            </summary>
            <param name="spcData"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCGraph.OnFreshData(System.Object)">
            <summary>
            Event response to handle new data once available
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCGraph.FillGraphFromQueue">
            <summary>
            Generally used to initialize the graph data in a constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCGraph.ApplyNewData">
            <summary>
            Update graph with new data
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCGraph.InitializeGraph">
            <summary>
            Initialize the graph
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCGraph.ChartIsVisable">
            <summary>
            Returns true if chart is visible
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCGraph.RefreshGraph">
            <summary>
            Refresh graph with latest data
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCGraph.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCGraph.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCGraph.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.HistogramGraph.#ctor">
            <summary>
            constructor for serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.HistogramGraph.#ctor(MPT.USN.CommonLib.Comp.SPC.HistogramData)">
            <summary>
            Constructor
            </summary>
            <param name="histogramData"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.HistogramGraph.ApplyNewData">
            <summary>
            Override to call when data changes
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.HistogramGraph.InitializeGraph">
            <summary>
            Initialize basic graph at startup and when a significant update requires it
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.HistogramGraph.RefreshGraph">
            <summary>
            Refresh graph with latest data
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.HistogramGraph.OnPageLoad">
            <summary>
            Set up for the first time with valid window handle and parental windows established
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.HistogramGraph.ChartIsVisable">
            <summary>
            Test if chart can be seen on monitor.  Used to prevent updates when the chart is not visable
            </summary>
            <returns></returns>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.HistogramGraph.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.HistogramGraph.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.HistogramGraph.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SimulateWarning">
            <summary>
            Form to display simulate condition
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SimulateWarning.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SimulateWarning.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SimulateWarning.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SimulateWarning.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="reason"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SimulateWarning.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="ex"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SimulateWarning.DontAskAgain">
            <summary>
            Return true if we don't want to be asked again
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.RS485Device.Adam4017PlusStub">
            <summary>
            Stubs for AgilentGpib
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.RS485Device.RS485Device">
            <summary>
            Summary description for RS485Input
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.RS485Device.RS485Device.dsMode">
            <summary>
            The read value
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.RS485Device.RS485Device.diDeviceAddress">
            <summary>
            device GPIB Address
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.RS485Device.RS485Device.dsDeviceName">
            <summary>
            Device name
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.RS485Device.RS485Device.dsReadValueString">
            <summary>
            Read data from device
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.RS485Device.RS485Device.dsReadCommandString">
            <summary>
            read command
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.RS485Device.RS485Device.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.RS485Device.RS485Device.#ctor(System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.RS485Device.RS485Device.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add a settings page to this class
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.RS485Device.RS485Device.GetCommand">
            <summary>
            Get specify command from device.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.RS485Device.RS485Device.Controller">
            <summary>
            Access to Controller
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.RS485Device.RS485Device.ReadCommand">
            <summary>
            Access to read command
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.RS485Device.RS485Device.ReadValueString">
            <summary>
            Access to Read string
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.RS485Device.RS485Device.DeviceAddress">
            <summary>
            Access to device GPIB address
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.RS485Device.RS485Device.DeviceName">
            <summary>
            Access to device name
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.RS485Device.Adam4017PlusStub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.RS485Device.Adam4017PlusStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Output.OutputGroupAdv">
            <summary>
            Summary description for OutputGroup.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.IOGroupAdv">
            <summary>
            Summary description for IOGroup.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOGroupAdv.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOGroupAdv.#ctor(System.String,System.Int32,System.Type)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
            <param name="ioChans"></param>
            <param name="chanType"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOGroupAdv.Initialize">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOGroupAdv.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add a settings page to this class
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.OutputGroupAdv.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.OutputGroupAdv.#ctor(System.String,System.Int32,System.Type)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
            <param name="ioChans"></param>
            <param name="chanType"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.OutputGroupAdv.Initialize">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Input.AnalogInputPage">
            <summary>
            Class for AnaolgInput property page
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AnalogInputPage.#ctor(MPT.USN.CommonLib.Comp.IOSystem.Input.AnalogInput)">
            <summary>
            Constructor
            </summary>
            <param name="analogInput"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AnalogInputPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AnalogInputPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AnalogInputPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.AnalogInputPage.CanSafeDispose">
            <summary>
            Indicate whether this can safely disposed when run out of scene
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IDSystem.RFIdV680.V680Stub">
            <summary>
            Stubs for RFID
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IDSystem.RFIdV680.V680Stub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IDSystem.RFIdV680.V680Stub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IDSystem.IDPage">
            <summary>
            LaserPage Class
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IDSystem.IDPage.#ctor(MPT.USN.CommonLib.Comp.IDSystem.ID)">
            <summary>
             Constructor
            </summary>
            <param name="rfid"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IDSystem.IDPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IDSystem.IDPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IDSystem.IDPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.AlertForm">
            <summary>
            Summary description for AlertForm.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.AlertForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.AlertForm.Instance">
            <summary>
            Singleton logic
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.AlertForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.AlertForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.AlertForm.HasFaultAlert">
            <summary>
            Has alert or not.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.AlertForm.faultAlert">
            <summary>
            Alert text to display in window.
            Error messages are appended until window is closed.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.SysUsageForm">
            <summary>
            Class for the graph display of thread monitor
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.SysUsageForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.SysUsageForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.SysUsageForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.SysUsageForm.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.PropertyConfig">
            <summary> TODO
            
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.PropertyConfig.Read(System.Object)">
            <summary> TODO
            
            </summary>
            <param name="that"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.MPTControls.MPTRadioButton">
            <summary>
            Class for radio button
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTRadioButton.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTRadioButton.UpdateVal">
            <summary>
            Update the inner control
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTRadioButton.SelectControl">
            <summary>
            Select the underlying control for input focus
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTRadioButton.GetVal">
            <summary>
            Return the current Value of the underlying control
            </summary>
            <returns></returns>
        </member>
        <member name="F:MPT.USN.CommonLib.MPTControls.MPTRadioButton.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTRadioButton.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTRadioButton.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTRadioButton.ValTag">
            <summary>
            Value if checked
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTRadioButton.Text">
            <summary>
            Property to get/set the text of the checkbox
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTRadioButton.Checked">
            <summary>
            Return if button is checked
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.MPTControls.MPTFilePath2">
            <summary>
            Control to manage filepath
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MPTControls.MPTFilePath2.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTFilePath2.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTFilePath2.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTFilePath2.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTFilePath2.GetVal">
            <summary>
            Return the current Value of the underlying control
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTFilePath2.Init(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Override for initialization
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTFilePath2.UpdateVal">
            <summary>
            Update the Displayed value
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTFilePath2.DoBrowse">
            <summary>
            Will execute browsing as if pushing the control browse button
            this allows the control to be used programatically
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTFilePath2.FolderBrowse">
            <summary>
            Indicates whether string targets a folder or file
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTFilePath2.FileMustExist">
            <summary>
            The file must exist to open
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTFilePath2.ShowFilenameOnly">
            <summary>
            Display only the filename in the edit box
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTFilePath2.FilePath">
            <summary>
            Get/Set the filepath
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.MPTControls.MPTDial">
            <summary>
            Dial indicator user control designed to work with MPT's data types
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MPTControls.MPTDial.DataSelection">
            <summary>
            Access to data Selection
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MPTControls.MPTDial.DataProperties">
            <summary>
            Access to data properties
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTDial.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTDial.Init(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Initialize the control
            </summary>
            <param name="dt">Asscociate with proper data type</param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTDial.UpdateVal">
            <summary>
            Update the value of the control
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MPTControls.MPTDial.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTDial.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTDial.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.LockOut">
            <summary>
            Class for locking out the controls to provide safety for the operator
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.LockOut.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.LockOut.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.LockOut.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.LockOut.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.DBRecord">
            <summary>
            Data base record
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.DBRecord.Name">
            <summary>
            Name of the class for the parent
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.DBRecord.ParentInstance">
            <summary>
            The parential list kept in memory.
            Used for Manual Puts
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.DBRecord.ParentClassName">
            <summary>
            The parential list kept in memory.
            Used for Manual Puts
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.DBRecord.MachineType">
            <summary>
            Type of machine
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.DBRecord.MachineSerialNumber">
            <summary>
            Serial number of machine
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.DBRecord.InstanceNo">
            <summary>
            InstanceNo id for this record
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.DBRecord.fieldList">
            <summary>
            The list of fields
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.DBRecord.#ctor(MPT.USN.CommonLib.DbClassItem,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="classItemParent"></param>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.DBRecord.#ctor(MPT.USN.CommonLib.DbClassItem,MPT.USN.CommonLib.DbClassItem)">
            <summary>
            Constructor
            </summary>
            <param name="classItemParent"></param>
            <param name="classItemOwner"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.DBRecord.#ctor(MPT.USN.CommonLib.DbClassItem)">
            <summary>
            Constructor
            </summary>
            <param name="classItemOwner"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.DBRecord.#ctor(MPT.USN.CommonLib.DbClassItem,System.Data.SqlTypes.SqlDateTime)">
            <summary>
            Constructor
            </summary>
            <param name="classItemOwner"></param>
            <param name="instanceNo"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.DBRecord.ToString">
            <summary>
            Return the name
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.DBRecord.GetDataRec(System.String)">
            <summary>
            Check if this record has the specified data field
            If so, retuen this reference
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.DBRecord.GetDataValue(System.String)">
            <summary>
            Find a data item
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.DBRecord.ParentRecord">
            <summary>
            The parential list kept in memory.
            Used for Manual Puts
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.DBRecord.Dirty">
            <summary>
            Get/set the dirty flag
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.DataPropForm">
            <summary>
            Form to contain data property page
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DataPropForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataPropForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataPropForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataPropForm.#ctor(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Constructor
            </summary>
            <param name="dt"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.VisionJobSettingPage">
            <summary>
            Vision job setting page
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionJobSettingPage.#ctor(MPT.USN.CommonLib.Comp.VisionSystem.VisionJob)">
            <summary>
            Constructor
            </summary>
            <param name="visionJob"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionJobSettingPage.RefreshDataLists">
            <summary>
            Force a refresh of those display box
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.VisionJobSettingPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionJobSettingPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionJobSettingPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.EhternetCamera">
            <summary>
            Summary description for Camera.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.Camera">
            <summary>
            Summary description for Camera.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.Camera.diCameraId">
            <summary>
            Access to the "Camera Id" data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.Camera.dsCameraDescription">
            <summary>
            Access to the "Camera Description" data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.Camera.dsCameraFile">
            <summary>
            Access to the "Camera File" data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.Camera.dbAccept">
            <summary>
            Access to "Accept" data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.Camera.ddExposure">
            <summary>
            Access to "Exposure" data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.Camera.ddContrast">
            <summary>
            Access to "Contrast" data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.Camera.ddBrightness">
            <summary>
            Access to "Brightness" data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.Camera.dsSubToolGroupName">
            <summary>
            Reference to data object for Sub Tool group to run
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.Camera.FailImageSaveEnable">
            <summary>
            Enable Fail Image Save 
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.Camera.FailImageSavePath">
            <summary>
            Loaction of fail image
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.Camera._dsPathForSimulatedImages">
            <summary>
            Path for simulation images
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.Camera._dsVisionToolPath">
            <summary>
            Absolute path for vision tools
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.Camera._dsVisionToolTemplateName">
            <summary>
            Name of vision tool template
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.Camera.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.Camera.#ctor(System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.Camera.Initialize">
            <summary>
            Initialization for Camera class
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.Camera.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add a settings page to the 'tab' of this inherited class.
            If skip is set to true, then any pages assigned to this inherited 
            class will be skipped.
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.Camera.Acquire(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Do the acquisition
            </summary>
            <param name="mcCaller"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.Camera.SwitchLive(System.Windows.Forms.Control)">
            <summary>
            Toggle between live/no live
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.Camera.SizeCameraWindow(System.Windows.Forms.Control,System.Drawing.Size)">
            <summary>
            Resize the camera window
            </summary>
            <param name="parent"></param>
            <param name="size"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.Camera.CameraId">
            <summary>
            Access to Camera parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.Camera.CameraDescription">
            <summary>
            Access to Camera 
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.Camera.CameraFile">
            <summary>
            Get/Set the camera file
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.Camera.Accept">
            <summary>
            Get/Set the Accept flag
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.Camera.SubToolGroupName">
            <summary>
            Reference to Sub Tool group name to run
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.Camera.visionSysRef">
            <summary>
            Returns the reference to the vision system
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.Camera.PathForSimulatedImages">
            <summary>
            Get the path for simulation images in DataString (for continuous keeping the reference)
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.EhternetCamera.dsVideoFormat">
            <summary>
            Video format information
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.EhternetCamera.ddHeartBeatTimeout">
            <summary>
            The read timeout
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.EhternetCamera.ddPercentBandwidth">
            <summary>
            The read timeout
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.EhternetCamera.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.EhternetCamera.#ctor(System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem">
            <summary>
            Summary description for ScanSystem.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.dsGalvoIO">
            <summary>
            Associate IO to Galvo On/Off switch
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.dsCorrectionFile">
            <summary>
            The 'CorrectionFile' data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.dsProgramFile">
            <summary>
            The 'ProgramFile' data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.dbGalvoReverseTop">
            <summary>
            Reverse Top orientation
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.dbGalvoReverseBot">
            <summary>
            Reverse Bot orientation
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.ddGalvoTopYScale">
            <summary>
            The 'GalvoView' data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.ddGalvoTopXScale">
            <summary>
            The 'GalvoView' data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.ddKx">
            <summary>
            The 'Kx factor
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.ddKy">
            <summary>
            The 'Ky factor
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.ddGalvoView">
            <summary>
            The 'GalvoView' data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.ddPhiOffset">
            <summary>
            The 'PhiOffset' data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.ddXOffset">
            <summary>
            The 'XOffset' data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.ddYOffset">
            <summary>
            The 'YOffset' data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.ddJumpDelay">
            <summary>
            The 'JumpDelay' data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.ddMarkDelay">
            <summary>
            The 'MarkDelay' data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.ddPolyDelay">
            <summary>
            The 'PolyDelay' data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.ddLaserOnDelay">
            <summary>
            The 'LaserOnDelay' data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.ddLaserOffDelay">
            <summary>
            The 'LaserOffDelay' data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.ddFrequency">
            <summary>
            The 'Frequency' data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.ddPulse">
            <summary>
            The 'Pulse' data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.ddJumpSpeed">
            <summary>
            The 'Jump Speed' data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.ddMarkSpeed">
            <summary>
            The 'Mark Speed' data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.dbCheckCompleteExecute">
            <summary>
            Set galvo check completed after execute command list.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.diLaserMode">
            <summary>
            Define machine type for initial. Set 4 for DSSA and 1 for Welder.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.diFPK">
            <summary>
            Length of the FirstPulseKiller signal in bits; 1 bit = 1/8 micro sec.
            Defaults = 1 bit.( 8MHz)
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.ddLaserOnTime">
            <summary>
            turn laser on for a specific time interval.
            time interval in bits (unsign 16 bit value); 1 bit = 10 micro sec.
            Allow ranged: [0 - 65500]
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.ddJumpTime">
            <summary>
            
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.#ctor(System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.Initialize">
            <summary>
            Initialize this component
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add pages to this component
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.StartScan(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.ScanSystem.Scanner,MPT.USN.CommonLib.Comp.ScanSystem.ScanLine[])">
            <summary>
            Perform the scan
            </summary>
            <param name="mc"></param>
            <param name="scan"></param>
            <param name="lines"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.DoJumpAbs(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.ScanSystem.Scanner,System.Double,System.Double,System.Boolean)">
            <summary>
            Makes absolute scanner moves in X and Y (utilizes vision correction)
            </summary>
            <param name="mc"></param>
            <param name="scan"></param>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="top"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.ScanSpot(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner,MPT.USN.CommonLib.Data.DataUShort)">
            <summary>
            Start to mark a spot.
            </summary>
            <param name="mc"></param>
            <param name="scanner"></param>
            <param name="commandListNumber"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.DoInitialCommandList(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner)">
            <summary>
            Initial command list.
            </summary>
            <param name="mc"></param>
            <param name="scanner"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.DoInitialCommandSingleList(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner,System.Int32)">
            <summary>
            Initial command list for Single Scan Spot.
            </summary>
            <param name="mc"></param>
            <param name="scanner"></param>
            <param name="spotID"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.SetMatrix(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set (2x2) matrix transformation for vector outputs.
            </summary>
            <param name="mc"></param>
            <param name="scanner"></param>
            <param name="m11">matrix coefficient.</param>
            <param name="m12">matrix coefficient.</param>
            <param name="m21">matrix coefficient.</param>
            <param name="m22">matrix coefficient.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.DirectJumpToXY(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner,System.Int16,System.Int16)">
            <summary>
            Directjump to x,y position.
            </summary>
            <param name="mc"></param>
            <param name="scanner"></param>
            <param name="xPos"></param>
            <param name="yPos"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.GetXYPosition(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner)">
            <summary>
            Get current x,y position.
            </summary>
            <param name="mc"></param>
            <param name="scanner"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.GalvoIO">
            <summary>
            Associate IO to Galvo On/Off switch
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.CorrectionFile">
            <summary>
            The 'CorrectionFile' data value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.ProgramFile">
            <summary>
            The 'ProgramFile' data value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.GalvoReverseTop">
            <summary>
            Reverse Top orientation
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.GalvoReverseBot">
            <summary>
            Reverse Bot orientation
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.GalvoTopYScale">
            <summary>
            The 'GalvoView' data value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.GalvoTopXScale">
            <summary>
            The 'GalvoView' data value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.Kx">
            <summary>
            The 'Kx factor
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.Ky">
            <summary>
            The 'Ky factor
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.GalvoView">
            <summary>
            The 'GalvoView' data value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.PhiOffset">
            <summary>
            The 'PhiOffset' data value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.XOffset">
            <summary>
            The 'XOffset' data value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.YOffset">
            <summary>
            The 'YOffset' data value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.JumpDelay">
            <summary>
            The 'JumpDelay' data value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.MarkDelay">
            <summary>
            The 'MarkDelay' data value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.PolyDelay">
            <summary>
            The 'PolyDelay' data value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.LaserOnDelay">
            <summary>
            The 'LaserOnDelay' data value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.LaserOffDelay">
            <summary>
            The 'LaserOffDelay' data value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.Frequency">
            <summary>
            The 'Frequency' data value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.Pulse">
            <summary>
            The 'Pulse' data value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.JumpSpeed">
            <summary>
            The 'JumpSpeed' data value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.MarkSpeed">
            <summary>
            The 'Mark Speed' data value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.FPK">
            <summary>
            Length of the FirstPulseKiller signal in bits; 1 bit = 1/8 micro sec.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.LaserOnTimeInterval">
            <summary>
            Turn laser on for a specific time interval.
            </summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.evOnScan">
            <summary>Event for OnScan</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.evDoJumpAbs">
            <summary>Event for Scanner absolute jump move</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.evDoInitialCommandList">
            <summary>
            event for initial command list. Must call before start scan spot, only first time after change pattern.
            </summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.evDoInitialCommandSingleList">
            <summary>
            event for initial single command list. Must call before start scan spot, only first time after change pattern.
            </summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.evOnScanSpot">
            <summary>
            event for mark spots.
            </summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.evOnSetMatrix">
            <summary>
            event for set (2x2) transformation for output vector.
            </summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.evOnDirectJumpToXY">
            <summary>
            event for direct jump to x,y position.
            </summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.evGetXYPosition">
            <summary>
            event for get current x,y position.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.DelegateParmSMScanner">
            <summary>
            For scanner 3rd party access
            </summary>
            <param name="mc"></param>
            <param name="scan"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.DelegateParmSMScannerLines">
            <summary>
            For scanner 3rd party access
            </summary>
            <param name="mc"></param>
            <param name="scan"></param>
            <param name="lines"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.DelegateParmSMScannerXYTop">
            <summary>
            For scanner 3rd party access
            </summary>
            <param name="mc"></param>
            <param name="scan"></param>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="top"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.DelegateParmSMScannerSpots">
            <summary>
            For scanner 3rd party access. Welder machine only.
            </summary>
            <param name="mc"></param>
            <param name="scan"></param>
            <param name="commandListNumber"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.DelegateParmSMInitialCommandList">
            <summary>
            For initial command list for pattern and dummy scan.
            </summary>
            <param name="mc"></param>
            <param name="scan"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.DelegateParmSMInitialCommandSingleList">
            <summary>
            For initial command list for single pattern.
            </summary>
            <param name="mc"></param>
            <param name="scan"></param>
            <param name="spotID"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.DelegateParmSMSetMatrix">
            <summary>
            Set a (2x2) transformation matrix which will be used for all subsequent vector outputs.
            </summary>
            <param name="mc"></param>
            <param name="scan"></param>
            <param name="m11">matrix coefficient floating point value.</param>
            <param name="m12">matrix coefficient floating point value.</param>
            <param name="m21">matrix coefficient floating point value.</param>
            <param name="m22">matrix coefficient floating point value.</param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.DelegateParmSMGoToXY">
            <summary>
            Direct jump to x, y position.
            </summary>
            <param name="mc"></param>
            <param name="scan"></param>
            <param name="xPos">x position in mm</param>
            <param name="yPos">y position in mm</param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem.DelegateParmSMGetXYPosition">
            <summary>
            Get current x,y position.
            </summary>
            <param name="mc"></param>
            <param name="scan"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotaryPage">
            <summary>
            Page for the Rotary axis
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotaryPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotaryPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotaryPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotaryPage.#ctor(MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotary)">
            <summary>
            Constructor
            </summary>
            <param name="axisR"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotaryPage.UpdateControls">
            <summary>
            Update the properties of some controls
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotaryPage.CanSafeDispose">
            <summary>
            Indicate whether this can safely disposed when run out of scene
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotary">
            <summary>
            Class for rotary axis
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotary.dbLowAirFault">
            <summary>
            Fault condition
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotary.ddCurrentSpeed">
            <summary>
            Get the Current Speed data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotary.ddAbsolutePos">
            <summary>
            Get the Current Absolute Pos value
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotary._ddRelativePos">
            <summary>
            The relative position, should be always in the range of [0, 360) deg
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotary._ddLowerReadyPos">
            <summary>
            Lower rotary position to be consider ready for stations, sensors ... to work
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotary._ddUpperReadyPos">
            <summary>
            Upper rotary position to be consider ready for stations, sensors ... to work
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotary.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotary.#ctor(System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotary.#ctor(System.Int32,MPT.USN.CommonLib.Enums.AxisGroup)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="axisGroup"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotary.Initialize">
            <summary>
             Initialize the component
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotary.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add a settings page to this class
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotary.RunContinous(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
            Run axis continously
            </summary>
            <param name="caller"></param>
            <param name="ddSpeed"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotary.SetAccel(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
             Set the acceleration
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotary.MoveAbs(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataDouble,MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
            Move axis absolute
            </summary>
            <param name="caller"></param>
            <param name="ddPos"></param>
            <param name="ddSpeed"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotary.MoveRel(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataDouble,MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
            Move axis relative
            </summary>
            <param name="caller"></param>
            <param name="ddTargetPos"></param>
            <param name="ddTargetSpeed"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotary.MoveRelLimitWait(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataDouble,MPT.USN.CommonLib.Data.DataDouble,MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
            Move axis relative with limited wait time
            </summary>
            <param name="caller"></param>
            <param name="ddTargetPos"></param>
            <param name="ddTargetSpeed"></param>
            <param name="ddMillisecondWait"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotary.ResetAbsolutePos">
            <summary>
            Reset the absolute position
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotary.AdjustAbsolutePos(System.Double,System.Double)">
            <summary>
            Adjust the absolute position
            </summary>
            <param name="curPos">deg</param>
            <param name="prevPos">deg</param>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotary.CurrentSpeed">
            <summary>
            Get the Current Speed value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotary.IsAtReadyPosition">
            <summary>
            Get whether this axis is at ready position
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotary.RelativePositionInDegree">
            <summary>
            Get the relative position in degree
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisRotary.AbsolutePos">
            <summary>
            Get the Current Absolute Pos value
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Output.AcqOutputPage">
            <summary>
            Summary description for AcqOutputPage.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Output.AcqOutputPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.AcqOutputPage.#ctor(MPT.USN.CommonLib.Comp.IOSystem.Output.AcqOutput)">
            <summary>
            Constructor
            </summary>
            <param name="acqOutput"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.AcqOutputPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.AcqOutputPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.IOAnalogGroupPage">
            <summary>
            Class to contain group of inputs or outputs
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOAnalogGroupPage.#ctor(MPT.USN.CommonLib.Comp.IOSystem.IOGroup)">
            <summary>
            Constructor
            </summary>
            <param name="ioGroup"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.IOAnalogGroupPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOAnalogGroupPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOAnalogGroupPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.EnvironmentalSystem.WatlowF4Stub">
            <summary>
            Stub for WatlowF4
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.EnvironmentalSystem.EnvironmentalSystem">
            <summary>
            Summary description for EnvironmentalSystem.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.EnvironmentalSystem.EnvironmentalSystem.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.EnvironmentalSystem.EnvironmentalSystem.#ctor(System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.EnvironmentalSystem.EnvironmentalSystem.dfTemperatureSetpoint">
            <summary>
            Access to the "Temperature Set Point" data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.EnvironmentalSystem.EnvironmentalSystem.dfCurrentTemperature">
            <summary>
            Access to the Current Temerature data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.EnvironmentalSystem.EnvironmentalSystem.dfHumiditySetpoint">
            <summary>
            Access to the "Humidity Set Point" data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.EnvironmentalSystem.EnvironmentalSystem.dfCurrentHumidity">
            <summary>
            Access to the Current Humidity data object
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.EnvironmentalSystem.EnvironmentalSystem.OnSimEventsForComponent(MPT.USN.CommonLib.Comp.ComponentBase)">
            <summary>
            Add any events for simulation
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.EnvironmentalSystem.EnvironmentalSystem.OnUpdateCurrentTemerature(MPT.USN.CommonLib.Comp.EnvironmentalSystem.EnvironmentalSystem)">
            <summary>
            Simulate the "Current Temerature" updating
            </summary>
            <param name="envSys"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.EnvironmentalSystem.EnvironmentalSystem.OnUpdateCurrentHumidity(MPT.USN.CommonLib.Comp.EnvironmentalSystem.EnvironmentalSystem)">
            <summary>
            Simulate the "Current Humidity" updating
            </summary>
            <param name="envSys"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.EnvironmentalSystem.EnvironmentalSystem.WriteRegister(System.Int32,System.Int32)">
            <summary>
            Write value to register
            </summary>
            <param name="address"></param>
            <param name="value"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.EnvironmentalSystem.EnvironmentalSystem.ReadRegisters(System.Int32,System.Int32,System.Int32[]@)">
            <summary>
            Read data from registers
            </summary>
            <param name="address"></param>
            <param name="count"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.EnvironmentalSystem.EnvironmentalSystem.Start">
            <summary>
            Start the oven
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.EnvironmentalSystem.EnvironmentalSystem.Stop">
            <summary>
            Stop the Oven
            </summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.EnvironmentalSystem.EnvironmentalSystem.evWriteRegister">
            <summary>
            Event for Writing to serial
            </summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.EnvironmentalSystem.EnvironmentalSystem.evReadRegisters">
            <summary>
            Event for Writing to serial
            </summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.EnvironmentalSystem.EnvironmentalSystem.evStart">
            <summary>
            Event for Start command
            </summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.EnvironmentalSystem.EnvironmentalSystem.evStop">
            <summary>
            Event for Stop command
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.EnvironmentalSystem.EnvironmentalSystem.TemperatureSetpoint">
            <summary>
            Access to the "Temperature Setpoint" parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.EnvironmentalSystem.EnvironmentalSystem.CurrentTemperature">
            <summary>
            Access to the Current Temerature parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.EnvironmentalSystem.EnvironmentalSystem.HumiditySetpoint">
            <summary>
            Access to the "Humidity Setpoint" parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.EnvironmentalSystem.EnvironmentalSystem.CurrentHumidity">
            <summary>
            Access to the Current Humidity parameter
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.EnvironmentalSystem.EnvironmentalSystem.DelegateParmEnvironmental">
            <summary>
            Environmental class object data change
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.EnvironmentalSystem.EnvironmentalSystem.DelegateParmIntInt">
            <summary>
            Delegate for Writing command
            </summary>
            <param name="address"></param>
            <param name="value"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.EnvironmentalSystem.EnvironmentalSystem.DelegateParmIntIntIntArr">
            <summary>
            Delegate with Int, Int, ref Int[] parameters
            </summary>
            <param name="address"></param>
            <param name="count"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.EnvironmentalSystem.WatlowF4Stub.#ctor">
            <summary>
            Constructor for serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.EnvironmentalSystem.WatlowF4Stub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPL.SPLSuspension">
            <summary>
            Back end suspension
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLSuspension._partColor">
            <summary>
            Color for this part
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLSuspension.dePartStatus">
            <summary>
            Status of the part
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLSuspension.diSampleNo">
            <summary>
            Keep track of sample number
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLSuspension.ddIndexPos">
            <summary>
            Current index position for this suspension.
            This is reflective of the indexing motor absolute position
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLSuspension._diSoftIndexPos">
            <summary>
            The soft index position for this suspension
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLSuspension._dsSuspensionID">
            <summary>
            The ID of this suspension
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLSuspension.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLSuspension.#ctor(System.Int32)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="suspId"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLSuspension.#ctor(System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="suspId"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLSuspension.Initialize">
            <summary>
            Initialize this component
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLSuspension.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add pages to this component
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLSuspension.PackInRecurse(MPT.USN.CommonLib.MPTBase)">
            <summary>
            Change old usage of CurIndex
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLSuspension.Prepare(System.Int32)">
            <summary>
            Prepare this suspension for entrance to stations
            </summary>
            <param name="startingIndex"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLSuspension.Clone(System.Type)">
            <summary>
            Clone this class
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLSuspension.BumpSoftwareIndex">
            <summary>
            Bump the soft index of this sus by 1
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLSuspension.PartColor">
            <summary>
            Get/set the color
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLSuspension.partColorHtml">
            <summary>
            Serializes the 'Part color' Color to XML. 
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLSuspension.PartStatus">
            <summary>
            Return the part status
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLSuspension.Processed">
            <summary>
            Returns true if a station has completed using this suspension
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLSuspension.IsPartGood">
            <summary>
            Returns true if part is good
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLSuspension.CurIndex">
            <summary>
            Access to the "Current Index"
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLSuspension.CurSoftIndex">
            <summary>
            Get the "Current Soft Index"
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLSuspension.SuspensionID">
            <summary>
            Get the ID of this suspension
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPL.SPLSuspension.ePartStatus">
            <summary>
            Status for Part
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLSuspension.ePartStatus.Missing">
            <summary>Missing</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLSuspension.ePartStatus.Good">
            <summary>Good</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLSuspension.ePartStatus.FailedValidation">
            <summary>Failed validation</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLSuspension.ePartStatus.None">
            <summary>None</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.Axis.SPLPneumaticAxis">
            <summary>
            Base class for all pnematic actuators
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.SPLPneumaticAxis.#ctor">
            <summary>
            Default constructor for serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.SPLPneumaticAxis.#ctor(System.Int32,MPT.USN.CommonLib.Enums.AxisDir)">
            <summary>
            Constructor for initial definition
            </summary>
            <param name="axisId"></param>
            <param name="dir"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.SPLPneumaticAxis.Initialize">
            <summary>
            Initialize the position
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.Axis.LoadPinActuator">
            <summary>
            SW Axis for the Load Pin Actuator
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.LoadPinActuator.#ctor">
            <summary>
            Default constructor for serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.LoadPinActuator.#ctor(System.Int32)">
            <summary>
            Constructor for initial definition
            </summary>
            <param name="axisId"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.LoadPinActuator.Initialize">
            <summary>
            Initialize the position
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.Axis.InFeedPinsActuator">
            <summary>
            SW Axis for the Feed Pin Actuator
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.InFeedPinsActuator.#ctor">
            <summary>
            Default constructor for serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.InFeedPinsActuator.#ctor(System.Int32)">
            <summary>
            Constructor for initial definition
            </summary>
            <param name="axisId"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.InFeedPinsActuator.Initialize">
            <summary>
            Initialize the position
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.Axis.InFeedSlideActuator">
            <summary>
            SW Axis for the Feed Pin Actuator
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.InFeedSlideActuator.#ctor">
            <summary>
            Default constructor for serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.InFeedSlideActuator.#ctor(System.Int32)">
            <summary>
            Constructor for initial definition
            </summary>
            <param name="axisId"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.InFeedSlideActuator.Initialize">
            <summary>
            Initialize the position
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.Axis.UnLoadPinActuator">
            <summary>
            SW Axis for the Load Pin Actuator
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.UnLoadPinActuator.#ctor">
            <summary>
            Default constructor for serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.UnLoadPinActuator.#ctor(System.Int32)">
            <summary>
            Constructor for initial definition
            </summary>
            <param name="axisId"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.UnLoadPinActuator.Initialize">
            <summary>
            Initialize the position
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.Axis.OutFeedPinsActuator">
            <summary>
            SW Axis for the Feed Pin Actuator
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.OutFeedPinsActuator.#ctor">
            <summary>
            Default constructor for serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.OutFeedPinsActuator.#ctor(System.Int32)">
            <summary>
            Constructor for initial definition
            </summary>
            <param name="axisId"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.OutFeedPinsActuator.Initialize">
            <summary>
            Initialize the position
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.Axis.OutFeedSlideActuator">
            <summary>
            SW Axis for the Feed Pin Actuator
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.OutFeedSlideActuator.#ctor">
            <summary>
            Default constructor for serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.OutFeedSlideActuator.#ctor(System.Int32)">
            <summary>
            Constructor for initial definition
            </summary>
            <param name="axisId"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.OutFeedSlideActuator.Initialize">
            <summary>
            Initialize the position
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.Axis.MCPusherActuator">
            <summary>
            SW Axis for the Mc pusher
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.MCPusherActuator.#ctor">
            <summary>
            Default constructor for serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.MCPusherActuator.#ctor(System.Int32)">
            <summary>
            Constructor for initial definition
            </summary>
            <param name="axisId"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.MCPusherActuator.Initialize">
            <summary>
            Initialize the position
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPC.XBarRChartGraph">
            <summary>
            Basic Control Chart Graph
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.XBarRChartGraph.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.XBarRChartGraph.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.XBarRChartGraph.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.XBarRChartGraph.Demo">
            <summary>
            To run demo of graph with fake data (handled by subclass)
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.XBarRChartGraph.#ctor">
            <summary>
            constructor for serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.XBarRChartGraph.#ctor(MPT.USN.CommonLib.Comp.SPC.XBarRChartData)">
            <summary>
            Constructor
            </summary>
            <param name="xBarRChartData"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.XBarRChartGraph.ApplyNewData">
            <summary>
            Update graph with new data
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.XBarRChartGraph.InitializeGraph">
            <summary>
            Initialize the graph
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.XBarRChartGraph.RefreshGraph">
            <summary>
            Refresh graph with latest data
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.XBarRChartGraph.OnPageLoad">
            <summary>
            Set up for the first time with valid window handle and parental windows established
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.XBarRChartGraph.ChartIsVisable">
            <summary>
            Test for page visiblility
            </summary>
            <returns></returns>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPC.RunChartGraph">
            <summary>
            Basic Run Chart Graph
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.RunChartGraph.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.RunChartGraph.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.RunChartGraph.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.RunChartGraph.#ctor">
            <summary>
            constructor for serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.RunChartGraph.#ctor(MPT.USN.CommonLib.Comp.SPC.RunChartData)">
            <summary>
            Constructor
            </summary>
            <param name="runChartData"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.RunChartGraph.ApplyNewData">
            <summary>
            Update graph with new data
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.RunChartGraph.InitializeGraph">
            <summary>
            Initialize the graph
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.RunChartGraph.RefreshGraph">
            <summary>
            Refresh graph with latest data
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.RunChartGraph.OnPageLoad">
            <summary>
            Set up for the first time with valid window handle and parental windows established
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.RunChartGraph.ChartIsVisable">
            <summary>
            Returns true if chart is visible
            </summary>
            <returns></returns>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPC.ControlChartResults">
            <summary>
            Class to manage the SPC results
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.ControlChartResults.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.ControlChartResults.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.ControlChartResults.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.ControlChartResults.#ctor(MPT.USN.CommonLib.Comp.SPC.ControlChartData)">
            <summary>
             Constructor
            </summary>
            <param name="controlChartData"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpot">
            <summary>
            Class for weld spot.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpot.ddPositionX">
            <summary>
            Access weld spot position X
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpot.ddPositionY">
            <summary>
            Access weld spot position Y
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpot.ddJumpSpeed">
            <summary>
            Duration of the complete jump in microsec.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpot.diWeldSpotID">
            <summary>
            Weld spot ID
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpot.dshLaserOnInterval">
            <summary>
            Turns on the laser for a specified time interval. 
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpot.diSpotRadius">
            <summary>
            Set spot radius for calculate area.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpot.#ctor">
            <summary>
            Constructor for serialize.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpot.#ctor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Constuctor for first time creation.
            </summary>
            <param name="spotID"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="speed"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpot.#ctor(MPT.USN.CommonLib.Comp.ScanSystem.WeldSpot)">
            <summary>
            Construct Weldspot instance from another weld spot.
            </summary>
            <param name="spot"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpot.ResetWeldSpot">
            <summary>
            Reset Setting.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpot.IsContainPoint(System.Drawing.Point,MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner)">
            <summary>
            check spot area contain the point or not.
            </summary>
            <param name="location"></param>
            <param name="_scanner"></param>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpot.PositionX">
            <summary>
            Access weld spot x position
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpot.PositionY">
            <summary>
            Access weld spot y position
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpot.JumpSpeed">
            <summary>
            Duration of the complete jump in microsec.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpot.WeldSpotID">
            <summary>
            Weld spot ID
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpot.LaserONInterval">
            <summary>
            Turns on the laser for a specified time interval. 
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpot.SpotRadias">
            <summary>
            Radius for calculate area.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpot.SpotArea">
            <summary>
            Area of weld spot for chaeck when click.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.PulseSystem.PulseSector">
            <summary>
            
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.PulseSector.ddSectorWidth">
            <summary>
            Access sector width (ms)
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.PulseSector.ddSectorHeight">
            <summary>
            Access Sector height (% peak power).
            </summary> 
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.PulseSector.diSectorID">
            <summary>
            Identify sector ID
            </summary>  
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseSector.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseSector.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="sectorID"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseSector.ResetSector">
            <summary>
            
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseSector.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.PulseSector.SectorWidth">
            <summary>
            Sector width property
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.PulseSector.SectorHeight">
            <summary>
            Sector height property
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.PulseSector.SectorID">
            <summary>
            Sector ID property
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.PulseSector.Active">
            <summary>
            Get sector Active or not.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystemPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystemPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystemPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MotionSystemPage.#ctor(MPT.USN.CommonLib.Comp.MotionSystem.MotionSystem)">
            <summary>
            Constructor
            </summary>
            <param name="motionSystem"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Output.FreqOutput">
            <summary>
            Summary description for AnalogOutput.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.FreqOutput.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.FreqOutput.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.FreqOutput.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
            <param name="channelPrefix"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.FreqOutput.Initialize">
            <summary>
            Initialize this component
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.FreqOutput.SetOutput(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
            Write the output
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Output.TimeOutput">
            <summary>
            Summary description for AnalogOutput.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.TimeOutput.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.TimeOutput.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.TimeOutput.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
            <param name="channelPrefix"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.TimeOutput.Initialize">
            <summary>
            Initialize this component
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.TimeOutput.SetOutput(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
            Write the output
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibControllerSystem">
            <summary>
            Class to provide access to third-party String Command System Driver.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibControllerSystem.diControllerId">
            <summary>
            Controller Id
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibControllerSystem.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibControllerSystem.#ctor(System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibControllerSystem.OnEventsForComponent(MPT.USN.CommonLib.Comp.ComponentBase)">
            <summary>
            OnEventsForComponent
            </summary>
            <param name="comp"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibControllerSystem.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add a settings page to this class
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibControllerSystem.ControllerId">
            <summary>
            Access to Controller ID
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.BindableArrayList">
            <summary>
            Class for bindable arraylist
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.BindableArrayList.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.BindableArrayList.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.BindableArrayList.#ctor(System.Collections.ICollection)">
            <summary>
            Constructor
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.BindableArrayList.AddIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.BindableArrayList.AddNew">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.BindableArrayList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="direction"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.BindableArrayList.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.BindableArrayList.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.BindableArrayList.RemoveSort">
            <summary>
            
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.BindableArrayList.Add(System.Object)">
            <summary>
            add single object to arrayList
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.BindableArrayList.AddRange(System.Collections.ICollection)">
            <summary>
            
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.BindableArrayList.Remove(System.Object)">
            <summary>
            Remove object from ArrayList
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.BindableArrayList.RemoveAt(System.Int32)">
            <summary>
            remove object by index from ArraList;
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.BindableArrayList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            remove object range from ArrayList
            </summary>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.BindableArrayList.Clear">
            <summary>
            Clear all object from ArrayList
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.BindableArrayList.Insert(System.Int32,System.Object)">
            <summary>
            Insert Object
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.BindableArrayList.UpdateBinderControl">
            <summary>
            Update data to binder control.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.BindableArrayList.AllowEdit">
            <summary>
            
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.BindableArrayList.AllowNew">
            <summary>
            
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.BindableArrayList.AllowRemove">
            <summary>
            
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.BindableArrayList.IsSorted">
            <summary>
            
            </summary>
        </member>
        <member name="E:MPT.USN.CommonLib.BindableArrayList.ListChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.BindableArrayList.SortDirection">
            <summary>
            
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.BindableArrayList.SortProperty">
            <summary>
            SortProperty
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.BindableArrayList.SupportsChangeNotification">
            <summary>
            
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.BindableArrayList.SupportsSearching">
            <summary>
            
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.BindableArrayList.SupportsSorting">
            <summary>
            
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.AlertItem">
            <summary>
            Class to fault alert
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.AlertItem.#ctor(MPT.USN.CommonLib.SMMethodCall,System.String,System.String,MPT.USN.CommonLib.MPTBase.DelegateAlertCallback,MPT.USN.CommonLib.MPTBase.DelegateAlertCallback,System.Object)">
            <summary>
             Full constructor
            </summary>
            <param name="mc"></param>
            <param name="sDescription"></param>
            <param name="sButton"></param>
            <param name="remedy"></param>
            <param name="clear"></param>
            <param name="tag"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.AlertItem.#ctor(MPT.USN.CommonLib.SMMethodCall,System.String,System.String,MPT.USN.CommonLib.MPTBase.DelegateAlertCallback,MPT.USN.CommonLib.MPTBase.DelegateAlertCallback)">
            <summary>
             Optional constructor
            </summary>
            <param name="mc"></param>
            <param name="sDescription"></param>
            <param name="sButton"></param>
            <param name="remedy"></param>
            <param name="clear"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.AlertItem.#ctor(System.String)">
            <summary>
             Description constructor
            </summary>
            <param name="sDescription"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.AlertItem.#ctor(MPT.USN.CommonLib.SMMethodCall,System.String)">
            <summary>
            Alert has been called straight from state machine
            </summary>
            <param name="mc"></param>
            <param name="sDescription"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.AlertItem.RemedyFault(System.String)">
            <summary>
            
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.AlertItem.Remedy">
            <summary>
            Remedy the fault
            </summary>
            <returns>True if no problems</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.AlertItem.Release">
            <summary>
            Release the fault
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.AlertItem.Retry">
            <summary>
            ReExecute task
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.AlertItem.ToString">
            <summary>
            Define default text
            </summary>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.AlertItem.Description">
            <summary>
            Get the description
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.AlertItem.State">
            <summary>
            Get the calling State
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.AlertItem.RemedyCallback">
            <summary>
            Get the Remdy callback delegate
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.AlertItem.ButtonText">
            <summary>
            Get the ButtonText
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.AlertItem.Tag">
            <summary>
            Get the Tag
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.AlertItem.MC">
            <summary>
            Get reference to the SMMethodCall member
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.AlertItem.FromProcess">
            <summary>
            Returns true if Alert is straight from process
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.AlertItem.StopOnly">
            <summary>
            Set to true to set the default radio button to "Stop"
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.ThreadsInsert">
            <summary>
            Class for Thread management
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.ThreadsInsert.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.ThreadsInsert.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.ThreadsInsert.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.ThreadsInsert.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.ThreadsInsert.CompMgr">
            <summary>
            Easy access to component manager
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Process.LogicCondition">
            <summary>
            Summary description for LogicCondition.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.LogicCondition.expression">
            <summary>
            Expression to evalute
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.LogicCondition.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.LogicCondition.#ctor(MPT.USN.CommonLib.Process.ProcessBase,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="procOwner"></param>
            <param name="exp"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.LogicCondition.Initialize">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.LogicCondition.OnEnterState">
            <summary>
            Entering the state
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.LogicCondition.OnLeavingState">
            <summary>
            Leaving the state
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.LogicCondition.Evaluate">
            <summary>
            Command to evaluate the logic expression
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.LogicCondition.ConvertUnknownToDataDouble(System.String,System.Boolean@)">
            <summary>
            We want to normalize expression for ease of condition evaluation
            This is done by converting left and right operands to type of double
            </summary>
            <param name="strOp"></param>
            <param name="reEval"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.LogicCondition.PackInRecurse(MPT.USN.CommonLib.Process.ProcessBase)">
            <summary>
            After file read
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.LogicCondition.Dump(System.IO.StreamWriter,System.Int32)">
            <summary>
            Dump the state of the conditional statements
            </summary>
            <param name="f"></param>
            <param name="indentation"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.LogicCondition.Clone(System.Type)">
            <summary>
            Clone Logic Condition
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.LogicCondition.Expression">
            <summary>
            Property to access Expression
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.LogicCondition.GotoVal">
            <summary>
            The bool value for alert condition
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.LogicCondition.SerGotoVal">
            <summary>
            Serialize the value
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.MPTControls.MPTTextBoxWithUnits">
            <summary>
            Summary description for PositionCtl.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:MPT.USN.CommonLib.MPTControls.MPTTextBoxWithUnits.components" -->
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTTextBoxWithUnits.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTTextBoxWithUnits.Init(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Initialize the control
            </summary>
            <param name="dt">Asscociate with proper data type</param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTTextBoxWithUnits.UpdateVal">
            <summary>
            Update the Displayed value
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTTextBoxWithUnits.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTTextBoxWithUnits.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTTextBoxWithUnits.SelectEditControl">
            <summary>
            Select the edit control
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTTextBoxWithUnits.Save">
            <summary>
            Validate and save
            </summary>
            <returns>true if validation is successful</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTTextBoxWithUnits.GetVal">
            <summary>
            Return the current Value of the underlying control
            </summary>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTTextBoxWithUnits.AllowUnitChangeViaGUI">
            <summary>
            Get/Set whether this allow user changing unit via GUI
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTTextBoxWithUnits.DisplayPrecision">
            <summary>
            Get/Set the display precision
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTTextBoxWithUnits.SciencetificDisplay">
            <summary>
            Access to Sciencetific Display
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTTextBoxWithUnits.Reference">
            <summary>
            Get/Set the reference property
            </summary>
        </member>
        <member name="E:MPT.USN.CommonLib.MPTControls.MPTTextBoxWithUnits.OnKeyReturn">
            <summary>
            OnChange event
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTTextBoxWithUnits.ReadOnly">
            <summary>
            Property to get/set read only state
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTTextBoxWithUnits.Text">
            <summary>
            Text property of edit control
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTTextBoxWithUnits.TextWithUnits">
            <summary>
            Get/Set the text box with units (If appropriate)
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTTextBoxWithUnits.UnitType">
            <summary>
            Get UnitType
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTTextBoxWithUnits.UnitTypeRespect">
            <summary>
            Get UnitTypeRespect
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.DataDouble">
            <summary>
            Wrapper for System.Double
            <para/>
            <para/>
            <list type="table"> 
            <listheader><term>Topics...</term></listheader>
            <item><term><see cref="P:MPT.USN.CommonLib.Data.DataType.UnitType">Using Units</see></term></item>
            </list>
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDouble.GetDbVal">
            <summary>
            Get the value in internal units
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDouble.GetVal(MPT.USN.CommonLib.Enums.UnitTypes)">
            <summary>
            Return the value as an Object
            </summary>
            <param name="ut"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDouble.#ctor">
            <summary>
            Constructor for Xml serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDouble.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDouble.#ctor(System.String,System.Double)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
            <param name="dVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDouble.#ctor(System.String,System.Double,MPT.USN.CommonLib.Enums.UnitTypes)">
            <summary>
            Constructor for Distance setting
            </summary>
            <param name="name"></param>
            <param name="dVal"></param>
            <param name="unitType"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDouble.#ctor(System.String,System.Double,MPT.USN.CommonLib.Enums.UnitTypes,MPT.USN.CommonLib.Enums.RateType,MPT.USN.CommonLib.Enums.UnitTypes)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
            <param name="dVal"></param>
            <param name="unitType"></param>
            <param name="rate"></param>
            <param name="unitTypeRespect"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDouble.CopyDataFrom(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Copy data from another  DataDouble object
            </summary>
            <param name="dt"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DataDouble._history">
            <summary>
            History
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDouble.AddToHistory(System.Int64,System.Double)">
            <summary>
            Temp method top store data to history buffer
            </summary>
            <param name="loopCount"></param>
            <param name="dVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDouble.AddToHistory(System.Double)">
            <summary>
            Temp method top store data to history buffer
            </summary>
            <param name="dVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDouble.WriteHistory(System.IO.TextWriter)">
            <summary>
            Dump the history to file
            </summary>
            <param name="w"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDouble.GetHistorical(MPT.USN.CommonLib.Enums.HistoricalType)">
            <summary>
            Return the historical average
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDouble.ResetStats">
            <summary>
            Reset the statistical values
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DataDouble.array">
            <summary>
            Double array to be stored in XML.  Do not modiy directly.
            Use + or - operators or [] to access or modify.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDouble.op_Addition(MPT.USN.CommonLib.Data.DataDouble,System.Double)">
            <summary>
            Plus operator to append to string array
            </summary>
            <param name="dt"></param>
            <param name="newVal"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDouble.SetAverageVal">
            <summary>
            Set the roll value according to history
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDouble.Increment">
            <summary>
            Increment by one
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDouble.RandomGausian(System.Double,System.Double,System.Int32)">
            <summary>
            Random gausian
            </summary>
            <param name="center"></param>
            <param name="tolerance"></param>
            <param name="pos"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDouble.Decrement">
            <summary>
            Increment by one
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDouble.SetDefault">
            <summary>
            Set value to its default
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDouble.ValToDisplayString">
            <summary>
            Convert the value to string in proper units
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDouble.ValToDisplayString(System.String)">
            <summary>
            Convert the value to string in proper units
            </summary>
            <param name="fmt"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDouble.SetVal(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Set the value from the given data type
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDouble.ConvertValidate(System.Object)">
            <summary>
            Validate basics for this type
            </summary>
            <remarks>This will convert a string to raw value.  
            The string may contain units in which case, it will the Unit type will be 
            changed for this data object and the value will be converted to raw units.
            Otherwise, if value is numeric, it assumes it is already raw.</remarks>
            <param name="oVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDouble.ValToString">
            <summary>
            Convert the value to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDouble.ValToString(System.String)">
            <summary>
            Convert the value to a formatted string
            </summary>
            <param name="fmt"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDouble.ValToDefaultString">
            <summary>
            Convert the default value to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDouble.ValFromString(System.String)">
            <summary>
            Set value from string
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDouble.AfterFileRead">
            <summary>
            Convert
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDouble.EvaluateConditionExpression(MPT.USN.CommonLib.Data.DataDouble,System.String,MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
            Determine if the condition is true
            </summary>
            <param name="dtLeft"></param>
            <param name="op"></param>
            <param name="dtRight"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDouble.RegisterManualLinearTransform(MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
            Register an Data Double add input for manual linear transform
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDouble.RegisterManualLinearTransform(MPT.USN.CommonLib.Data.DataDouble,System.Drawing.Color)">
            <summary>
            Register an Data Double add input for manual linear transform. Back color for setting page is specified
            </summary>
            <param name="input"></param>
            <param name="settingControlBackColor"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataDouble.ObjRawVal">
            <summary>
            Get/Save the value from an unknown object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataDouble.RawVal">
            <summary>
            Get/Set the raw value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataDouble.Val">
            <summary>
            Get/Set the value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataDouble.SerHistory">
            <summary>
            Serialize the values in history
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataDouble.HasHistory">
            <summary>
            returns true if we have historical data
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataDouble.Average">
            <summary>
            Set the average
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataDouble.SigmaSquaredSum">
            <summary>
            Summ of all squares
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataDouble.SerSigmaSquaredSum">
            <summary>
            Serialize the value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataDouble.StDev">
            <summary>
            Returns the Standard Deviation
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataDouble.Item(System.Int32)">
            <summary>
            Get/set string array element based on index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataDouble.Count">
            <summary>
            Gets the count of children for this object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataDouble.Default">
            <summary>
            Get/Set the default
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataDouble.SerDefault">
            <summary>
            Serialize the value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataDouble.LinearTransform">
            <summary>
            Get the manual linear transform
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.MPTControls.MPTSignal">
            <summary>
            Dial indicator user control designed to work with MPT's data types
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MPTControls.MPTSignal.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTSignal.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTSignal.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MPTControls.MPTSignal.DataSelection">
            <summary>
            Access to data Selection
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MPTControls.MPTSignal.DataProperties">
            <summary>
            Access to data properties
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTSignal.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTSignal.Init(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Initialize the control
            </summary>
            <param name="dt">Asscociate with proper data type</param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTSignal.UpdateVal">
            <summary>
            Update the value of the control
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.MPTControls.MPTFilePath">
            <summary>
            Control to manage filepath
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MPTControls.MPTFilePath.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTFilePath.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTFilePath.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTFilePath.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTFilePath.GetVal">
            <summary>
            Return the current Value of the underlying control
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTFilePath.Init(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Override for initialization
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTFilePath.UpdateVal">
            <summary>
            Update the Displayed value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTFilePath.FolderBrowse">
            <summary>
            Indicates whether string targets a folder or file
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTFilePath.FileMustExist">
            <summary>
            The file must exist to open
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTFilePath.ShowFilenameOnly">
            <summary>
            Display only the filename in the edit box
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTFilePath.FilePath">
            <summary>
            Get/Set the filepath
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.MCLData">
            <summary>
            Class to work with dynamic data
            </summary>
            <remarks>This is used to encapsulate DataType list management for each component</remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.MCLData.#ctor(MPT.USN.CommonLib.MPTBase)">
            <summary>
            Constructor
            </summary>
            <param name="mptBase"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.MCLData.ToArray">
            <summary>
            Convert to an array
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.MCLData.ToDynamicArray">
            <summary>
            Convert to an array of only dynamic data
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.MCLData.ToPersistentArray">
            <summary>
            Convert to an array of only dynamic data
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.MCLData.FromArray(MPT.USN.CommonLib.Data.DataType[])">
            <summary>
            Convert from array
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.MCLData.NotifyAllAfterRead">
            <summary>
            Notify each data elemnet that we are about to save to disk
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.MCLData.NotifyAllBeforeSave">
            <summary>
            Notify each data elemnet that we are about to save to disk
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.MCLData.CopyFrom(MPT.USN.CommonLib.Data.MCLData)">
            <summary>
            Copy a list from another component
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.MCLData.SynchWithInstatiated">
            <summary>
            Used instantiated data objects
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.MCLData.UnregisterAll">
            <summary>
            Unregister all the data elements with DataMgr
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.MCLData.RegisterAll">
            <summary>
            Register all the data elements with DataMgr
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.MCLData.FindMatching(System.String)">
            <summary>
            Find all that match 
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.MCLData.Find(System.String)">
            <summary>
            Returns the datatype that matches the supplied name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.MCLData.DeleteIfDynamic(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Delete this element
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.MCLData.DeleteDynamic(System.String)">
            <summary>
            Delete the elements as declared in relative path parameter
            </summary>
            <param name="nameFilter"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.MCLData.DeletePersitentDynamic">
            <summary>
            Remove all the persistent and dynamic data
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.MCLData.Add(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Add a new DataType as a dynamic element in this component
            </summary>
            <remarks>This will also register the data with the data manager</remarks>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.MCLData.UpdateControls">
            <summary>
            Redraw the control due to changes
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.MCLData.IsPersistentAndDynamic(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Return true if the data item is persistent and dynamic
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.MCLData.ProducePersistentDynamicData(System.String)">
            <summary>
            Based on the dataName, try to produce a dynamic and persistent data item
            </summary>
            <param name="dataName"></param>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.MCLData.DataMgr">
            <summary>
            Easy access to data manager
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.MPTControls.RubberBand">
            <summary>
            Class to manage rubber band mouse selection
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.RubberBand.OnMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse Up event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.RubberBand.OnMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse Down event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.RubberBand.OnMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse Move event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.Validations.ValidateMinMaxPage">
            <summary>
            Page for Validate Min/Max
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidateMinMaxPage.#ctor(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Constructor
            </summary>
            <param name="dt"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.Validations.ValidateMinMaxPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidateMinMaxPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidateMinMaxPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TransferFunctions.MultiVarPage">
            <summary>
            Class for Robust definitions
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.MultiVarPage.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.MultiVarPage.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.MultiVarPage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.MultiVarPage._graph">
            <summary>
            graph object
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.MultiVarPage.#ctor(MPT.USN.CommonLib.Data.TransferFunctions.MultiVar)">
            <summary>
            Constructor for MultiVar property page
            </summary>
            <param name="multiVar"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.MultiVarPage.OnRefresh">
            <summary>
            Used to notify this page of an update required
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.MultiVarPage.OnPageLoad">
            <summary>
            Set up for the first time with valid window handle and parental windows established
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.MultiVarPage.GetGraph">
            <summary>
            public access to graph object
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TransferFunctions.ManualLinearTransformInsert">
            <summary>
            Insert setting page for manual linear transform
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.ManualLinearTransformInsert.#ctor(MPT.USN.CommonLib.Data.TransferFunctions.ManualLinearTransform)">
            <summary>
            Constructor
            </summary>
            <param name="linearTransform"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.ManualLinearTransformInsert.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.ManualLinearTransformInsert.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.ManualLinearTransformInsert.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.ManualLinearTransformInsert.ShowIt">
            <summary>
            Show the page based on privilege
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.LaserSystem.OFV2502Stub">
            <summary>
            Stubs for PolyTec
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.LaserSystem.LaserSystem">
            <summary>
            Class for all laser components
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.LaserSystem.LaserSystem.dbEmissionMode">
            <summary>
            Current Emission Mode
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.LaserSystem.LaserSystem.ddGain">
            <summary>
            Generic gain value.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.LaserSystem.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.LaserSystem.#ctor(System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.LaserSystem.OnSimEventsForComponent(MPT.USN.CommonLib.Comp.ComponentBase)">
            <summary>
            Add any events for simulation
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.LaserSystem.OnUpdateLaserLevel(MPT.USN.CommonLib.Comp.LaserSystem.Laser)">
            <summary>
            Update the "Laser Level" data parameter
            </summary>
            <param name="laser"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.LaserSystem.SetLaserCurrent(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.LaserSystem.Laser,System.Double)">
            <summary>
            Posts the call to set Laser current
            </summary>
            <param name="mc"></param>
            <param name="laser"></param>
            <param name="current"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.LaserSystem.SetLaserPower(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.LaserSystem.Laser,System.Double)">
            <summary>
            Posts the call to set Laser power
            </summary>
            <param name="mc"></param>
            <param name="laser"></param>
            <param name="power"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.LaserSystem.SetPercentPower(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.LaserSystem.Laser,System.Double)">
            <summary>
            Posts the call to set Laser power
            </summary>
            <param name="mc"></param>
            <param name="laser"></param>
            <param name="power"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.LaserSystem.SetLaserGuide(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.LaserSystem.Laser,System.Boolean)">
            <summary>
            Posts the call to set Laser Guide
            </summary>
            <param name="mc"></param>
            <param name="laser"></param>
            <param name="on"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.LaserSystem.SetLaserDuration(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.LaserSystem.Laser,System.Double)">
            <summary>
            Posts the call to set Laser duration
            </summary>
            <param name="mc"></param>
            <param name="laser"></param>
            <param name="duration">In Seconds</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.LaserSystem.Trigger(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.LaserSystem.Laser)">
            <summary>
            Posts the call to set Laser duration
            </summary>
            <param name="mc"></param>
            <param name="laser"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.LaserSystem.SetEmissionOn(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
             Turn on Laser emission
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.LaserSystem.SetEmissionOff(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
             Turn off Laser emission
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.LaserSystem.SetLaserEmission(MPT.USN.CommonLib.SMMethodCall,System.Boolean)">
            <summary>
            Posts the call to set Laser emission
            </summary>
            <param name="mc"></param>
            <param name="on"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.LaserSystem.LaserSystem.Gain">
            <summary>
            Generic gain value.
            </summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.LaserSystem.LaserSystem.evSetLaserCurrent">
            <summary>Event for setting the laser current</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.LaserSystem.LaserSystem.evSetLaserPower">
            <summary>Event for setting the laser power</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.LaserSystem.LaserSystem.evSetPercentPower">
            <summary>Event for setting the laser power</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.LaserSystem.LaserSystem.evSetLaserDuration">
            <summary>Event for setting the laser duration</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.LaserSystem.LaserSystem.evTrigger">
            <summary>Event for firing the laser trigger</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.LaserSystem.LaserSystem.evSetLaserEmission">
            <summary>Event for setting emission</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.LaserSystem.LaserSystem.evSetLaserGuide">
            <summary>Event for setting guide</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.LaserSystem.LaserSystem.DelegateParmLaser">
            <summary>Delegate for single Laser parm</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.LaserSystem.LaserSystem.DelegateParmSMLaser">
            <summary>Delegate for single Laser parm</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.LaserSystem.LaserSystem.DelegateParmSMLaserDouble">
            <summary>Delegate for single Laser parm Double</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.LaserSystem.LaserSystem.DelegateParmSMLaserBool">
            <summary>Delegate for single Laser parm Bool</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.LaserSystem.LaserSystem.DelegateParmSMLaserString">
            <summary>Delegate for single Laser parm String</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.LaserSystem.LaserSystem.DelegateParmSMBool">
            <summary>Delegate for single Laser parm Double</summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.OFV2502Stub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.OFV2502Stub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.LaserSystem.LaserVallStub">
            <summary>
            Stubs for LaserVall
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.LaserVallStub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.LaserVallStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.LaserSystem.IPG.DL10X2Stub">
            <summary>
            Stubs for IPG-DL10X2
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.IPG.DL10X2Stub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.IPG.DL10X2Stub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.LaserSystem.IPG.YLR20CStub">
            <summary>
            Stubs for IPG-YLR20C
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.IPG.YLR20CStub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.IPG.YLR20CStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.LaserSystem.IPG.DL5X4Stub">
            <summary>
            Stub for IPG-DL5X4
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.IPG.DL5X4Stub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.IPG.DL5X4Stub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ComponentPanel">
            <summary>
            Summary description for ComponentPanel.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.PanelBase">
            <summary>
            Summary description for PanelBase.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.PanelBase.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.PanelBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.PanelBase.#ctor(System.Windows.Forms.Button)">
            <summary>
            Constructor
            </summary>
            <param name="btnPanel"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.PanelBase.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.PanelBase.OnApply">
            <summary>
            Response to Apply button
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.PanelBase.MakeShown">
            <summary>
            Show the panel
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.PanelBase.MakeHidden">
            <summary>
            Hide the panel
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.PanelBase.ProcessMgr">
            <summary>
            Create reference for easy access to process manager
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ComponentPanel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentPanel.#ctor(System.Windows.Forms.Button)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentPanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentPanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentPanel.OnTreeSelect(System.Object,System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            When a component is selected, we want to produce tab pages to the right
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentPanel.RebuildPages(MPT.USN.CommonLib.Comp.ComponentBase)">
            <summary>
            Rebuild the pages and wait for completion
            </summary>
            <param name="comp"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentPanel.OnApply">
            <summary>
            Response to apply button
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentPanel.RefreshAllPages(MPT.USN.CommonLib.Comp.ComponentBase)">
            <summary>
            Recursivley refresh all pages
            </summary>
            <param name="comp"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ComponentPanel.CompMgr">
            <summary>
            Create reference for easy access to component manager
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPC.SPCGroup">
            <summary>
            Class to contain Group of SPC charts
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCGroup.classDataName">
            <summary>
            Object instance identifier
            Selected using Data.ClassDataSel form
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCGroup.ddUCLMean">
            <summary>
            Upper Control Limit (Mean)
            </summary>        
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCGroup.ddLCLMean">
            <summary>
            Lower Control Limit (Mean)
            </summary>        
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCGroup.ddAverageMean">
            <summary>
            Average (Mean)
            </summary>        
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCGroup.ddUCLRange">
            <summary>
            Upper Control Limit (Range)
            </summary>        
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCGroup.ddLCLRange">
            <summary>
            Lower Control Limit (Range)
            </summary>        
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCGroup.ddAverageRange">
            <summary>
            Average (Range)
            </summary>        
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCGroup.ddUCLRun">
            <summary>
            Upper Control Limit (Run)
            </summary>        
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCGroup.ddLCLRun">
            <summary>
            Lower Control Limit (Run)
            </summary>        
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCGroup.ddAverageRun">
            <summary>
            Average (Run)
            </summary>        
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCGroup.#ctor">
            <summary>
            constructor for serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCGroup.#ctor(System.String)">
            <summary>
            construtor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCGroup.PackInRecurse(MPT.USN.CommonLib.MPTBase)">
            <summary>
            Take action after file read
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCGroup.GetInstanceSPCData(System.String)">
            <summary>
            return SPCData object and increase registration count
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCGroup.GetInstanceSPCData(System.String,System.String,System.Type)">
            <summary>
            return SPCData object and increase registration count
            return new object if not found
            </summary>
            <param name="name"></param>
            <param name="classname"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCGroup.DeleteInstanceGroup">
            <summary>
            remove all SPCData in group
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCGroup.DeleteInstanceSPCData(MPT.USN.CommonLib.Comp.SPC.SPCData)">
            <summary>
            Remove one specData object from group
            </summary>
            <param name="spcData"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCGroup.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add a settings page to the 'tab' of this inherited class.
            If skip is set to true, then any pages assigned to this inherited 
            class will be skipped.
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCGroup.RegistrationCount">
            <summary>
            used to keep track of how many groups are registered
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner">
            <summary>
            Welder scanner.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ScanSystem.Scanner">
            <summary>
            Summary description for Scanner.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.Scanner.dfFillLinesFindX">
            <summary>
            used to locate a point on the outrigger to initiate a fill of lines
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.Scanner.dfFillLinesEndY">
            <summary>
            Y end limit when filling with lines on the outrigger
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.Scanner.dfFillLinesStartY">
            <summary>
            Start Y location when filling lines on the outriggers
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.Scanner.dfFillLinesSpacing">
            <summary>
            Minium gap between lines
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.Scanner.diFillLinesColorStop">
            <summary>
            Color reference to limit median search for center of outrigger
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.Scanner.dsLlzFilePath">
            <summary>
            Access to "LlzFilePath" data object
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.Scanner.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.Scanner.#ctor(System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.Scanner.Initialize">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.Scanner.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add a settings page to this class
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.Scanner.Scan(MPT.USN.CommonLib.Comp.ScanSystem.ScanLine[])">
            <summary>
            Perform scan
            </summary>
            <param name="lines"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.Scanner.JumpTo(System.Double,System.Double,System.Boolean)">
            <summary>
            Jump to some where
            </summary>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="top"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.Scanner.LlzFilePath">
            <summary>
            Access to LlzFilePath parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.Scanner.FillLinesSpacing">
            <summary>
            Spacing between scan lines
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.Scanner.FillLinesStartY">
            <summary>
            start Y pos of scan lines
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.Scanner.FillLinesEndY">
            <summary>
            End position of scan lines
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.Scanner.FillLinesFindX">
            <summary>
            locate middle position of scan lines Y contour
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.Scanner.FillLinesColorStop">
            <summary>
            locate middle position of scan lines Y contour
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner.MMtoPixels(System.Double)">
            <summary>
            convert mm to pixel.
            </summary>
            <param name="mm"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner.PixelsToMM(System.Int32)">
            <summary>
            Convert pixels to mm.
            </summary>
            <param name="pixels"></param>
            <returns></returns>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner.dsLayoutImagePath">
            <summary>
            Layout image path.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner.diOriginX">
            <summary>
            Image origin X position in pixel.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner.diOriginY">
            <summary>
            Image origin y position in pixel.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner.dbShowOrigin">
            <summary>
            Show or not show origin graphic in image.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner.DummySpot">
            <summary>
            Define weld spot for dummy shot.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner.diCurrentXPosition">
            <summary>
            Current scanner x position.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner.diCurrentYPosition">
            <summary>
            Current scanner y position.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner.diScanHeadNumber">
            <summary>
            All usage scan head number. Default value is 1 .
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner.duCurrentRTCSN">
            <summary>
            Access RTC Card Serial number
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner.WeldSpots">
            <summary>
            Object Array containing weldspot.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner.dbActiveUtility">
            <summary>
            No Public access.  Use Exposed property w/o preceeding underscore 
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner.#ctor">
            <summary>
            constructor for serialize.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner.#ctor(System.String,System.Int32)">
            <summary>
            Constructor for first time creation.
            </summary>
            <param name="name"></param>
            <param name="chanel"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner.ScanSpots(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Start mark weld spots.
            </summary>
            <param name="mcCaller"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner.ScanDummy(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Start mark dummy spot.
            </summary>
            <param name="mcCaller"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner.InitializeScanner(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Initialize scanner
            </summary>
            <param name="mcCaller"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner.SetMatrix(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set (2x2) matrix for transformation vector outputs.
            </summary>
            <param name="m11"></param>
            <param name="m12"></param>
            <param name="m21"></param>
            <param name="m22"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner.GoToXY(MPT.USN.CommonLib.Data.DataShort,MPT.USN.CommonLib.Data.DataShort)">
            <summary>
            jump to x,y position.
            </summary>
            <param name="xPos"></param>
            <param name="yPos"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner.GetCurrentXYPosition">
            <summary>
            Get current x,y position.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner.InitCommandLists">
            <summary>
            For scan all.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner.InitCommandSingleLists(System.Int32)">
            <summary>
            For Single Scan
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner.ConvertToScanLabCordinate(MPT.USN.CommonLib.Comp.ScanSystem.WeldSpot)">
            <summary>
            Convert cordinate of point in picture box to scanlab cordinate. (X -> -Y), (Y -> X);
            </summary>
            <param name="spot"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner.ConverToPictureCordinate(MPT.USN.CommonLib.Comp.ScanSystem.WeldSpot)">
            <summary>
            Convert cordinate of point in scanlab to picture box cordinate. (X -> -Y), (Y -> X);
            </summary>
            <param name="spot"></param>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.WelderScanner.ActiveUtility">
            <summary>
            Indicator that we are using a utility
            This will cause a suspension to stop at the station and stay
            Until released
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystemSetupPage">
            <summary>
            Setup page for scanner.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystemSetupPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystemSetupPage.#ctor(MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem)">
            <summary>
            Constructor
            </summary>
            <param name="scanSystem"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystemSetupPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystemSetupPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystemSetupPage.ShowIt">
            <summary>
            Show the page based on privilege
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanSystemSetupPage.CanSafeDispose">
            <summary>
            Indicate whether this can safely disposed when run out of scene
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.PulseSystem.ShapeEditorPage">
            <summary>
            Class for edit shape on GUI.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.ShapeEditorPage.#ctor(MPT.USN.CommonLib.Comp.WelderPattern.WeldPatternComponent)">
            <summary>
            Shape Editor page.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.ShapeEditorPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.ShapeEditorPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.ShapeEditorPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.PulseSystem.ShapeEditorPage.DelgateUpdateBackGroundWorkerProgress">
            <summary>
            DelgateUpdateBackGroundWorkerProgress
            </summary>
            <param name="percent"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.PulseSystem.ShapeEditorPage.DelegateShowHideProgressBar">
            <summary>
            DelegateShowHideProgressBar
            </summary>
            <param name="show"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.PulseSystem.PulseShape">
            <summary>
            Class for descrip PulseShape of welder machine.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.PulseShape.diShotsToFire">
            <summary>
            number of shot to fire for this shape.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.PulseShape.ddRampUpTime">
            <summary>
            shape ramp up time in milisecond
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.PulseShape.ddRampDownTime">
            <summary>
            shape ramp down time in milisecond
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.PulseShape.diShpaeID">
            <summary>
             shape ID
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.PulseShape.diRepeat">
            <summary>
            Get/Set number of shot to fire for this shape.
            Acept range 0 - 9999
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.PulseShape.ddPeakPower">
            <summary>
            Get/Set number of pulse repeat rate for this shape (PPS).
            Accept range 0 - 200
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.PulseShape.dsLabel">
            <summary>
            Descrip the shape.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.PulseShape.PulseSectors">
            <summary>
            Object array containing the pulse sector definitions
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseShape.#ctor">
            <summary>
            Consructor for serialize
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseShape.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor for first time create.
            </summary>
            <param name="id"></param>
            <param name="sectors"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseShape.GetSector(System.Int32)">
            <summary>
            Get PulseSector at specific index
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseShape.AddSector(MPT.USN.CommonLib.Comp.PulseSystem.PulseSector)">
            <summary>
            Add new sector to the end of sectors array.
            </summary>
            <param name="sector"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseShape.InsertSector(System.Int32,MPT.USN.CommonLib.Comp.PulseSystem.PulseSector)">
            <summary>
            Insert new sector at any index.
            </summary>
            <param name="id"></param>
            <param name="sector"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseShape.ReplaceSector(System.Int32,MPT.USN.CommonLib.Comp.PulseSystem.PulseSector)">
            <summary>
            Overwrite sector at any index.
            </summary>
            <param name="id"></param>
            <param name="sector"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseShape.GetDataExport">
            <summary>
            Export Data far save to file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseShape.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.PulseShape.SectorNumber">
            <summary>
            return number of sectors.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.PulseShape.ShapeID">
            <summary>
            Get/Set shape ID
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.PulseShape.RampUpTime">
            <summary>
            Get/Set shape ramp up time in milisecond
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.PulseShape.RampDownTime">
            <summary>
            Get/Set shape ramp down time in milisecond
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.PulseShape.ShotsToFire">
            <summary>
            Get/Set number of shot to fire for this shape.
            Acept range 0 - 9999
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.PulseShape.Repeat">
            <summary>
            Get/Set number of pulse repeat rate for this shape (PPS).
            Accept range 0 - 200
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.PulseShape.PeakPower">
            <summary>
            Get/Set Peak power.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.PulseShape.ShapeLabel">
            <summary>
            Descrip the shape.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.PulseSystem.PulseLaserBackGroundWorker">
            <summary>
            Class PulseLaserBackGroundWorker
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseLaserBackGroundWorker.#ctor">
            <summary>
            PulseLaserBackGroundWorker()
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.PulseLaserBackGroundWorker.IsUpload">
            <summary>
            IsUpload
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.PulseSystem.IPulseLaserStatus">
            <summary>
            IPulseLaserStatus
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.IPulseLaserStatus.SetChanel(System.Int32)">
            <summary>
            SetChanel
            </summary>
            <param name="chanel"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.RS485Device.RS485DevicePage">
            <summary>
            Digital Meter controlled by com port.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.RS485Device.RS485DevicePage.#ctor(MPT.USN.CommonLib.Comp.IOSystem.RS485Device.RS485Device)">
            <summary>
            Constructor
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.RS485Device.RS485DevicePage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Output.ParamOutput">
            <summary>
            Summary description for ParamOutput.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Output.ParamOutput.dsParamVal">
            <summary>
            Parameter value
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Output.ParamOutput.dsSpecificParam">
            <summary>
            Specific Content
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.ParamOutput.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.ParamOutput.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.ParamOutput.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
            <param name="channelPrefix"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.ParamOutput.Initialize">
            <summary>
            Initialize this component
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.ParamOutput.SetParam(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataString)">
            <summary>
            Write the output
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.IOGroupAdvPage">
            <summary>
            Summary description for IOGroupPage.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.FloatablePage">
            <summary>
            Base class for pages which can float itself
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.FloatablePage._lnkDockFloating">
            <summary>
            Label for dock or floating text
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.FloatablePage.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.FloatablePage.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="refObj"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.FloatablePage.Destroy">
            <summary>
            Destroy
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.FloatablePage.DoFloating">
            <summary>
            Float itself
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.IOGroupAdvPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOGroupAdvPage.#ctor(MPT.USN.CommonLib.Comp.IOSystem.IOGroupAdv)">
            <summary>
            Constructor
            </summary>
            <param name="ioGroup"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOGroupAdvPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOGroupAdvPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.MainAppPanel">
            <summary>
            Summary description for MainAppPanel.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MainAppPanel.tabOperations">
            <summary>
            Tab Control for all panel forms
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MainAppPanel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainAppPanel.#ctor(System.Windows.Forms.Panel,System.Windows.Forms.Button)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainAppPanel.GetNumPages">
            <summary>
            Returns number of pages in panel tab
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MainAppPanel.GoodToGo">
            <summary>
            Called from process to determine if it is OK to coninue.
            Response is handled by process script
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MainAppPanel.UpdatePanel(MPT.USN.CommonLib.Process.ProcessBase)">
            <summary>
            Method for update command to panel forms with no parameters
            </summary>
            <param name="process"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MainAppPanel.UpdatePanel(MPT.USN.CommonLib.Process.ProcessBase,System.String)">
            <summary>
            Method for update command to panel forms with 1 parameters
            </summary>
            <param name="process"></param>
            <param name="cmd"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MainAppPanel.UpdatePanel(MPT.USN.CommonLib.Process.ProcessBase,System.String,System.String)">
            <summary>
            Method for update command to panel forms with 2 parameters
            </summary>
            <param name="process"></param>
            <param name="cmd1">User-defined string 1</param>
            <param name="cmd2">User-defined string 2</param>
        </member>
        <member name="M:MPT.USN.CommonLib.MainAppPanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainAppPanel.OnApply">
            <summary>
            Response to Apply button press.
            Recursively send to all child panels.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainAppPanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.DataMgr">
            <summary>
            Summary description for DataMgr.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DataMgr._allSerialNos">
            <summary>
             flag to get all serial nos
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataMgr.Instance">
            <summary>
            Singleton logic
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataMgr.Initialize">
            <summary>
            Initialize the manager
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataMgr.DBPutDataProps">
            <summary>
            Put to database a data prop record for each item the  _spcClassData list
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataMgr.DestroyAll">
            <summary>
            Clean up
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataMgr.ResetLoopCount">
            <summary>
            Reset the loop count of the thread
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataMgr.SetLoopCount">
            <summary>
            Increments or sets the loop count
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataMgr.RegisterNativeData(System.Windows.Forms.Control,System.Object,System.String)">
            <summary>
            Register the native data (double, int, etc)
            </summary>
            <param name="control"></param>
            <param name="classObj"></param>
            <param name="dataName"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataMgr.UpdateNativeControls(System.String,System.Object)">
            <summary>
            Update the registered controls
            </summary>
            <param name="strCompletePath"></param>
            <param name="val"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataMgr.RegisterDbClassData(System.String,MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Register class data candidates
            This is used for GUI selection
            </summary>
            <param name="className"></param>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataMgr.RegisterSPCData(MPT.USN.CommonLib.Comp.SPC.SPCData)">
            <summary>
            Register an SPC DataClass
            Called by SPC
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataMgr.UnregisterSPCData(MPT.USN.CommonLib.Comp.SPC.SPCData)">
            <summary>
            Remove an SPC DataClass
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataMgr.ProcessDBBackLog">
            <summary>
            Read and put to db any backlog files
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataMgr.UpdateSuspendedGui">
            <summary>
            This is the chance to update all suspended Gui
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataMgr.OnSPCPut(MPT.USN.CommonLib.DBFieldItem)">
            <summary>
            This data item just got put.  Pass on for SPC processing
            This could have been triggered from internal events, or from an external database
            </summary>
            <param name="fieldItem"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataMgr.Register(MPT.USN.CommonLib.Data.DataType,MPT.USN.CommonLib.MPTBase)">
            <summary>
            Register a data object
            </summary>
            <param name="dataType"></param>
            <param name="owner"></param>
            <returns>Returns true if registration is complete</returns>
            <remarks>Retuning false is means that the root node was not detected.
            A new attempt will be made when the parental node is attached to a root node.</remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataMgr.UnRegister(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Unregister a data object
            </summary>
            <param name="dataType"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataMgr.UnRegister(System.String)">
            <summary>
            Unregister a data object
            </summary>
            <param name="fullPath"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataMgr.CreateMclDynamicData(System.String,System.String)">
            <summary>
            Create a dynamic data type
            </summary>
            <param name="namePath"></param>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataMgr.Find(System.String)">
            <summary>
            Locate a data object for the master list
            </summary>
            <param name="strPath"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataMgr.OnModeChange">
            <summary>
            Sent to all data objects when playback/run/record mode has changed
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataMgr.OnGlobalUnitChanged">
            <summary>
            Sent to all data objects when playback/run/record mode has changed
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataMgr.BuildTree(System.Windows.Forms.TreeView,System.Windows.Forms.TreeNode,System.Object)">
            <summary>
            Used to build a data tree.
            </summary>
            <param name="tree"></param>
            <param name="nodeParent"></param>
            <param name="filter"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataMgr.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataMgr.PutDbRecord(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.DbClassItem)">
            <summary>
            We have a database packet ready to go
            </summary>
            <param name="mc"></param>
            <param name="classItem"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataMgr.DBGetData(MPT.USN.CommonLib.Data.DBControlTag)">
            <summary>
            Get the data base values for this item
            </summary>
            <param name="dbControlTag"></param>
            <returns></returns>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DataMgr.changeRequestsAlerted">
            <summary>
            Indicated that the change request has been presented to the user
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataMgr.ProcessDBRequests">
            <summary>
            Process any data base requests
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataMgr.DBGetMCRequests">
            <summary>
            Get the data base values for this item
            </summary>
            <param name="sn"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataMgr.DBGetMCRequests(System.Int32)">
            <summary>
            Get the data base values for this item
            </summary>
            <param name="sn"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataMgr.DBPutRequest(System.Int32,System.String,System.String,System.String)">
            <summary>
            Put the mc request to the database
            </summary>
            <param name="sn"></param>
            <param name="compPath"></param>
            <param name="name"></param>
            <param name="curr">If null, the record is deleted</param>
            <returns>True if successful</returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataMgr.CompMgr">
            <summary>
            Easy access to Component Manager singleton
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataMgr.ProcMgr">
            <summary>
            Easy access to Process manager singleton
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataMgr.LoopCount">
            <summary>
            Get/Set thread loop count
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataMgr.PlaybackMode">
            <summary>
            Returns true if in playback mode.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataMgr.DBClassData">
            <summary>
            Get the class data list
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.DBRequest">
            <summary>
            Class to contain request info
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DBRequest.sn">
            <summary>Serial No</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DBRequest.compPath">
            <summary>Component path</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DBRequest.name">
            <summary>Name</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DBRequest.value">
            <summary>Value</summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DBRequest.#ctor(System.Int32,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="sn"></param>
            <param name="compPath"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DBRecordFile.#ctor">
            <summary>
            Default constructor used for serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DBRecordFile.#ctor(System.String,System.String,System.String,System.String,MPT.USN.CommonLib.DbClassItem)">
            <summary>
            Constructor used for 1st time creation
            </summary>
            <param name="tableName"></param>
            <param name="strFields"></param>
            <param name="strEnsureFields"></param>
            <param name="strValues"></param>
            <param name="classItem"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.RevisionHistories.NamespaceDoc">
            <summary>
            Revisions
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.RevisionHistories.RevisionHistory_1_10_0">
            <summary>
            RevisionHistory 1.10.0
            <list type="table">
            <listheader><term>Features added</term><description>Details</description>
            </listheader>
            <item><term>Added dynamic data</term><description></description></item>
            <item><term>Added AllStop/AllPause for alert control</term><description></description></item>
            <item><term>Added support for Dimple/Damper existence check</term><description></description></item>
            <item><term>Added support for Web Camera</term><description></description></item>
            </list>
            <para/>
            <list type="table">
            <listheader><term>Bugs fixed</term><description>Details</description>
            </listheader>
            <item><term>Fixed last part position on boat initialization</term><description></description></item>
            <item><term>Fixed null exception problems</term><description>Occurs when adding inputs for the first time</description></item>
            <item><term>Prevented Alert conditionals from showing error</term><description></description></item>
            </list>
            </summary>
            <remarks></remarks>
            
        </member>
        <member name="T:MPT.USN.CommonLib.RevisionHistories.RevisionHistory_1_9_4">
            <summary>
            RevisionHistory 1.9.4
            <list type="table">
            <listheader><term>Features added</term><description>Details</description>
            </listheader>
            <item><term>Added crash detection mechanism</term><description></description></item>
            <item><term>Added crash counter</term><description></description></item>
            <item><term>Added Clear button to Watch list viewer</term><description></description></item>
            <item><term>Added crash recovery support for SPL state machine</term><description></description></item>
            <item><term>Added check for gui events on gui thread</term><description></description></item>
            </list>
            <para/>
            <list type="table">
            <listheader><term>Bugs fixed</term><description>Details</description>
            </listheader>
            <item><term>Added workaround to Framework bug that causes lock-when-idle.</term><description></description></item>
            <item><term>Use our own method to handle one-time page load event</term><description>Framework's Load event only works for MainForm</description></item>
            <item><term>Added extra check that gui is on gui thread</term><description>Safewgaurd againt lock-when-idle</description></item>
            <item><term>Added FireThreadRate</term><description></description></item>
            <item><term>Fixed applying backup rollback</term><description></description></item>
            <item><term>Fixed simulation bug</term><description></description></item>
            <item><term>Added code to synch Part index with actual U axis absolute postion</term><description></description></item>
            <item><term>Moved AKI initialize to GUi thread to prevent lock-when-idle problem.</term><description></description></item>
            <item><term>Removed ConvertValidate from Val set property</term><description></description></item>
            <item><term>Made minor gui changes to fit windows for factory screen resolution</term><description></description></item>
            <item><term>Changed so that RegisterCamera is called on gui thread</term><description></description></item>
            <item><term>Converted arraylist to double[] for TFInput</term><description></description></item>
            <item><term>Corrected use of units in TransferFunction analysis</term><description></description></item>
            <item><term>Fixed bug where part header does not display part status</term><description></description></item>
            <item><term>Fixed validation unit problem</term><description></description></item>
            <item><term>Fixed problem with "Enable utility"</term><description>The checkbox would send repeated OnChange notifications</description></item>
            </list>
            </summary>
            <remarks></remarks>
            
        </member>
        <member name="T:MPT.USN.CommonLib.RevisionHistories.RevisionHistory_1_9_0">
            <summary>
            RevisionHistory 1.9.0
            <list type="table">
            <listheader><term>Features added</term><description>Details</description>
            </listheader>
            <item><term>Gui added for repsonse Transfer function limits</term><description></description></item>
            <item><term>Added support for user-defined indicator controls</term><description></description></item>
            <item><term>Added pneumatic axis simulation for desktop users</term><description>Added AxisTriggersSensorsPage and auto-actuate feature</description></item>
            <item><term>Added eValMinMaxMode</term><description></description></item>
            <item><term>Added AutoVision app</term><description></description></item>
            <item><term>Added DriverDevelop App</term><description></description></item>
            <item><term>Added WebCamera assembly</term><description></description></item>
            <item><term>Added ThirdPartyPage</term><description></description></item>
            <item><term>Removed forced SortedList</term><description></description></item>
            <item><term>Added ThreadPriority selection</term><description></description></item>
            <item><term>Added Quantum value</term><description></description></item>
            <item><term>Optimized use of Sorted arrays</term><description></description></item>
            <item><term>Added thread slice monitor</term><description></description></item>
            <item><term>Added HiDef tick counter</term><description></description></item>
            <item><term>Added RegisterReferenceControl for user-defined controls</term><description></description></item>
            <item><term>Use Timer instead of thread for Delay()</term><description></description></item>
            <item><term>Added num backups setting</term><description></description></item>
            <item><term>Added Auto-backup feature</term><description></description></item>
            <item><term>Added ability to add third-party pages to system children (AddThirdPartyPages)</term><description></description></item>
            <item><term>Added ContinuousTrigger to watches</term><description></description></item>
            <item><term>Added AdvantechDAQStub</term><description></description></item>
            <item><term>Change DigSignal to Signal</term><description></description></item>
            <item><term>Improved timing of axis completion and current positions</term><description>Aerotech mod</description></item>
            <item><term>Removed Rework mode</term><description>Rework is now a mode of Adjust</description></item>
            <item><term>Added use of RawVal</term><description></description></item>
            <item><term>Added support for user-defined data controls</term><description></description></item>
            <item><term>Added dirty flag to process to minimize auto-backup operation</term><description></description></item>
            </list>
            <para/>
            <list type="table">
            <listheader><term>Bugs fixed</term><description>Details</description>
            </listheader>
            <item><term>Initialize the neutral colors</term><description></description></item>
            <item><term>Changed class name to CVisionPro42</term><description></description></item>
            <item><term>Put data name in TF title</term><description></description></item>
            <item><term>Changed the way Transfer function limits are stored/managed</term><description></description></item>
            <item><term>Fixed on-the-fly process creation problem</term><description></description></item>
            <item><term>Rounded rotary position</term><description></description></item>
            <item><term>Slaved index position to U drive</term><description></description></item>
            <item><term>Fixed problem with part at stations</term><description></description></item>
            <item><term>Fixed Thread problem</term><description></description></item>
            <item><term>Fixed index problem</term><description></description></item>
            </list>
            </summary>
            <remarks>Released primarily for Seagate</remarks>
        </member>
        <member name="T:MPT.USN.CommonLib.MPTControls.MPTTextBox">
            <summary>
            Text box usser control designed to work with MPT's data types
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTTextBox.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTTextBox.SelectControl">
            <summary>
            Select the underlying control for input focus
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTTextBox.UpdateVal">
            <summary>
            Update the value of the control
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTTextBox.GetVal">
            <summary>
            Return the current Value of the underlying control
            </summary>
            <returns></returns>
        </member>
        <member name="F:MPT.USN.CommonLib.MPTControls.MPTTextBox.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTTextBox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTTextBox.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTTextBox.ReadOnly">
            <summary>
            Pass Read Only flag to inner control
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Email">
            <summary>
            Email class
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Email.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="smtpClient"></param>
            <param name="fromAddress"></param>
            <param name="fromDisplayName"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Email.SendMessage(System.String,System.String,System.String)">
            <summary>
            Send a message to a single rescipient
            </summary>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="recipient"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Email.SendMessage(System.String,System.String,System.String[])">
            <summary>
            Send a message to multiple recipients
            </summary>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="recipients"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Email.SendMessage(System.String,System.String,System.String[],System.String[])">
            <summary>
            Send a message including attachements
            </summary>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="recipients"></param>
            <param name="attachments"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Email.SmtpClient">
            <summary>
            Access to SMTP client
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Email.FromAddress">
            <summary>
            Access to From Address
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Email.FromDisplayName">
            <summary>
            Access to From Display Name
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Email.UseDefaultCredentials">
            <summary>
            Access to Use Default Credentials
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Email.CredUsername">
            <summary>
            Access to Cred User Name
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Email.CredPassword">
            <summary>
            Access to Cred Password
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Process.ProcessPage">
            <summary>
            Summary description for ProcessPage.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.ProcessPage.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessPage.#ctor(MPT.USN.CommonLib.Process.ProcessBase)">
            <summary>
            Constructor
            </summary>
            <param name="proc"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessPage.UpdateData(System.String)">
            <summary>
            Give variables a chance to update
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessPage.OnStateChanged(MPT.USN.CommonLib.Process.StateBase)">
            <summary>
            Highlight the curently active state
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessPage.GetCurrentTransitionObject">
            <summary>
            Returns the currently selected Transition Object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessPage.UpdateImageIndex(System.Windows.Forms.TreeListViewItem,System.String)">
            <summary>
            Update the treeImage index
            </summary>
            <param name="treeItem"></param>
            <param name="indexKey"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.ProcessPage.CompMgr">
            <summary>
            Create reference for easy access to component manager
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.ProcessPage.Proc">
            <summary>
            Get the process
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.ProcessPage.ProcMgr">
            <summary>
            Create reference for easy access to process manager
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Process.ProcessPage.DelegateParmTreeViewInt">
            <summary>General purpose SMMethodCall delegate/// </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.DBFieldItem">
            <summary>
            Class to store field info
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.DBFieldItem.RecordOwner">
            <summary>
            Class object that owns this field.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.DBFieldItem.DataProps">
            <summary>
            Data properties
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.DBFieldItem.PartItem">
            <summary>
            Item number
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.DBFieldItem.Name">
            <summary>
            Name for this object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.DBFieldItem.Val">
            <summary>
            Value of the object
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.DBFieldItem.#ctor">
            <summary>
            For serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.DBFieldItem.#ctor(MPT.USN.CommonLib.DBRecord,System.String,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="recordOwner"></param>
            <param name="name"></param>
            <param name="val"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.DBFieldItem.GetDataRec(System.String)">
            <summary>
            Check if this record has the specified data field
            If so, return this reference
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.DBFieldItem.GetDataValue(System.String)">
            <summary>
            Get a value from the name of the data type
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.DBFieldItem.GetDataInt32(System.String)">
            <summary>
            Get an Int32 value from the name of the data type
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.DBFieldItem.GetDataDouble(System.String)">
            <summary>
            Get a Double value from the name of the data type
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.DBFieldItem.ToString">
            <summary>
            Return the name for the string
            </summary>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.DBFieldItem.TimeStamp">
            <summary>
            Get the timestamp
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.ThirdPartyVisionJob">
            <summary>
            Class for third party vision job
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.ThirdPartyVisionJob.#ctor">
            <summary>
            Construct for xml serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.ThirdPartyVisionJob.#ctor(System.String)">
            <summary>
            First time constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.ThirdPartyVisionJob.Initialize">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.ThirdPartyVisionJob.DoRunJob(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Do run this job. The actual do run job happened on 3rd
            </summary>
            <param name="mc"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.ThirdPartyVisionJob.EditJob">
            <summary>
            Edit this job
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.ThirdPartyVisionJob.Prepare">
            <summary>
            Prepare data for new running job
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.ThirdPartyVisionJob.AssignRunParams(System.Boolean)">
            <summary>
            Assign run params between mcl and vision tools
            </summary>
            <param name="fromMCL"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.ThirdPartyVisionJob.DefineThirdPartyRunParams(System.Collections.Generic.List{MPT.USN.CommonLib.Data.DataType})">
            <summary>
            Define third party run params
            </summary>
            <param name="listData"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.ThirdPartyVisionJob.DefineThirdPartyResultData(System.Collections.Generic.List{MPT.USN.CommonLib.Data.DataType})">
            <summary>
            Define third party result data
            </summary>
            <param name="listData"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.ThirdPartyVisionJob.DefineThirdPartyAttributeData(System.Collections.Generic.List{MPT.USN.CommonLib.Data.DataType})">
            <summary>
            Define third party attribute data
            </summary>
            <param name="listData"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.ThirdPartyVisionJob.DefineThirdPartyOptions(System.Collections.Generic.List{MPT.USN.CommonLib.Data.DataType})">
            <summary>
            Define third party option
            </summary>
            <param name="listData"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.ThirdPartyVisionJob.DefineThirdPartyDataForMeanSigma(System.Collections.Generic.List{MPT.USN.CommonLib.Data.DataDouble})">
            <summary>
            Define third party data for finding mean and sigma when doing multiple run
            </summary>
            <param name="listData"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.ThirdPartyVisionJob.SaveCurrentInputImage(System.String)">
            <summary>
            Save current input image to file
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.ThirdPartyVisionJob.DeployOutputImageToChildrenJobs">
            <summary>
            Deploy this output image, if applicable, to all children jobs
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.ThirdPartyVisionJob.BuildThirdPartyDataLists">
            <summary>
            Build the third party data list
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.ThirdPartyVisionJob.RebuildAllDataLists">
            <summary>
            Rebuild all data lists. This should be called after there is some changes that effect
            data lists, such as enable/disable vision tool.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.ThirdPartyVisionJob.FireDataListChanged">
            <summary>
            Fire Data List changed event
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.ThirdPartyVisionJob.RefCamera">
            <summary>
            Get the reference to the camera
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.ThirdPartyVisionJob.RefVisionJob">
            <summary>
            Get the reference to vision job
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.ThirdPartyVisionJob.ImageObject">
            <summary>
            Get/Set the image object (there will be a ref with same name in the third party job)
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.ThirdPartyVisionJob.IsImageAvailable">
            <summary>
            Get whether the image is deployed to here
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.ThirdPartyVisionJob.OutputImage">
            <summary>
            Get/Set the output image (there will be a ref with same name in third party job)
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.ThirdPartyVisionJob.ImageID">
            <summary>
            Get/Set the image ID
            </summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.VisionSystem.ThirdPartyVisionJob.DataListChanged">
            <summary>
            Event to signal that there is some changed in data lists.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.ThirdPartyVisionJob.ShowInComponentTree">
            <summary>
            Do not show this in the component tree
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MPTMnemonic">
            <summary>
            Summary description for Mnemonic.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MPTMnemonic.#ctor">
            <summary>
            Constructor for Xml Serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MPTMnemonic.#ctor(System.String,System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
            <param name="machinePath"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MPTMnemonic.Name">
            <summary>
            Name property
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MPTMnemonic.MachinePath">
            <summary>
            Machine path property
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Input.EthernetInput">
            <summary>
            Summary description for DigInput.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Input.BoolInput">
            <summary>
            Base class for all boolean inputs
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.BoolInput.dbSignal">
            <summary>Access to the Signal Data Object</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.BoolInput.ddOnResponse">
            <summary>The on response time</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.BoolInput.ddOffResponse">
            <summary>The off response time</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.BoolInput.ddOnRepeats">
            <summary>Number of On Repeats.  We desire zero count</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.BoolInput.ddOffRepeats">
            <summary>Number of Off Repeats.  We desire zero count</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.BoolInput.dsResponseTrigger">
            <summary>Bool Output component that triggers the sensor</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.BoolInput.dbResponseInvert">
            <summary>Invert the response?</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.BoolInput.dbSimDefault">
            <summary>Default value for simulation</summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.BoolInput.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.BoolInput.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
            <param name="channelPrefix"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.BoolInput.Initialize">
            <summary>
            Initialize this component
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.BoolInput.PostInitialize">
            <summary>
            After initialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.BoolInput.SimSignal(System.Boolean)">
            <summary>
            Set the smulated value
            </summary>
            <param name="bVal"></param>
            <remarks>But only if in simulated mode</remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.BoolInput.LogStats">
            <summary>
            Before settings file write
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.BoolInput.ResponseTrigger">
            <summary>
            The reponse trigger
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.BoolInput.ResponseInvert">
            <summary>
            The reponse trigger inversion flag
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.BoolInput.SimDefault">
            <summary>
            Signal property
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.BoolInput.Signal">
            <summary>Access to the Signal parameter</summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.EthernetInput.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.EthernetInput.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.EthernetInput.PostReadUpgrade(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Give the component an opportunity to change properties of dataType
            after file read and before registration takes place.
            For example: rename it
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput">
            <summary>
            Summary description for AcqGroup.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput._data">
            <summary>
            Reference to the acquired data
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput._jaggeData">
            <summary>
            Reference to the acquired data
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput.diSampleRate">
            <summary>
            Get Sample Rate Data Object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput.diNumSamples">
            <summary>
            Access to the Num Samples Data Object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput.diFreqResoution">
            <summary>
            Get Num Samples Data Object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput.ddMinVal">
            <summary>
            Chanel minimum value
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput.ddMaxVal">
            <summary>
            Chanel maximum value
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput.ddDelay">
            <summary>
            Get "Delay" Data Object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput.dsTriggerChannel">
            <summary>
            Get "Trigger Channel" Data Object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput.deTriggerMode">
            <summary>
            Triggering Mode 
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput.ddTriggerLevel">
            <summary>
            Trigger level
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput.dbAcquireComplete">
            <summary>
            Flag to tell us that aquistion was complete
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput.#ctor(System.String,System.Int32,System.Type)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
            <param name="inputChannels"></param>
            <param name="typeChannel"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add a settings page to this class
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput.Setup(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Start the acquisition
            </summary>
            <param name="caller"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput.SetupGroup(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Start the acquisition
            </summary>
            <param name="caller"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput.Acquire(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Start the acquisition
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput.DoAcquire(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Do the Acquire in worker thread
            </summary>
            <param name="mc"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput.Data">
            <summary>
            Access to data
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput.JaggedData">
            <summary>
            Access to data
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput.SampleRate">
            <summary>
            Get/Set Sample Rate Value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput.NumSamples">
            <summary>
            Access to the Num Samples parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput.FreqResolution">
            <summary>
            Get/Set Num Samples Value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput.BaseFrequency">
            <summary>
            Base Frequency for single band tests or filters
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput.MinValue">
            <summary>
            Access to the Minimum Value of chanel
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput.MaxValue">
            <summary>
            Access to the Maximum Value of chanel
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput.DelaySec">
            <summary>
            Access to the Delay of Chanel
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput.Delay">
            <summary>
            Access to Delay parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput.TriggerChannel">
            <summary>
            Access to Trigger Channel parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput.TriggerMode">
            <summary>
            Access to trigger mode
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput.TriggerLevel">
            <summary>
            Access to trigger level
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput.eTriggerMode">
            <summary>
            Enum for Trigeer Mode
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPC.SPCPage">
            <summary>
            Class for SPC property page
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCPage.randomArrayPos">
            <summary>
            pointer to random array
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCPage.GetNextRandomNumber">
            <summary>
            return next random number in sequence
            </summary>
            <returns></returns>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCPage.randomArr">
            <summary>
            Array of gaussian random numbers
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCPage.SelectedDataIndex">
            <summary>
            Index of the selected data point
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCPage.dbTileGraphs">
            <summary>
            Tile graphs on SPCPage
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCPage.dbTabGraphs">
            <summary>
            Tab graphs on SPCPage
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCPage.#ctor">
            <summary>
            Constructor for serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCPage.#ctor(MPT.USN.CommonLib.Comp.SPC.SPCData)">
            <summary>
            Constructor
            </summary>
            <param name="spcData"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCPage.OnRefresh">
            <summary>
            Used to notify this page of an update required
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCPage.PanelSPCGraph">
            <summary>
            Graph Panel Object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCPage.TileGraphs">
            <summary>
            Tile graphs on SPCPage
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCPage.TabGraphs">
            <summary>
            Tab graphs on SPCPage
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPC.ControlLimitInsert">
            <summary>
            Class to manage the SPC limits.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.ControlLimitInsert.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.ControlLimitInsert.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.ControlLimitInsert.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.ControlLimitInsert.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.ControlLimitInsert.#ctor(MPT.USN.CommonLib.Comp.SPC.SPCData)">
            <summary>
            Constructor
            </summary>
            <param name="spcData"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ScanSystem.WelderSetupPage">
            <summary>
            Setup page for welder
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.WelderSetupPage._scanSystem">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WelderSetupPage.#ctor(MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem)">
            <summary>
            
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.WelderSetupPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WelderSetupPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WelderSetupPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ScanSystem.ScannerPage">
            <summary>
            Property page for scanner
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScannerPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScannerPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScannerPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScannerPage.#ctor(MPT.USN.CommonLib.Comp.ScanSystem.Scanner)">
            <summary>
            Constructor
            </summary>
            <param name="scanner"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.PulseSystem.PulseShapePage">
            <summary>
            
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.PulseShapePage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseShapePage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseShapePage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseShapePage.#ctor(MPT.USN.CommonLib.Comp.PulseSystem.PulseShape)">
            <summary>
            
            </summary>
            <param name="shape"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Input.tandInput">
            <summary>
            Summary description for tan d Input.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.tandInput.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.tandInput.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
            <param name="channelPrefix"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.tandInput.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.tandInput.Initialize">
            <summary>
            Initialize this component
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.ComboBoxItem">
            <summary>
            Class object for ComboBox tag item.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.ComboBoxItem.#ctor(System.String,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="tag"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.ComboBoxItem.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.ComboBoxItem.ToString">
            <summary>
            Convert to string
            </summary>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.ComboBoxItem.Name">
            <summary>
            Name for the item
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.ComboBoxItem.Tag">
            <summary>
            Associated Object for this item
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.ClassDataSel">
            <summary>
            Class to select the class dataa
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.ClassDataSel.Selection">
            <summary>
            The return value.  A String with the form "Class~DataName"
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.ClassDataSel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.ClassDataSel.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.ClassDataSel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.ClassDataSel.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.ClassDataSel.dataMgr">
            <summary>
            Easy access to data manager singleton
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Process.ProcessPanel">
            <summary>
            Summary description for ProcessPanel.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessPanel.#ctor(System.Windows.Forms.Button)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessPanel.ToggleProcessPanel(MPT.USN.CommonLib.Process.ProcessBase)">
            <summary>
            Toggle a process to another panel
            </summary>
            <param name="process"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessPanel.AddProcessPage(MPT.USN.CommonLib.Process.ProcessBase)">
            <summary>
            Add a process page to the panel
            </summary>
            <param name="process"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessPanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessPanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.MPTControls.MPTComboBox">
            <summary>
            Class for mpt combo box
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTComboBox.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTComboBox.Init(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Populate the control
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTComboBox.GetVal">
            <summary>
            Return the current Value of the underlying control
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTComboBox.UpdateVal">
            <summary>
            Update the inner control
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MPTControls.MPTComboBox.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTComboBox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTComboBox.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTComboBox.Text">
            <summary>
            Get set, the underlying check box value
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.MPTControls.DTTextBox">
            <summary>
            Class to handle context menu
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MPTControls.DTTextBox.DataSelection">
            <summary>
            Access to data Selection
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MPTControls.DTTextBox.DataProperties">
            <summary>
            Access to data properties
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.DTTextBox.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TransferFunctions.SegmentRegressionPage">
            <summary>
            Class for SegmentRegression GUI
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.SegmentRegressionPage._graph">
            <summary>
            The graph
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentRegressionPage.#ctor(MPT.USN.CommonLib.Data.TransferFunctions.SegmentRegression)">
            <summary>
            Construct with a SegmentRegression
            </summary>
            <param name="segmentRegression"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentRegressionPage.OnRefresh">
            <summary>
            Used to notify this page of an update required
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentRegressionPage.OnPageLoad">
            <summary>
            Set up for the first time with valid window handle and parental windows established
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.SegmentRegressionPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentRegressionPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentRegressionPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.SegmentRegressionPage.GetGraph">
            <summary>
            Get the graph
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.HistoryItem">
            <summary>
            Base class for hgistory item
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.HistoryItem.#ctor(System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="loopCount"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInputPage">
            <summary>
            Summary description for AcqGroupInputPage.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInputPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInputPage.#ctor(MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInput)">
            <summary>
            Constructor
            </summary>
            <param name="acqInput"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInputPage.ValidatePage">
            <summary>
            Save the control values to disk
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInputPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqGroupInputPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPC.HistogramData">
            <summary>
            Support subclass class for Histogram Plots
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.HistogramData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.HistogramData.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="classname"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.HistogramData.GetGraphType">
            <summary>
            Returns the type of the histogram graph object
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.HistogramData.InitialGraphSetup">
            <summary>
            Initialize graph settings
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPC.ControlChartData">
            <summary>
            Class to manage Control charts
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.ControlChartData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.ControlChartData.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="classname"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.ControlChartData.GetGraphType">
            <summary>
            Get the graph type
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.ControlChartData.InitializeControlChartRange">
            <summary>
            Initialize the control chart range
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.ControlChartData.InitialGraphSetup">
            <summary>
            Setup the initial graph
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.RS232Page">
            <summary>
            Comport Control Page
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.RS232Page.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.RS232Page.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.RS232Page.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.RS232Page.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.RS232Page.#ctor(MPT.USN.CommonLib.Comp.RS232)">
            <summary>
             Constructor
            </summary>
            <param name="comport"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.PulseSystem.eCommandState">
            <summary>
            eCommandState
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.eCommandState.WaitExcute">
            <summary>
            WaitExcute
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.eCommandState.Executing">
            <summary>
            Executing
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.eCommandState.Executed">
            <summary>
            Executed
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.eCommandState.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.PulseSystem.clsCommand">
            <summary>
            clsCommand
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.clsCommand._event">
            <summary>
            event
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.clsCommand._retunFlag">
            <summary>
            retunFlag
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.clsCommand._successPositionFlag">
            <summary>
            successPositionFlag
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.clsCommand._cmd">
            <summary>
            cmd
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.clsCommand._response">
            <summary>
            response
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.clsCommand._state">
            <summary>
            state
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.clsCommand._refKey">
            <summary>
            refKey
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.clsCommand.#ctor(System.Int32,System.String,System.Int32,System.Threading.AutoResetEvent)">
            <summary>
            clsCommand
            </summary>
            <param name="refkey"></param>
            <param name="cmd"></param>
            <param name="successposition"></param>
            <param name="evnt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.clsCommand.SetState(MPT.USN.CommonLib.Comp.PulseSystem.eCommandState)">
            <summary>
            SetState
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.clsCommand.CheckCommadSuccess">
            <summary>
            CheckCommadSuccess
            </summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.PulseSystem.clsCommand.evCommandCompleted">
            <summary>
            Event for command execute completed
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.clsCommand.RetunFlag">
            <summary>
            RetunFlag
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.clsCommand.Cmd">
            <summary>
            Cmd
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.clsCommand.Response">
            <summary>
            Response
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.clsCommand.State">
            <summary>
            State
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.clsCommand.RefKey">
            <summary>
            RefKey
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.PulseSystem.clsCommand.DelegateCommandCopleted">
            <summary>
            Delegate for command completed.
            </summary>
            <param name="sender"></param>
            <param name="state"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.PulseSystem.CommandUpdateParametersArg">
            <summary>
            
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.CommandUpdateParametersArg.#ctor(System.Int32,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="refkey"></param>
            <param name="response"></param>
            <param name="command"></param>
            <param name="Message"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.CommandUpdateParametersArg.#ctor(MPT.USN.CommonLib.Comp.PulseSystem.clsCommand,System.String)">
            <summary>
            CommandUpdateParametersArg
            </summary>
            <param name="cmd"></param>
            <param name="Message"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.CommandUpdateParametersArg.Cmd">
            <summary>
            
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.CommandUpdateParametersArg.Response">
            <summary>
            
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.CommandUpdateParametersArg.ReferenceKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.CommandUpdateParametersArg.Message">
            <summary>
            
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ChildrenPage">
            <summary>
            Class to manage seeing children on a page
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ChildrenPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ChildrenPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ChildrenPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ChildrenPage._comp">
            <summary>
            component
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ChildrenPage.#ctor(MPT.USN.CommonLib.Comp.ComponentBase)">
            <summary>
            Constructor
            </summary>
            <param name="comp"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Splash">
            <summary>
            Form for splash screen
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Splash.#ctor">
            <summary>
            Conmstructor
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Splash.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Splash.SetAppImage(System.Drawing.Image)">
            <summary>
            Set the main application image
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Splash.ShowProgress(System.String)">
            <summary>
            Display initialization progress on splash screen
            </summary>
            <param name="strMsg"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Splash.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Splash.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.DataUShort">
            <summary>
            Summary description for DataUShort.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataUShort.Save(System.Object)">
            <summary>
            Save the value after validation
            </summary>
            <param name="objVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataUShort.GetVal(MPT.USN.CommonLib.Enums.UnitTypes)">
            <summary>
            Return the value as an Object
            </summary>
            <param name="ut"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataUShort.#ctor">
            <summary>
            Constructor for Xml serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataUShort.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataUShort.#ctor(System.String,System.UInt16)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
            <param name="sVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataUShort.CopyDataFrom(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Copy data from another  DataUShort object
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataUShort.SetDefault">
            <summary>
            Set value to its default
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataUShort.ValToString">
            <summary>
            Convert the value to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataUShort.ValToString(System.String)">
            <summary>
            Convert the value to a formatted string
            </summary>
            <param name="fmt"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataUShort.ValToDefaultString">
            <summary>
            Convert the default value to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataUShort.ValFromString(System.String)">
            <summary>
            Set value from string
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataUShort.Increment">
            <summary>
            Increment by one
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataUShort.Decrement">
            <summary>
            Decrement by one
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataUShort.ObjRawVal">
            <summary>
            Get/Save the value from an unknown object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataUShort.RawVal">
            <summary>
            Get/Set the raw value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataUShort.Val">
            <summary>
            Get/Set the value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataUShort.Default">
            <summary>
            Get/Set the default
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.DataBool">
            <summary>
            Summary description for DataBool.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataBool.GetVal(MPT.USN.CommonLib.Enums.UnitTypes)">
            <summary>
            Return the value as an Object
            </summary>
            <param name="ut"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataBool.#ctor">
            <summary>
            Constructor for Xml serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataBool.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataBool.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
            <param name="val"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataBool.CopyDataFrom(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Copy data from another  DataBool object
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataBool.SetDefault">
            <summary>
            Set value to its default
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataBool.ValToString">
            <summary>
            Convert the value to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataBool.ValToString(System.String)">
            <summary>
            Convert the value to a formatted string
            </summary>
            <param name="fmt"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataBool.ValToDefaultString">
            <summary>
            Convert the default value to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataBool.SetTrue">
            <summary>
            Set the Value to true
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataBool.SetFalse">
            <summary>
            Set the Value to false
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataBool.IsTrue(System.Object)">
            <summary>
            Returns true if Val is true
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataBool.IsFalse">
            <summary>
            Returns false if Val is false
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataBool.ConvertValidate(System.Object)">
            <summary>
            Validate basics for this type
            </summary>
            <param name="oVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataBool.ValFromString(System.String)">
            <summary>
            Set value from string
            </summary>
            <param name="str"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataBool.ObjRawVal">
            <summary>
            Get/Save the value from an unknown object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataBool.RawVal">
            <summary>
            Get/Set the raw value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataBool.Val">
            <summary>
            Get/Set the value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataBool.Default">
            <summary>
            Get/Set the default
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataBool.SerDefault">
            <summary>
            Serialize the value
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.MPTControls.MPTTextboxWithColor">
            <summary>
            Class for MPTTextboxWithColor
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MPTControls.MPTTextboxWithColor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTTextboxWithColor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTTextboxWithColor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTTextboxWithColor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTTextboxWithColor.UpdateVal">
            <summary>
            Update the value of the control
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTTextboxWithColor.GetVal">
            <summary>
            Return the current Value of the underlying control
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTTextboxWithColor.SelectControl">
            <summary>
            Select the underlying control for input focus
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Login">
            <summary>
            Form to handle login
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Login.loggedInName">
            <summary>
            Current operator name
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Login.defaultLogInName">
            <summary>
            Default log in name
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Login.defaultBestPrivileges">
            <summary>
            Default best privilege
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Login.userPrivileges">
            <summary>
            Current operator security level
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Login.bestPrivileges">
            <summary>
            Current operator security level
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Login.userPrivilegesPreffered">
            <summary>
            Preffered operator security level
            Command line or hot key
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Login.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Login.InitialLogon">
            <summary>
            First time Logon
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Login.ReLogin">
            <summary>
            Allow to relogin as different user
            This also logs out the user
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Login.LogOut">
            <summary>
            Log out
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Login.SetPrivileges">
            <summary>
            =Set the privilege according to the preffered
            </summary>
            <returns>True if changed</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Login.GetUserPriveledges(System.String,System.String,System.String)">
            <summary>
            Return the Priveledges for this user
            </summary>
            <param name="username"></param>
            <param name="domain"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Login.ChangePrefferedPrivileges(MPT.USN.CommonLib.Enums.UserPrivileges)">
            <summary>
            Try to change the priveleges to this
            </summary>
            <param name="newPrivilege"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Login.SetBestPossiblePrivileges(System.IntPtr)">
            <summary>
            Get the best possiblke privileges for this user
            </summary>
            <param name="logonToken"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Login.OnChar(System.Char)">
            <summary>
            Repsond to new char press
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="F:MPT.USN.CommonLib.Login.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Login.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Login.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.Validations.ValidateTargetMinMaxPage">
            <summary>
            Page for Validate Min/Max
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.Validations.ValidateTargetMinMaxPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidateTargetMinMaxPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidateTargetMinMaxPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidateTargetMinMaxPage.#ctor(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Constructor
            </summary>
            <param name="dt"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.DynamicDataInsert">
            <summary>
            Class for the dynamic data list view
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DynamicDataInsert.#ctor(MPT.USN.CommonLib.MPTBase)">
            <summary>
            Constructor
            </summary>
            <param name="mptBase"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DynamicDataInsert.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DynamicDataInsert.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DynamicDataInsert.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.DBDataPropsPage">
            <summary>
            Page class for DBDataProps
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DBDataPropsPage.#ctor(MPT.USN.CommonLib.Comp.SPC.SPCGroup)">
            <summary>
            Constructor
            </summary>
            <param name="dbDataProps"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DBDataPropsPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DBDataPropsPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DBDataPropsPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DBDataPropsPage.ShowIt">
            <summary>
            Show the page based on privilege
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DBDataPropsPage.CanSafeDispose">
            <summary>
            Indicate whether this can safely disposed when run out of scene
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.DBDataProps">
            <summary>
            Class of data properties that get put to database
            </summary>
            <remarks>The Data prop list is a dynamically managed list of 
            data base members that represents fields and tables in the stored database.
            <para/>
            A DBDataProps component will be automatically generated.  The table for this data base item
            will be the class owner for this data item.  This will be its parent component of type DBDataPropClass.
            <para/>
            The main reason for these DBDataProp components is to have a place to save Control limits, averages, etc.
            <para/>
            </remarks>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DBDataProps.dsOwnerClassName">
            <summary>
            Owner Class Name
            </summary>        
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DBDataProps.dsDataName">
            <summary>
            Data Name
            </summary>        
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DBDataProps.ddUCLMean">
            <summary>
            Upper Control Limit (Mean)
            </summary>        
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DBDataProps.ddLCLMean">
            <summary>
            Lower Control Limit (Mean)
            </summary>        
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DBDataProps.ddAverageMean">
            <summary>
            Average (Mean)
            </summary>        
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DBDataProps.ddUCLRange">
            <summary>
            Upper Control Limit (Range)
            </summary>        
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DBDataProps.ddLCLRange">
            <summary>
            Lower Control Limit (Range)
            </summary>        
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DBDataProps.ddAverageRange">
            <summary>
            Average (Range)
            </summary>        
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DBDataProps.ddUCLRun">
            <summary>
            Upper Control Limit (Run)
            </summary>        
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DBDataProps.ddLCLRun">
            <summary>
            Lower Control Limit (Run)
            </summary>        
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DBDataProps.ddAverageRun">
            <summary>
            Average (Run)
            </summary>        
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DBDataProps.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DBDataProps.#ctor(System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DBDataProps.OwnerClassName">
            <summary>
            Get/set the OwnerClassName
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DBDataProps.DataName">
            <summary>
            Get/set the DataName
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.DBDataPropClass">
            <summary>
            Class for data property class
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DBDataPropClass.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DBDataPropClass.#ctor(System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.DbCompareInsert">
            <summary>
            Control to manage database compare tool
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DbCompareInsert.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DbCompareInsert.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DbCompareInsert.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DbCompareInsert.#ctor(System.Collections.Generic.List{MPT.USN.CommonLib.Data.DBControlTag})">
            <summary>
            Constructor
            </summary>
            <param name="dbControlTagList"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DbCompareInsert.eColDef.ComponentPath">
            <summary>Path</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DbCompareInsert.eColDef.Class">
            <summary>Class</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DbCompareInsert.eColDef.Name">
            <summary>Item Name</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DbCompareInsert.eColDef.FirstSN">
            <summary>First Serial No</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.DataDoubleMeanSigmaWatchInsert">
            <summary>
            A watch for mean and sigma of a Data Double
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DataDoubleMeanSigmaWatchInsert.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDoubleMeanSigmaWatchInsert.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDoubleMeanSigmaWatchInsert.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDoubleMeanSigmaWatchInsert.#ctor(MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
            Constructor
            </summary>
            <param name="ddDataToWatch">The data need to be watched for Mean and Sigma</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDoubleMeanSigmaWatchInsert.StartWatching">
            <summary>
            Start watching the mean and sigma
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDoubleMeanSigmaWatchInsert.StopWatching">
            <summary>
            Stop watching the mean and sigma
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataDoubleMeanSigmaWatchInsert.ShowIt">
            <summary>
            Show the page based on privilege
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.TimerItem">
            <summary>
            Timer queue items
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.TimerItem._completionObj">
            <summary>
            The Completion object
            </summary>
            <remarks>Could be a DataBool, SMMethodCall, or Callback</remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.TimerItem.#ctor(System.Double,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="secondsDuration">Duration before next trigger</param>
            <param name="completionObj"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.TimerItem.#ctor(System.Double,System.Object,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="secondsDuration">Duration before next trigger</param>
            <param name="completionObj"></param>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.TimerItem.Start">
            <summary>
            Start the timing operation
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.TimerItem.Suspend">
            <summary>
            Suspend (pause) the timing operation
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.TimerItem.Resume">
            <summary>
            Resumes the triggering
            </summary>
            <remarks>If this is not a continuous timer, the pause is reset.</remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.TimerItem.ActIfCompleted">
            <summary>
            Called in a tight loop to evaluate the timer trigger
            </summary>
            <returns>Returns true if timer item has completed and should 
            be removed from main registry list</returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.TimerItem.RemoveAfterCompletion">
            <summary>
            Get/Set the auto-removal flag
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.TimerItem.Name">
            <summary>
            Get/Set the name for this timer
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.TimerItem.IntervalSeconds">
            <summary>
            Set/Get the interval in seconds
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.Susp.SuspensionPage">
            <summary>
            Class to mangae the display of Suspension data
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.Susp.SuspensionPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.Susp.SuspensionPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.Susp.SuspensionPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.Susp.SuspensionPage.#ctor(MPT.USN.CommonLib.Comp.Susp.Suspension)">
            <summary>
            Constructor
            </summary>
            <param name="suspension"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPL.SPLSuspensionPage">
            <summary>
            Class for the suspension
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLSuspensionPage.#ctor(MPT.USN.CommonLib.Comp.SPL.SPLSuspension)">
            <summary>
            Constructor
            </summary>
            <param name="suspension"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLSuspensionPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLSuspensionPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLSuspensionPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.PanelWatches">
            <summary>
            Page control to show all watch windows
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PanelWatches.#ctor(MPT.USN.CommonLib.Comp.CompWatchList)">
            <summary>
             Constructor
            </summary>
            <param name="compWatchList"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PanelWatches.UpdatePage(System.String,System.String)">
            <summary>
            Opportunity to update something on the page
            </summary>
            <param name="cmd1"></param>
            <param name="cmd2"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PanelWatches.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PanelWatches.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PanelWatches.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ComponentMgr">
            <summary>
            Singleton to manage components.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ComponentMgr.MACHINE">
            <summary>
            Constant for root name
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ComponentMgr.TIMERROOTNAME">
            <summary>
            Constant for Timer root name
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ComponentMgr.WATCHLIST">
            <summary>
            Constant for WatchList name
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ComponentMgr.DATAPROPLIST">
            <summary>
            Constant for WatchList name
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ComponentMgr.timerRoot">
            <summary>
            Root node for timer objects
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMgr.Instance">
            <summary>
            Singleton logic
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMgr.GetComponent">
            <summary>
            Returns "Machine" component 
            </summary>
            <returns>Reference to the root CompMachine component</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMgr.ComponentExists(System.String)">
            <summary>
            Returns the component given its name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMgr.GetComponent(System.String)">
            <summary>
            Returns the component given its name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMgr.Save(System.String)">
            <summary>
            Save everything to disk
            </summary>
            <param name="filepath"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMgr.DestroyAll">
            <summary>
            Destroy all components
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMgr.CanClose">
            <summary>
            Check if OK to close
            </summary>
            <returns>True if OK to close</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMgr.InitializeAll">
            <summary>
            Initialize all components
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMgr.RegisterComp(MPT.USN.CommonLib.Comp.ComponentBase)">
            <summary>
            Register all components
            </summary>
            <param name="comp"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMgr.UnRegisterComp(MPT.USN.CommonLib.Comp.ComponentBase)">
            <summary>
            UnRegister component from component list
            </summary>
            <param name="comp"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMgr.Read(System.String,System.Type)">
            <summary>
            Read the component file
            </summary>
            <param name="filePath"></param>
            <param name="typeMachine"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMgr.GetXMLVersion(System.String)">
            <summary>
            Crack open the xml file and return the root node type
            </summary>
            <param name="filepath"></param>
            <returns></returns>
            <remarks>The string is returned instead of the the Type 
            in case the type is not recognized by CommonLib</remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMgr.GetRootNodeType(System.String)">
            <summary>
            Crack open the xml file and return the root node type
            </summary>
            <param name="filepath"></param>
            <returns></returns>
            <remarks>The string is returned instead of the the Type 
            in case the type is not recognized by CommonLib</remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMgr.ReadFromFile(System.String)">
            <summary>
            Deserializes and constructs from an Xml file
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMgr.GetSerializer(System.Type)">
            <summary>
            Get the cached serializer
            </summary>
            <param name="ty"></param>
            <returns></returns>
            <remarks>We cache it because it takes so long to create the MclXmlSerializer object.</remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMgr.ReadFromFile(System.String,System.Type)">
            <summary>
            Deserializes and constructs from an Xml file
            </summary>
            <param name="filePath"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMgr.ReadFromFile(System.String,System.Type,System.Boolean)">
            <summary>
            Deserializes and constructs from an Xml file
            </summary>
            <param name="filePath"></param>
            <param name="t"></param>
            <param name="bShowErrMsg"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMgr.RunUpdate">
            <summary>
            Run the Update thread.  This thread will run processes and Update
            command to all components
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMgr.GetComponentThreads">
            <summary>
            Return the created component threads
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMgr.RefreshComponentThreadPriorities">
            <summary>
            Refresh all component priorities
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMgr.UpdateAllComponents">
            <summary>
            This is called from the component 'update' thread 
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMgr.RebuildSubTree(System.Windows.Forms.TreeView,MPT.USN.CommonLib.Comp.ComponentBase)">
            <summary>
            Build the a portion of the tree
            </summary>
            <param name="tree"></param>
            <param name="newComp"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMgr.BuildTree(System.Windows.Forms.TreeView)">
            <summary>
            Build the component tree
            </summary>
            <param name="tree"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMgr.AddTreeNodes(System.Windows.Forms.TreeNodeCollection,MPT.USN.CommonLib.Comp.ComponentBase,System.Drawing.Font)">
            <summary>
            Build the tree of components
            </summary>
            <param name="parentNodes"></param>
            <param name="comp"></param>
            <param name="mnemonicFont"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMgr.IsMainThread">
            <summary>
            Returns true if current thread is Main loop Thread (not gui thread)
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMgr.GetMainThreadActivity">
            <summary>
            Save thread info to file 
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMgr.SetProcessThreadPriority(System.Threading.ThreadPriority)">
            <summary>
            Change the thread priority
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMgr.ResetSamplePeriodMonitor">
            <summary>
            Resets the loop count used to measure loop speed
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ComponentMgr._killThread">
            <summary>
            Flag to stop the threading
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMgr.ThreadProc">
            <summary>
             The thread used for process execution and component updating
            </summary>
            <remarks>
            There are 3 types of threads in MCL
            <list type="bullet">
            <item><description>The main app GUI thread</description></item>
            <item><description>The process (state machine) thread</description></item>
            <item><description>Component threads</description></item>
            </list>
            <para/>
            The process thread operates at about 5-6 millisecond rate.  It normally completes in under 1 ms 
            and sleeps the rest of the time.  On each loop, the process thread will execute actions or evaluate 
            conditional statements for each and every active process.  It will also update registered timers and 
            make calls to Update() for all components that have this overridden.
            <para/>
            Each component may activate its own thread (private member in base class).  Third-Party driver 
            components will activate its thread in order to marshall calls from the process thread to the 
            third-party component thread.  Other Components may use its thread to do heavy work that was 
            initiated from a process call.  This is necessary in order to keep the process thread fast.
            </remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMgr.RegisterTimer(System.Double,System.Object)">
            <summary>
            Register a timer to timeout or trigger after a delay
            </summary>
            <param name="seconds">Interval time in seconds</param>
            <param name="objCallback">The callback mechanism used on completion. This can be DataBool, SMMethodCall, Callback, or 
            System.Threading.TimerCallback for a continuous timer.</param>
            <returns>The new timer item</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MPT.USN.CommonLib.Comp.ComponentMgr.RegisterTimer(System.Double,System.Object,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:MPT.USN.CommonLib.Comp.ComponentMgr.UnregisterTimer(MPT.USN.CommonLib.Comp.TimerItem)" -->
        <member name="M:MPT.USN.CommonLib.Comp.ComponentMgr.UpdateAllTimers">
            <summary>
            Give Timer a chance to update its countdown
            </summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.ComponentMgr.OnMainThreadRate">
            <summary>
            Event to notify any of THread rate change
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ComponentMgr.MachineComp">
            <summary>
            Reference to the root machine component
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ComponentMgr.MainThread">
            <summary>
            Returns the Main looping Thread
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ComponentMgr.ThreadRate">
            <summary>
            Get the current thread rate
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPC.XBarRChartData">
            <summary>
            Data class for XBarR chart
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.XBarRChartData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.XBarRChartData.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="classname"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.XBarRChartData.InitialGraphSetup">
            <summary>
            First graph settings
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.XBarRChartData.GetGraphType">
            <summary>
            Return the type of the XBarRChartGraph
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.XBarRChartData.GetControlLimitInsert">
            <summary>
            return insert graphic to display control limits
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.XBarRChartData.CalculateControlLimits">
            <summary>
            Calc control limits for the Mean and Range charts
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.XBarRChartData.ddUSLRange">
            <summary>
            Upper Specification Limit Range parameter
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.XBarRChartData.ddLSLRange">
            <summary>
            Lower Specification Limit Range parameter
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.XBarRChartData.dsYAxisTitle_Range">
            <summary>
            Label for the Y Axis
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.XBarRChartData.CopyTo(MPT.USN.CommonLib.Comp.SPC.SPCData@)">
            <summary>
            to make a copy of the object without cloning
            </summary>
            <param name="spcData"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.XBarRChartData.Clone(System.Type)">
            <summary>
            To clone object
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.XBarRChartData.UCLRange">
            <summary>
            Upper Control Limit parameter Range
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.XBarRChartData.LCLRange">
            <summary>
            Lower Control Limit Range parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.XBarRChartData.USLRange">
            <summary>
            Upper Specification Limit Range parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.XBarRChartData.LSLRange">
            <summary>
            Lower Specification Limit Range parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.XBarRChartData.XBarBarRange">
            <summary>
            XBarBarRange parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.XBarRChartData.YAxisTitle_Range">
            <summary>
            Label for the Y Axis
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.PulseSystem.ProcessStep">
            <summary>
            ProcessStep
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.ProcessStep.diStepID">
            <summary>
            Access process step ID.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.ProcessStep.diShapeID">
            <summary>
            Access process shape ID
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.ProcessStep.dbLastStep">
            <summary>
            Access last step setting. true = this step is last step.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.ProcessStep.dbEPCEnable">
            <summary>
            Access step EPC Enable. true = use.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.ProcessStep.dbAutoTransit">
            <summary>
            Access step auto transit. true = transition auto.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.ProcessStep.dbUseRampUp">
            <summary>
            Access step ramp up usage. true = use
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.ProcessStep.dbUseRampDwn">
            <summary>
            Acess step ramp down usage. true = use.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.ProcessStep.dbShutterOpen">
            <summary>
            Access step shutter state. true = open
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.ProcessStep.diShotMode">
            <summary>
            Access step shot mode 0 = shots, 1 = duration.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.ProcessStep.diShotsToFire">
            <summary>
            Access number of shot for this step will fired laser in shots mode..
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.ProcessStep.diDuration">
            <summary>
            Access time duration (ms) for shot in duration mode.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.ProcessStep.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Construct for first time creation
            </summary>
            <param name="step"></param>
            <param name="shape"></param>
            <param name="lastStep"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.ProcessStep.#ctor">
            <summary>
            Constructor for serialize.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.ProcessStep.SetLasetStep">
            <summary>
            Access process shape ID
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.ProcessStep.StepID">
            <summary>
            Access process step ID.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.ProcessStep.ShapeID">
            <summary>
            Access last step setting.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.ProcessStep.EPCEnable">
            <summary>
            Get/Set EPC enable for step. true for use EPC
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.ProcessStep.AutoTransition">
            <summary>
            Get/Set Autotransition for step. true = automatic transition.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.ProcessStep.UseRampUp">
            <summary>
            Get/Set ramp up time usage, true = using.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.ProcessStep.UseRampDown">
            <summary>
            Get/Set ramp down time usage, true = using.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.ProcessStep.ShutterOpen">
            <summary>
            Get/Set shutter state for step.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.ProcessStep.ShotMode">
            <summary>
            Get/Set mode for shot.0 = shots , 1 = duration.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.ProcessStep.ShotsToFire">
            <summary>
            Get/Set number of shot for fire laser of current step in shots shot mode.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.PulseSystem.ProcessStep.Duration">
            <summary>
            Get/Set time duration for shot in duration shot mode
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IDSystem.ID">
            <summary>
            Class for ID component
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IDSystem.ID.dsDataRD">
            <summary>
            Data be read from RFID.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IDSystem.ID.dsDataWR">
            <summary>
            Data be wrote to RFID.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IDSystem.ID.dsRWAddr">
            <summary>
            Default Read / Write Address.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IDSystem.ID.dsLiftBoatResult">
            <summary>
            Result data from lifted boat.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IDSystem.ID.diReadBytes">
            <summary>
            Number of bytes to be read.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IDSystem.ID.diByteReservedResult">
            <summary>
            Bytes of reserved for result.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IDSystem.ID.dsSvDataRD">
            <summary>
            Service Data be read from RFID.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IDSystem.ID.dsSvDataWR">
            <summary>
            Service Data be wrote to RFID.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IDSystem.ID.dsSvRWAddr">
            <summary>
            Service Default Read / Write Address.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IDSystem.ID.dbForceDataWR">
            <summary>
            Force data to write.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IDSystem.ID.dbSvAutoRW">
            <summary>
            Service Auto Read / Write.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IDSystem.ID.dbSvAutoTagInc">
            <summary>
            Service auto tag data increse
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IDSystem.ID.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IDSystem.ID.#ctor(System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IDSystem.ID.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add Property Pages
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IDSystem.ID.Initialize">
            <summary>
            Initialize this component
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IDSystem.ID.ReadData(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
             Read Data
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IDSystem.ID.WriteData(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
             Write Data
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IDSystem.ID.SvReadData(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
             Service Read Data
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IDSystem.ID.SvWriteData(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
             Service Write Data
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IDSystem.ID.GetDefault(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
             Get Default Data
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IDSystem.ID.FormatField(System.String,System.Int32)">
            <summary>
            format text to a fixed width
            </summary>
            <param name="text"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IDSystem.ID.IdRdWrAddr">
            <summary>
            ID Read / Write Address.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IDSystem.ID.IdReadData">
            <summary>
            Property of Default ID Read Data.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IDSystem.ID.IdWriteData">
            <summary>
            Property of Default ID Write Data.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IDSystem.ID.SvIdRdWrAddr">
            <summary>
            Service ID Read / Write Address.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IDSystem.ID.SvIdReadData">
            <summary>
            Service Property of Default ID Read Data.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IDSystem.ID.SvIdWriteData">
            <summary>
            Service Property of Default ID Write Data.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.CompTabControl">
            <summary>
            Class derived from TabControl to manage out Component pages
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompTabControl.clearing">
            <summary>
            Flag to indicate that the tabs are clearing out
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompTabControl.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Respond to a change in tab selection
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompTabControl.RebuildTabPages(MPT.USN.CommonLib.MPTBase)">
            <summary>
            remove all the tab controls
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.TagTabList">
            <summary>
            Class to manage the list of tabbed pages
            </summary>
            <remarks>This is useful when pages are hidden/shown depending on user priveledges</remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.TagTabList.AddTab(System.String,MPT.USN.CommonLib.Comp.PageBase)">
            <summary>
            Add a tab page to this
            </summary>
            <param name="name"></param>
            <param name="page"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.TagTabList.AddProductionTab(System.String,MPT.USN.CommonLib.FixedVisibleChangePage)">
            <summary>
            Add a production tab
            </summary>
            <param name="name"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.TagTabList.ShowEnablePages(System.Windows.Forms.TabControl)">
            <summary>
            Show, hide, enable, disable the tab pages
            </summary>
            <param name="tabControl"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.SMCondition">
            <summary>
            Class for the State Machine Condition properties
            </summary>
            <remarks>
            It is important that an SMCondition property does not cause delays in the state machine process loop thread.
            <para/>
            Question: When does a component use this type of property?<para/>
            Answer: If the boolean property could possibly be used in a process (state machine) in a conditional statement, 
            then tag it with [SMCondition].
            <para/>
            An SMCondition tagged property is only useful in a Component object that is a decendant of the root Machine component.
            <example>A boolean that will be selectable as an 'Condition' in a process (state machine)
            <code>
            // Do not let this be serialized
            [XmlIgnore]
            public bool MyProperty
            {
                // Tag the 'get' to make this selectable in the state machine
                [SMCondition]
                get
                {
                    // Very important not to do heavy work here.
                    return _myVal;
                }
                set
                {
                    _myVal = value;
                }
            }
            </code>
            </example>
            </remarks>
            <seealso cref="T:MPT.USN.CommonLib.SMMethodCall"/>
        </member>
        <member name="F:MPT.USN.CommonLib.SMCondition.propName">
            <summary>
            Name for the property
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.MCArg">
            <summary>
            Class for the State Machine Method call argument
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MCArg.order">
            <summary>
            order of the arguements
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MCArg.defData">
            <summary>
            Default Data Object name
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MCArg.description">
            <summary>
            Description of arg
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MCArg.unitType">
            <summary>
            Unit type for the arg
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MCArg.unitRateType">
            <summary>
            Unit type for the arg
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MCArg.unitTypeRespect">
            <summary>
            Unit type for the arg
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MCArg.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MCArg.CompareTo(System.Object)">
            <summary>
            Implementation of IComparable
            </summary>
            <param name="otherObj"></param>
            <returns></returns>
        </member>
        <member name="T:MPT.USN.CommonLib.SMMethodCall">
            <summary>
            Class used to tag a method as process (State Machine) selectable method call.
            It is also used to flag completion to the Action statement, record duration 
            of call, and record hit count.
            </summary>
            <remarks>
            An SMMethodCall method is only useful in a Component object that is a decendant of the root Machine component.
            <para/>
            It is important that an SMMethodCall method does not cause delays in the state machine process loop thread.
            For this reason we have two possible means to implement.  One for light work, and another for heavy work.
            <para/>
            Arguments may be added to the method.  However, they must be derived from DataType (see example).
            <para/>
            Question: When does a component use this type of method?<para/>
            Answer: If the method could possibly be used in a process (state machine), then define it as a process method.
            <example>A method that will be selectable as an 'Action' in a process (state machine)
            <code>
            public SMMethodCall LightWorkingMethod(SMMethodCall caller)
            {
                // This stament is required
                SMMethodCall mc = MCBegin(caller);
            
                //
                // Do light work here.  Heavy work should be spawned to worker thread (see next example).
                //
            
                // Must end this way
                return mc.End();
            }
            </code>
            </example>
            <example>A method that does heavy work
            <code>
            
            private SMMethodCall _mcHeavyWork = null;
            
            public SMMethodCall HeavyWorkingMethod(SMMethodCall caller)
            {
                _mcHeavyWork = MCBegin(caller);
                lock (_workerCalls)
                {
                    // Add the 'DoHeavyWork' callback to the list of worker thread calls.
                    _workerCalls.Add(new DelegateParmVoid(DoHeavyWork));
                }
            
                // Activate (or reactivate) the worker thread for this component
                StartThreadLoop();
            
                // We must return back to the process thread quickly.  But we are not yet completed,  
                // so we return using EndDeferred.  Later the worker thread callback must call 
                // _mcHeavyWork.End() to tell process we have finally completed.
                return _mcHeavyWork.EndDeferred();
            }
            
            private void DoHeavyWork()
            {
            
                //
                // Do heavy work here.
                //
            
                // Finally we can tell state machine that our 'Action' has completed its task.
                _mcHeavyWork.End();
            }    
            </code>
            </example>
            <example>A method that uses arguments
            <code>
            
            // The MCArg tags will add more useful information when the user creates the call in the state machine editor.
            [MCArg(order = 1, description = "position1", unitType = Enums.UnitTypes._LINEAR)]
            [MCArg(order = 2, description = "position2", unitType = Enums.UnitTypes._LINEAR)]
            [MCArg(order = 3, description = "speed", unitType = Enums.UnitTypes._LINEAR, unitRateType = Enums.RateType.velocity, unitTypeRespect = Enums.UnitTypes._TIME)]
            public virtual SMMethodCall MoveContoured2(SMMethodCall mcCaller, DataDouble ddPos1, DataDouble ddPos2, DataDouble ddSpeed)
            {
                SMMethodCall mc = MCBegin(mcCaller);
                _MotionSystem.MoveContoured(mc, this, new double[] { ddPos1.Val, ddPos2.Val }, ddSpeed.Val);
                return mc.End();
            } 
            </code>
            </example>
            </remarks>
            <seealso cref="T:MPT.USN.CommonLib.SMCondition"/>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodCall.ToString">
            <summary>
            Overide the standard To String
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodCall.CompareTo(System.Object)">
            <summary>
            Implementation of IComparable
            </summary>
            <param name="otherObj"></param>
            <returns></returns>
        </member>
        <member name="F:MPT.USN.CommonLib.SMMethodCall.timeoutMsg">
            <summary>
            The timeout message;
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodCall.HandleException(MPT.USN.CommonLib.U.LogOptions)">
            <summary>
            Try to pause or stop the State Machine
            </summary>
            <param name="smOptions"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.SMMethodCall._invoker">
            <summary>
            Set to true if this object is original invoker.
            This is used to pass the action reference during the initial Begin
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodCall.ResetRef">
            <summary>
            Reset the ref count to zero
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodCall.AddRef">
            <summary>
            Add to the completion counter
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodCall.SubRef">
            <summary>
            Subtract to the completion counter
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodCall.InvokeStart">
            <summary>
            Start of Invoke
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodCall.InvokeWait">
            <summary>
            Wait for the reference to match incoming reference
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.SMMethodCall._diCount">
            <summary>
            Completed flag
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.SMMethodCall.dbCompleted">
            <summary>
            Completed flag
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.SMMethodCall.alertItem">
            <summary>
            AlertItem if is in alert
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.SMMethodCall._ddDuration">
            <summary>
            Duration of the call
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.SMMethodCall.Tag">
            <summary>
            Get/Set the completed check delay
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.SMMethodCall._argList">
            <summary>
            Default Data Object name
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodCall.GetArgDescription(System.Int32)">
            <summary>
            Get the argument description
            </summary>
            <param name="iArg"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodCall.GetArgUnitType(System.Int32)">
            <summary>
            Get the argument UnitType
            </summary>
            <param name="iArg"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodCall.GetArgUnitRateType(System.Int32)">
            <summary>
            Get the argument UnitType
            </summary>
            <param name="iArg"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodCall.GetArgUnitTypeRespect(System.Int32)">
            <summary>
            Get the argument UnitType
            </summary>
            <param name="iArg"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodCall.GetArgDefaultData(System.Int32)">
            <summary>
            Get the default argument
            </summary>
            <param name="iArg"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodCall.#ctor(MPT.USN.CommonLib.Process.SMAction)">
            <summary>
            Constructor for the initial Invoker
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodCall.#ctor(MPT.USN.CommonLib.MPTBase,System.String,System.Reflection.MethodInfo)">
            <summary>
            Default constructor
            </summary>
            <param name="mptBase"></param>
            <param name="name"></param>
            <param name="methodInfo"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodCall.UnRegister">
            <summary>
            Unregister all the objects
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodCall.Begin(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Make this call at the beginning of a SMMethodCall Method
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodCall.Begin">
            <summary>
            Make this call at the beginning of a SMMethodCall Method
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodCall.EndDeferred">
            <summary>
            Called at the end of a method that has spawned off a thread call
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodCall.End">
            <summary>
            Called at the end of a SMMethodCall function
            </summary>
            <returns>itself</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodCall.GetThreadUsageItems">
            <summary>
            Retrieve the thread usage items
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodCall.ThreadItemBegin">
            <summary>
            Begin of the thread item
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodCall.ThreadItemBegin(System.String)">
            <summary>
            Begin of the thread item
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodCall.ThreadItemEnd">
            <summary>
            End of the thread item
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.SMMethodCall.Sleep(System.String,System.Int32)">
            <summary>
            Do a sleep and record the sleep thread item
            </summary>
            <param name="sleepName"></param>
            <param name="ms"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.SMMethodCall.Name">
            <summary>
            Get the name of this object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.SMMethodCall.DataMgr">
            <summary>
            Easy access to data manager
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.SMMethodCall.CompMgr">
            <summary>
            Easy access to component manager
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.SMMethodCall.MethodName">
            <summary>
            Get the method name
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.SMMethodCall.MethodInfo">
            <summary>
            Get the MethodInfo
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.SMMethodCall.Ref">
            <summary>
            Get the ref number
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.SMMethodCall.AlertRegisterFlag">
            <summary>
            Get/Set the alert register flag
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.SMMethodCall.Parent">
            <summary>
            Get the parent object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.SMMethodCall.action">
            <summary>
            State when method was called
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.SMMethodCall.Duration">
            <summary>
            Get the time to complete (Seconds)
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.SMMethodCall.Root">
            <summary>
            Get the root object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.SMMethodCall.TimeToUpdate">
            <summary>
            Return true if ready for updating
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.SMMethodCall.Completed">
            <summary>
            Get/Set completed flag
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.OptionsPanel">
            <summary>
            Summary description for Options.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.OptionsPanel.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.OptionsPanel.#ctor(System.Windows.Forms.Button)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.OptionsPanel.OnApply">
            <summary>
            Response to Apply button
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.OptionsPanel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.OptionsPanel.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.OptionsPanel.CompMgr">
            <summary>
            Create reference for easy access to component manager
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.OptionsPanel.DataMgr">
            <summary>
            Easy access to data manager
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.DataString">
            <summary>
            Summary description for DataString.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataString.GetVal(MPT.USN.CommonLib.Enums.UnitTypes)">
            <summary>
            Return the value as an Object
            </summary>
            <param name="ut"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataString.#ctor">
            <summary>
            Constructor for Xml serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataString.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataString.#ctor(System.String,System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
            <param name="strVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataString.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="strVal"></param>
            <param name="recordable"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataString.#ctor(System.String,System.Enum)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
            <param name="en"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataString.#ctor(System.String,System.Enum,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="en"></param>
            <param name="recordable"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataString.Register(MPT.USN.CommonLib.MPTBase)">
            <summary>
            Register this data type
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataString.ResetArray(System.Int32)">
            <summary>
            Recreate entire array with new size
            </summary>
            <param name="nNewSize"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DataString.array">
            <summary>
            String array to be stored in XML.  Do not modiy directly.
            Use + or - operators or [] to access or modify.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataString.op_Addition(MPT.USN.CommonLib.Data.DataString,System.String)">
            <summary>
            Plus operator to append to string array
            </summary>
            <param name="dt"></param>
            <param name="newStr"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataString.op_Subtraction(MPT.USN.CommonLib.Data.DataString,System.String)">
            <summary>
            Minus operator to append to string array
            </summary>
            <param name="dt"></param>
            <param name="newStr"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataString.IsTrue(System.Object)">
            <summary>
            Returns true if Val is true
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataString.ConvertValidate(System.Object)">
            <summary>
            Validate basics for this type
            </summary>
            <param name="oVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataString.CopyDataFrom(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Copy data from another  DataString object
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataString.SetDefault">
            <summary>
            Set value to its default
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataString.ValToString">
            <summary>
            Convert the value to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataString.ValToString(System.String)">
            <summary>
            Convert the value to a formatted string
            </summary>
            <param name="fmt"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataString.ValToDefaultString">
            <summary>
            Convert the default value to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataString.ValFromString(System.String)">
            <summary>
            Set value from string
            </summary>
            <param name="str"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataString.UniqueArrayElements">
            <summary>
            Get flag that returns true if all array elements are unique
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataString.Item(System.Int32)">
            <summary>
            Get/set string array element based on index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataString.Count">
            <summary>
            Gets the count of children for this object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataString.Ty">
            <summary>
            Returns the Stored type
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataString.ObjRawVal">
            <summary>
            Get/Save the value from an unknown object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataString.RawVal">
            <summary>
            Get/Set the raw value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataString.Val">
            <summary>
            Get/Set the value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataString.Default">
            <summary>
            Get/Set the default
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.DataShort">
            <summary>
            Summary description for DataShort.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataShort.GetVal(MPT.USN.CommonLib.Enums.UnitTypes)">
            <summary>
            Return the value as an Object
            </summary>
            <param name="ut"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataShort.#ctor">
            <summary>
            Constructor for Xml serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataShort.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataShort.#ctor(System.String,System.Int16)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
            <param name="sVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataShort.#ctor(System.String,System.Int32,MPT.USN.CommonLib.Enums.UnitTypes)">
            <summary>
            Constructor for Distance setting
            </summary>
            <param name="name"></param>
            <param name="iVal"></param>
            <param name="unitType"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataShort.#ctor(System.String,System.Int32,MPT.USN.CommonLib.Enums.UnitTypes,MPT.USN.CommonLib.Enums.RateType,MPT.USN.CommonLib.Enums.UnitTypes)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
            <param name="iVal"></param>
            <param name="unitType"></param>
            <param name="rate"></param>
            <param name="unitTypeRespect"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataShort.CopyDataFrom(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Copy data from another  DataShort object
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataShort.SetDefault">
            <summary>
            Set value to its default
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataShort.ValToString">
            <summary>
            Convert the value to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataShort.ValToString(System.String)">
            <summary>
            Convert the value to a formatted string
            </summary>
            <param name="fmt"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataShort.ValToDefaultString">
            <summary>
            Convert the default value to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataShort.ValFromString(System.String)">
            <summary>
            Set value from string
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataShort.Increment">
            <summary>
            Increment by one
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataShort.Decrement">
            <summary>
            Decrement by one
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataShort.ObjRawVal">
            <summary>
            Get/Save the value from an unknown object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataShort.RawVal">
            <summary>
            Get/Set the raw value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataShort.Val">
            <summary>
            Get/Set the value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataShort.Default">
            <summary>
            Get/Set the default
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.MultiLingual">
            <summary>
            Class to add translations
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MultiLingual.AddItems">
            <summary>
            Add all translations to each enum defined
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.MultiLingual.eTag">
            <summary>
            Tags for multi-lingual translations
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MultiLingual.eTag.ResetResponseModel">
            <summary>Reset Response model?</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MultiLingual.eTag.AlertInFeedSlideOutSensor">
            <summary>Alert InFeedSlideOut Sensor</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MultiLingual.eTag.AlertBoatMisalignmentatLoadIn">
            <summary>Misalignment detected at Load In. Please take off all boats at Load In and check alignment before continue.</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MultiLingual.eTag.AlertOutFeedSlideSensor">
            <summary>OutFeedSlide sensor is OFF over time limit . Please check sensor OutFeedSlide before start continue.</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MultiLingual.eTag.AlertSafetyCheck">
            <summary>Safety Windows is open. Please close windows before continue.</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MultiLingual.eTag.AlertMisalignmentLoadInandIndexer">
            <summary>Mis-alignment detected at Indexer. 1 Boat  stay at CamInFeed more than 10 cycles. 
            This  event will cause  Mystery boat. Please clear all boat and  check Main Feed and Load In alignment.</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MultiLingual.eTag.WarningEarlyLiftBoat">
            <summary>You just lift up boat before  the boat move to start position</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MultiLingual.eTag.AlertWhenCannotFindComponentForAction">
            <summary>No component object for newAction.</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MultiLingual.eTag.TimeoutWaitingFor">
            <summary>Timeout waiting for {0}.</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MultiLingual.eTag.AlertMysteryBoatCLEARBOATS">
            <summary>Mystery boat (Fake boat) detected. Last suspension is at 20. Please CLEAR BOATS. Detail Boat0 [3] at [20] is Active.
            Boat1 4] at [7] is Active. Boat2 [48] at [18] is Idle. (See log for more detail).</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MultiLingual.eTag.AlertMysteryBoatDEACTIVATED">
            <summary>Mystery boat (Fake boat) detected. Last suspension is at {0}. The fake boat is being deactivated now...</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MultiLingual.eTag.AlertFailMoveSingleAxisAbs">
            <summary>Fail to MoveSingleAxisAbsLimitWait for {0} to {1:f3} with speed {2:f3}."</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MultiLingual.eTag.AlertFailMoveSingleAxisAbsWait">
            <summary>Fail to MoveSingleAxisAbsLimitWait for {0} to {1:f3} with speed {2:f3}. msec wait = {3}."</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MultiLingual.eTag.AlertNonMCLUnkThread">
            <summary>A Fatal error occurred! SPLBackEnd needs to be closed. 
            Reason: System.DllNotFoundException: Unable to load DLL ‘A32Sys.dll’ : The specified module could not be found.</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MultiLingual.eTag.HOMEThenClearBoats">
            <summary>Please try to HOME {0}, then CLEAR BOATS!</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MultiLingual.eTag.ManuallyCheck">
            <summary>Please manually check {0}!</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MultiLingual.eTag.HOMEThenResumeRun">
            <summary>Please try to HOME {0}, then click Start to resume running!</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.Validations.ValTargetMinMaxInsert">
            <summary>
            Basic Control for mean/min/max
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValTargetMinMaxInsert.#ctor(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Constructor
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValTargetMinMaxInsert.OnRefresh">
            <summary>
            Refresh due to changes in Dt
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.Validations.ValTargetMinMaxInsert.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValTargetMinMaxInsert.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValTargetMinMaxInsert.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TransferFunctions.SecondOrderPage">
            <summary>
            Class for SecondOrder definitions
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.SecondOrderPage._graph">
            <summary>
            Reference to the graph panel
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SecondOrderPage.#ctor(MPT.USN.CommonLib.Data.TransferFunctions.SecondOrder)">
            <summary>
            Constructor
            </summary>
            <param name="secondOrder"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SecondOrderPage.OnRefresh">
            <summary>
            Used to notify this page of an update required
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SecondOrderPage.OnPageLoad">
            <summary>
            Set up for the first time with valid window handle and parental windows established
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.SecondOrderPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SecondOrderPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SecondOrderPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.SecondOrderPage.GetGraph">
            <summary>
            Property that returns the reference to the graph panel
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TransferFunctions.MultiVar">
            <summary>
            Class to define MultiVar least squares fit transfer function
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.MultiVar.#ctor">
            <summary>
            Constructor for serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.MultiVar.#ctor(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            For use when not serializing but using all defaults
            </summary>
            <param name="dt"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.MultiVar.Name">
            <summary>
            Name of TransferFunction class
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TFData">
            <summary>
            TFData: class to hold 1 data point for transfer function
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFData.#ctor(System.Object,System.Object[],System.Double)">
            <summary>
            Construct with response, input, and the error
            </summary>
            <param name="response"></param>
            <param name="objInputArray"></param>
            <param name="error"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFData.#ctor(System.Object[])">
            <summary>
            Construct with inputs only. Others will be 0
            </summary>
            <param name="objInputArray"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFData.#ctor(System.String)">
            <summary>
            Construct with a comma delimiter string, first item is response, nex items are inputs
            Last item for error. Mainly for reading back from file.
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFData.ToString">
            <summary>
            Convert data to string for writing transfer function file
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFData.GetDistanceTo(MPT.USN.CommonLib.Data.TFData)">
            <summary>
            Get Euclidean distance from this to another TFData point
            </summary>
            <param name="anotherTFData"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFData.GetDistanceTo(MPT.USN.CommonLib.Data.TFData,System.Int32)">
            <summary>
            Get distance from this to another datapoint, in specific direction
            </summary>
            <param name="anotherTFData"></param>
            <param name="direction">
            The input direction that we want to take distance. Start from 0.
            For example: for 2 inputs transfer function, we will have 2 directions for input: 0,1
            </param>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TFData.Response">
            <summary>
            Get/Set the response
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TFData.Inputs">
            <summary>
            Get the input list
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TFData.AbsoluteError">
            <summary>
            Get the absolute value of Error for weighing
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TFData.OwnerBin">
            <summary>
            Get/Set the owner bin
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.Tables.FileTable">
            <summary>
            Class to manage persistent table
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.Tables.FileTable.diMaxRows">
            <summary>
            Maximum row length of file
            -1 - File that keeps growing
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.Tables.FileTable.dsFilepath">
            <summary>
            File path
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.Tables.FileTable.dsHeader">
            <summary>
            Access to string array of "Column Title"
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Tables.FileTable.#ctor">
            <summary>
            Empty Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Tables.FileTable.#ctor(System.String,System.String)">
            <summary>
            1st time creation constructor
            </summary>
            <param name="filepath"></param>
            <param name="header"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Tables.FileTable.#ctor(System.String,System.String,System.Int32)">
            <summary>
            1st time creation constructor
            </summary>
            <param name="filepath"></param>
            <param name="header"></param>
            <param name="maxRows"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Tables.FileTable.Clone">
            <summary>
            Create duplicate of this FileTable Object
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Tables.FileTable.SaveOld(MPT.USN.CommonLib.Data.Tables.FileTable)">
            <summary>
            Create backup from a FileTable Object
            </summary>
            <param name="ftCurrent"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Tables.FileTable.RevertFromOld(MPT.USN.CommonLib.Data.Tables.FileTable)">
            <summary>
            Revert backup from a FileTable Object
            </summary>
            <param name="ftOld"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Tables.FileTable.Clear">
            <summary>
            Remove all history from buffer
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Tables.FileTable.ClearInternal">
            <summary>
            Remove all history from buffer
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Tables.FileTable.Append(System.Object[])">
            <summary>
            Append a series of rows
            </summary>
            <param name="newRow">Array of rows</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Tables.FileTable.Append(System.Object[],System.Int32)">
            <summary>
            Replace rows starting with specific row
            </summary>
            <param name="newRow"></param>
            <param name="iRow"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Tables.FileTable.RemoveAt(System.Int32,System.Object[])">
            <summary>
            Remove the row at the specific position
            </summary>
            <param name="index"></param>
            <param name="newRow"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Tables.FileTable.RemoveGroup(System.Collections.ArrayList,System.Object[])">
            <summary>
            remove specific set of rows
            </summary>
            <param name="indexes"></param>
            <param name="newRow"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Tables.FileTable.AppendInternal(System.Object[],System.Int32,MPT.USN.CommonLib.Data.Tables.FileTable.AddType)">
            <summary>
            AppendInternal a new row.   Roll out oldest if necessary
            </summary>
            <param name="newRow"></param>
            <param name="iRow"></param>
            <param name="addtype"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Tables.FileTable.GetCell(System.Int32,System.Int32)">
            <summary>
            Get the value of a specific field
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Tables.FileTable.GetCell(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get one element of the table
            </summary>
            <param name="row">Zero based row index</param>
            <param name="col">Zero based col index</param>
            <param name="doubleDefault"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Tables.FileTable.GetCellInternal(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get one element of the table
            </summary>
            <param name="row">Zero based row index</param>
            <param name="col">Zero based col index</param>
            <param name="doubleDefault"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Tables.FileTable.FindInputIndex(System.String)">
            <summary>
            locate the row index given the text of the first column
            </summary>
            <param name="value">string value to look for in the 1st col</param>
            <returns>Index of the row</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Tables.FileTable.UpdateMaxRows(System.Int32)">
            <summary>
            needed to support changes to maxrows from user
            </summary>
            <param name="maxrows"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Tables.FileTable.GetColumn(System.Int32)">
            <summary>
            Get an entire column
            (Zero-based)
            </summary>
            <param name="col"></param>
            <returns>An array of the entire column.
            Returns null if que is empty or column dosen't exist.</returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.Tables.FileTable.MaxRows">
            <summary>
            Return the max rows allowed
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.Tables.FileTable.FilePath">
            <summary>
            Get/Set the File Path
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.Tables.FileTable.Header">
            <summary>
            Get/Set the "Column Title" data value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.Tables.FileTable.Count">
            <summary>
            Get actual size of file table, minus the header
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.Tables.FileTable.AddType">
            <summary>
            Enum for row editing
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.Tables.FileTable.AddType.Append">
            <summary>Append row to the EOF</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.Tables.FileTable.AddType.Replace">
            <summary>Replace rows</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.Tables.FileTable.AddType.Insert">
            <summary>Insert rows</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.DataPropPage">
            <summary>
            Class to contain all properties of DataType
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DataPropPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataPropPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataPropPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataPropPage.#ctor(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.VisionPage">
            <summary>
            Summary description for CameraPage.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.VisionPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionPage.#ctor(MPT.USN.CommonLib.Comp.VisionSystem.Camera)">
            <summary>
            Constructor
            </summary>
            <param name="camera"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.VisionPage.RefCamera">
            <summary>
            Get the reference to the camera
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.WorkItem.CompMgr">
            <summary>
            Easy access to component manager
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.WorkItem.ProcMgr">
            <summary>
            Easy access to process manager
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.Synchronizer">
            <summary>
            Class to handle thread synchonizations
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.Synchronizer.BeginInvoke(System.Delegate)">
            <summary>
            Implement BeginInvoke
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.Synchronizer.SmartInvoke(System.Delegate,System.Object[])">
            <summary>
            Implement SmartInvoke
            </summary>
            <remarks>Calls and continues execution</remarks>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.Synchronizer.BeginInvoke(System.Delegate,System.Object[])">
            <summary>
            Implement BeginInvoke
            </summary>
            <remarks>Calls and continues execution</remarks>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.Synchronizer.EndInvoke(System.IAsyncResult)">
            <summary>
            Implement EndInvoke
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.Synchronizer.Invoke(System.Delegate,System.Object[])">
            <summary>
            Implement Synchronous Invoke
            </summary>
            <remarks>Calls and waits for completion</remarks>
            <param name="method"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.Synchronizer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.Synchronizer.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.Synchronizer.Run">
            <summary>
            Loop to do the work
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.Synchronizer.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.Synchronizer.InvokeRequired">
            <summary>
            Implement the InvokeRequired
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.Synchronizer.CompMgr">
            <summary>
            Easy access to component manager
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.Synchronizer.WorkerThread">
            <summary>
            Class for worker thread
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.Synchronizer.WorkerThread.m_ThreadObj">
            <summary>
            Reference to thread
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.Synchronizer.WorkerThread.Run">
            <summary>
            Run the queue
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.Synchronizer.WorkerThread.Kill">
            <summary>
            Cleanup
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MPTTimer">
            <summary>
            Summary description for MPTTimer.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MPTTimeBase">
            <summary>
            Summary description for TimeBase.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MPTTimeBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MPTTimeBase.Update">
            <summary>
            Update the object
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MPTTimeBase.Disable">
            <summary>
            Disable this object
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MPTTimeBase.Reset">
            <summary>
            Reset this object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MPTTimeBase.DataMgr">
            <summary>
            Easy access to data manager
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MPTTimeBase.CompMgr">
            <summary>
            Easy access to component manager
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MPTTimeBase.StartTime">
            <summary>
            Get/Set the start time
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MPTTimer.#ctor(System.String,MPT.USN.CommonLib.Data.DataBool)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="dbTimerExpired"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MPTTimer.Reset(System.Int32)">
            <summary>
            Reset the timer
            </summary>
            <param name="durationMS"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MPTTimer.Update">
            <summary>
            Update the timer status
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MPTTimer.Disable">
            <summary>
            Disable the timer
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MPTTimer.IsExpired">
            <summary>
            Returns true if the timer has expired
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MPTTimer.IsExpired(System.String)">
            <summary>
            Returns true if the timer has expired
            </summary>
            <param name="errMsg"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MPTTimer.IsExpired(System.String,System.Boolean)">
            <summary>
            Returns true if the timer has expired
            </summary>
            <param name="errMsg"></param>
            <param name="processAlert"></param>
            <returns></returns>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInputPage">
            <summary>
            Summary description for AcqInputPage.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInputPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInputPage.#ctor(MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput)">
            <summary>
            Constructor
            </summary>
            <param name="acqInput"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInputPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInputPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.CompWatchPage">
            <summary>
            Class to house watch window
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompWatchPage.#ctor(MPT.USN.CommonLib.Comp.CompWatch)">
            <summary>
            Constructor
            </summary>
            <param name="compWatch"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompWatchPage.OnRefresh">
            <summary>
            Tell the page to refresh with new table definition
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompWatchPage.AppendRow(System.Object[],System.Boolean)">
            <summary>
            Append a new row to the data table
            </summary>
            <param name="newRow"></param>
            <param name="bNewHeader"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompWatchPage.OnActivate(System.Boolean)">
            <summary>
            Respond to change of activation
            </summary>
            <param name="bActivate"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompWatchPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompWatchPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompWatchPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPL.SPLStationPage">
            <summary>
            Class to display station data
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLStationPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLStationPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLStationPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLStationPage.#ctor(MPT.USN.CommonLib.Comp.SPL.SPLStation)">
            <summary>
            Constructor
            </summary>
            <param name="station"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.PulseSystem.PulseLaserPage">
            <summary>
            Page for show pulse shape.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.PulseLaserPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseLaserPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseLaserPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseLaserPage.#ctor(MPT.USN.CommonLib.Comp.PulseSystem.PulseLaser)">
            <summary>
            
            </summary>
            <param name="laser"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Output.AcqOutputGroup">
            <summary>
            Summary description for OutputGroup.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Output.AcqOutputGroup._data">
            <summary>
            Reference to the acquired data
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Output.AcqOutputGroup.diSampleRate">
            <summary>
            Get Sample Rate Data Object
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.AcqOutputGroup.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.AcqOutputGroup.#ctor(System.String,System.Int32,System.Type)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
            <param name="ioChans"></param>
            <param name="chanType"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.AcqOutputGroup.Initialize">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.AcqOutputGroup.WriteOutputGroup(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Write the output
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Output.AcqOutputGroup.Data">
            <summary>
            Access to data
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Output.AcqOutputGroup.SampleRate">
            <summary>
            Get/Set Sample Rate Value
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.GpibDevicePage">
            <summary>
            Digital Meter controlled by com port.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.GpibDevicePage.tbGPIBAddress">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.GpibDevicePage.#ctor(MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.GpibDevice)">
            <summary>
            Constructor
            </summary>
            <param name="gpibDevice"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibDevice.GpibDevicePage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Process.StateBase">
            <summary>
            Summary description for StateBase.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.StateBase.nextSibling">
            <summary>
            Tag to move state to next sibling
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.StateBase.#ctor">
            <summary>
            Constructor for xml serialization
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.StateBase.dbTimeoutExpired">
            <summary>
            Access to UpdatePanelDone data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.StateBase.ddTimeoutPeriod">
            <summary>
            Time out of entire state.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.StateBase.dsTimeoutMsg">
            <summary>
            Time out msg.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.StateBase.ddUsage">
            <summary>
            Usage duration for this state
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.StateBase.#ctor(MPT.USN.CommonLib.Process.ProcessBase,System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="procOwner"></param>
            <param name="name"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.StateBase.actions">
            <summary>
            List of executable actions for this process
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.StateBase.AddAction(MPT.USN.CommonLib.Process.SMAction)">
            <summary>
            Add an action to the list of actions
            </summary>
            <param name="newAction"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.StateBase.RemoveAction(MPT.USN.CommonLib.Process.SMAction)">
            <summary>
            Remove an action from the list of actions
            </summary>
            <param name="removeAction"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.StateBase.transitions">
            <summary>
            List of executable actions for this process
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.StateBase.AddTransition(MPT.USN.CommonLib.Process.Transition)">
            <summary>
            Add a transition to the list of transitions
            </summary>
            <param name="newTransition"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.StateBase.RemoveTransition(MPT.USN.CommonLib.Process.Transition)">
            <summary>
            Remove a transition from the list of transitions
            </summary>
            <param name="removeTransition"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.StateBase.states">
            <summary>
            List of child states for this state
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.StateBase.Register">
            <summary>
            Register this and all decendents
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.StateBase.SetIndexForChildren">
            <summary>
            Sets the display index for all the children
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.StateBase.PackInRecurse(MPT.USN.CommonLib.MPTBase)">
            <summary>
            After file read
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.StateBase.Initialize">
            <summary>
            Initialize this StateBase class
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.StateBase.AddState(MPT.USN.CommonLib.Process.StateBase)">
            <summary>
            Add a child state to the list of child states
            </summary>
            <param name="newState"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.StateBase.InsertState(MPT.USN.CommonLib.Process.StateBase,System.Int32)">
            <summary>
            Insert a child state to the list of child states
            </summary>
            <param name="newState"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.StateBase.RemoveState(MPT.USN.CommonLib.Process.StateBase)">
            <summary>
            Remove a child state from the list of child states
            </summary>
            <param name="removeState"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.StateBase.TransitionExists(System.String)">
            <summary>
            Returns true if we find a particular transition
            </summary>
            <param name="nextState"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.StateBase.FindState(System.String)">
            <summary>
            Locate a child state from the list of Child states
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.StateBase.NextState(MPT.USN.CommonLib.Process.StateBase@)">
            <summary>
            Locate the next child state, or loop to the top
            </summary>
            <param name="curState"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.StateBase.SwapChildren(MPT.USN.CommonLib.MPTBase,System.Int32)">
            <summary>
            Switch the order of two elements
            </summary>
            <param name="objChild"></param>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.StateBase.OnEnterState">
            <summary>
            Notification that new state has been entered
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.StateBase.OnStart">
            <summary>
            User has clicked the Run button
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.StateBase.OnLeavingState">
            <summary>
            Disable the timer when leaving this state
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.StateBase.boolValList">
            <summary>
            List used to freeze evaluation data 
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.StateBase.Evaluate">
            <summary>
            This gets called very frequently by the process.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.StateBase.DoAction">
            <summary>
            Gets called on reset condition
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.StateBase.GetPrefixedConditions(System.String)">
            <summary>
            Return a list of alert conditions found in this state
            </summary>
            <param name="prefix">Get conditions with specific prefix</param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.StateBase.SetCondition(System.String,System.Boolean)">
            <summary>
            Set the condition of a matched expression
            </summary>
            <param name="expression"></param>
            <param name="bVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.StateBase.GetCondition(System.String)">
            <summary>
            Get the condition of matched expression
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.StateBase.Clone(System.Type)">
            <summary>
            Clone State
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.StateBase.Usage">
            <summary>
            Get the usage value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.StateBase.IdleState">
            <summary>
            Get/Set the IdleState
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.StateBase.SerIdleState">
            <summary>
            Serialize the value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.StateBase.SerActions">
            <summary>
            Serializing placeholder
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.StateBase.SerTransitions">
            <summary>
            Serializing placeholder
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.StateBase.StateTimeStamp">
            <summary>
            Get the State time stamp
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.StateBase.Process">
            <summary>
            Get the owner process
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.MPTListBox">
            <summary>
            Derivation from ListBox 
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTListBox.Init(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Populate the control
            </summary>
            <param name="DT"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTListBox.Add(System.Object)">
            <summary>
            Add an item to the listbox
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTListBox.Save">
            <summary>
            Save the contents of list box to array of Data item
            Put current (single selection) into val
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTListBox.OnKeyDown(System.Windows.Forms.Keys)">
            <summary>
            Handle keydown message
            </summary>
            <param name="keyCode"></param>
            <returns>True if handled</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTListBox.Dispose(System.Boolean)">
            <summary>
            Dispose the object
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTListBox.Dirty">
            <summary>
            Get modified flag
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.DataByte">
            <summary>
            Summary description for DataByte.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataByte.GetVal(MPT.USN.CommonLib.Enums.UnitTypes)">
            <summary>
            Return the value as an Object
            </summary>
            <param name="ut"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataByte.#ctor">
            <summary>
            Constructor for Xml serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataByte.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataByte.#ctor(System.String,System.Byte)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
            <param name="sVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataByte.CopyDataFrom(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Copy data from another  DataByte object
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataByte.SetDefault">
            <summary>
            Set value to its default
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataByte.ValToString">
            <summary>
            Convert the value to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataByte.ValToString(System.String)">
            <summary>
            Convert the value to a formatted string
            </summary>
            <param name="fmt"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataByte.ValToDefaultString">
            <summary>
            Convert the default value to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataByte.ConvertValidate(System.Object)">
            <summary>
            Validate basics for this type
            </summary>
            <param name="oVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataByte.ValFromString(System.String)">
            <summary>
            Set value from string
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataByte.Increment">
            <summary>
            Increment by one
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataByte.Decrement">
            <summary>
            Decrement by one
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataByte.ObjRawVal">
            <summary>
            Get/Save the value from an unknown object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataByte.RawVal">
            <summary>
            Get/Set the raw value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataByte.Val">
            <summary>
            Get/Set the value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataByte.Default">
            <summary>
            Get/Set the default
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.HistoryQueue">
            <summary>
            HistoryQueue: A queue of objects which supports auto remove if queue is
            full, preserve data when resize.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.HistoryQueue.#ctor(System.Int32)">
            <summary>
            Construct with a specific size
            </summary>
            <param name="newSize"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.HistoryQueue.Clear">
            <summary>
            Clear the History Queue
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.HistoryQueue.Contains(System.Object)">
            <summary>
            Check whether the queue contains specified obj
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.HistoryQueue.Enqueue(System.Object,System.Boolean)">
            <summary>
            Add new element to queue.
            If replace == true, this will try to replace last point, if no point available yet, this will insert
            </summary>
            <param name="val"></param>
            <param name="replace"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.HistoryQueue.IndexOf(System.Object)">
            <summary>
            Find index of a specified element
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.HistoryQueue.CopyTo(System.Array,System.Int32)">
            <summary>
            Copy the queue to an array
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.HistoryQueue.GetEnumerator">
            <summary>
            Get the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.HistoryQueue.MaxLength">
            <summary>
            Get/Set MaxLength
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.HistoryQueue.Item(System.Int32)">
            <summary>
            Get an item at a specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.HistoryQueue.Count">
            <summary>
            Get the queue count
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.HistoryQueue.IsSynchronized">
            <summary>
            Inherit from ICollection
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.HistoryQueue.SyncRoot">
            <summary>
            Inherit from ICollection
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.ReportErrorForm">
            <summary>
            Form to prepare for info dump
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.ReportErrorForm.InProgress">
            <summary>
            Constant for In Progress string
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.ReportErrorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.ReportErrorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.ReportErrorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.ReportErrorForm.dumpPath">
            <summary>
            Dump path
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.ReportErrorForm.dumpScreenFilePath">
            <summary>
            Dump screen file path
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.ReportErrorForm.subject">
            <summary>
            Subject
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.ReportErrorForm.msg">
            <summary>
            Message
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.ReportErrorForm.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.ReportErrorForm.CompMgr">
            <summary>
            Get the CompMgr
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.Graph2D">
            <summary>
            2d graph component to support data viewing utilities
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Graph2D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Graph2D.#ctor(MPT.USN.CommonLib.Data.TransferFunctions.TransferFunction)">
            <summary>
            Constructor
            </summary>
            <param name="tf"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Graph2D.LoadSomeData">
            <summary>
            Calls LoadSomeData with simulated path
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Graph2D.LoadSomeData(System.String)">
            <summary>
            Utility to get some data in the graph for testing
            path should point to a file that has csv data in 
            two cols (Y, X)
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Graph2D.RefreshGraph">
            <summary>
            Refresh graph with latest data
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.Graph2D.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Graph2D.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Graph2D.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.Graph2D.SimulateDataPath">
            <summary>
            Get/Set sample data file path for simulate mode
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.Graph2D.InvokeDelegate">
            <summary>
            Used to envoke InitializeGraph
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TransferFunctions.SecondOrder">
            <summary>
            Class to define linear least squares fit transfer function
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SecondOrder.#ctor">
            <summary>
            default Constructor - must call Initialize after setting public properties
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SecondOrder.#ctor(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Use when not serializing but using all other defaults
            </summary>
            <param name="dt"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.SecondOrder.Name">
            <summary>
            Name of TransferFunction class
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TransferFunctions.PointSlope">
            <summary>
            Simple line fit
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.PointSlope.dSlope">
            <summary>
            The slope
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.PointSlope.dYIntercept">
            <summary>
            The Y Intercept
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.PointSlope.#ctor">
            <summary>
            Parameterless constructor for serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.PointSlope.#ctor(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Use when not serializing but using all other defaults
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.PointSlope.Clone">
            <summary>
            Copy data
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.PointSlope.CopyDataFrom(MPT.USN.CommonLib.Data.DBClass)">
            <summary>
            Copy data
            </summary>
            <param name="dbClass"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.PointSlope.GetVal(System.Object,System.Double)">
            <summary>
            Get the translated value
            </summary>
            <param name="input"></param>
            <param name="offsetWeight">portion of offset to use</param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.PointSlope.GetVal(System.Object[],System.Double,System.Boolean)">
            <summary>
            Get the translated value but decide to do regenerate first
            </summary>
            <param name="inputs"></param>
            <param name="offsetWeight">portion of offset to use</param>
            <param name="doRegen"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.PointSlope.GetVal(System.Object,System.Double,System.Boolean)">
            <summary>
            Get the translated value but decide to do regenerate first
            </summary>
            <param name="inputs"></param>
            <param name="offsetWeight">portion of offset to use</param>
            <param name="doRegen"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.PointSlope.GetVal(System.Object[],System.Double)">
            <summary>
            Get the translated value
            </summary>
            <param name="inputs"></param>
            <param name="offsetWeight">portion of offset to use</param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.PointSlope.Update(System.Object,System.Object)">
            <summary>
            Update transfer function characteristics
            </summary>
            <param name="response"></param>
            <param name="input"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.PointSlope.Update(System.Object,System.Object[])">
            <summary>
            Update transfer function characteristics
            </summary>
            <param name="response"></param>
            <param name="inputs"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.PointSlope.Regenerate">
            <summary>
            Regenerate coeficients based on updated data
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.PointSlope.Regenerate(System.Object[])">
            <summary>
            Regenerate coeficients based on updated data
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.PointSlope.Name">
            <summary>
            Name of TransferFunction class
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TransferFunctions.LinearYBinPage">
            <summary>
            Class for linear definitions
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.LinearYBinPage.#ctor">
            <summary>
            Default Constructor for designer view
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.LinearYBinPage.#ctor(MPT.USN.CommonLib.Data.TransferFunctions.LinearYBin)">
            <summary>
            Constructor
            </summary>
            <param name="linearYBin"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.LinearYBinPage.OnRefresh">
            <summary>
            Used to notify this page of an update required
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.LinearYBinPage.OnPageLoad">
            <summary>
            Set up for the first time with valid window handle and parental windows established
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.LinearYBinPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.LinearYBinPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.LinearYBinPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.WelderPattern.PatternComp">
            <summary>
            Class for Pattern Comp.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.WelderPattern.PatternComp.#ctor">
            <summary>
            1st Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.WelderPattern.PatternComp.#ctor(System.String)">
            <summary>
            2nd Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.ResultValidationInsert">
            <summary>
            Insert for result validation setting
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.ResultValidationInsert.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.ResultValidationInsert.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.ResultValidationInsert.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.ResultValidationInsert.#ctor(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Constructor
            </summary>
            <param name="dataType"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.TowerLamp.TowerLampPage">
            <summary>
            Property page for tower lamp
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.TowerLamp.TowerLampPage.#ctor(MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp)">
            <summary>
            Constructor
            </summary>
            <param name="towerLamp"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.TowerLamp.TowerLampPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.TowerLamp.TowerLampPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.TowerLamp.TowerLampPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.TowerLamp.TowerLampPage.CanSafeDispose">
            <summary>
            Indicate whether this can safely disposed when run out of scene
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.LaserSystem.LaserPage">
            <summary>
            LaserPage Class
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.LaserPage.#ctor(MPT.USN.CommonLib.Comp.LaserSystem.Laser)">
            <summary>
             Constructor
            </summary>
            <param name="laser"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.LaserSystem.LaserPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.LaserPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.LaserPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.LaserSystem.LaserPage.CanSafeDispose">
            <summary>
            Indicate whether this can safely disposed when run out of scene
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.Custom">
            <summary>
            Summary description for Custom.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.Custom.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.Custom.#ctor(System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPC.SPCItem">
            <summary>
            Base class for all SPC Items
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCItem.Save(System.IO.BinaryWriter)">
            <summary>
            Save the data to disk
            </summary>
            <param name="f"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPC.ControlChartGraph">
            <summary>
            Basic Run Chart Graph
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.ControlChartGraph.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.ControlChartGraph.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.ControlChartGraph.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.ControlChartGraph.Demo">
            <summary>
            To run demo of graph with fake data (handled by subclass)
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.ControlChartGraph.#ctor">
            <summary>
            constructor for serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.ControlChartGraph.#ctor(MPT.USN.CommonLib.Comp.SPC.ControlChartData)">
            <summary>
            Constructor
            </summary>
            <param name="controlChartData"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.ControlChartGraph.InitializeGraph">
            <summary>
            Initialize the graph
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.ControlChartGraph.RefreshGraph">
            <summary>
            Refresh graph with latest data
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.ControlChartGraph.OnPageLoad">
            <summary>
            Set up for the first time with valid window handle and parental windows established
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Output.VoltageOutput">
            <summary>
            Summary description for AnalogOutput.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.VoltageOutput.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.VoltageOutput.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.VoltageOutput.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
            <param name="channelPrefix"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.VoltageOutput.Initialize">
            <summary>
            Initialize this component
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.VoltageOutput.SetOutput(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
            Write the output
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Output.VoltageOutput.VoltType">
            <summary>
            Access to voltage type
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.TempArrayList`1">
            <summary>
            Used to populate an array. Can return a new fixed array
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.TempArrayList`1.FixedArray">
            <summary>
            Property to get a copy of a fixed sized array
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Process.Transition">
            <summary>
            Summary description for Transition.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.Transition.strNextState">
            <summary>
            Name of state to jump to when condition is true.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.Transition.logic">
            <summary>
            Logic object to evaluate
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.Transition.#ctor">
            <summary>
            Constructor for XML seraialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.Transition.#ctor(MPT.USN.CommonLib.Process.ProcessBase,System.String)">
            <summary>
            Constructor for 1st timne creation
            </summary>
            <param name="procOwner"></param>
            <param name="nextState"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.Transition.SetIndex(System.Int32)">
            <summary>
            Set the display index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.Transition.PackInRecurse(MPT.USN.CommonLib.Process.ProcessBase)">
            <summary>
            After file read
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.Transition.Evaluate">
            <summary>
            Evaluate the logic expression(s)
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.Transition.Dump(System.IO.StreamWriter,System.Int32)">
            <summary>
            Dump the state of the conditional statements 
            </summary>
            <param name="f"></param>
            <param name="indentation"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.Transition.GetPrefixedConditions(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Populate the list of alert conditions
            </summary>
            <param name="list"></param>
            <param name="prefix"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.Transition.SetCondition(System.String,System.Boolean)">
            <summary>
            Set the alert condition true or false
            </summary>
            <param name="expression"></param>
            <param name="bVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.Transition.GetCondition(System.String,System.Boolean@)">
            <summary>
            Set the alert condition true or false
            </summary>
            <param name="expression"></param>
            <param name="bVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.Transition.OnEnterState">
            <summary>
            Entering this state
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.Transition.OnLeavingState">
            <summary>
            Leaving this state
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.DbClassItem">
            <summary>
            Class to store class info
            Not to be serialized
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.DbClassItem.dbRecord">
            <summary>
            The current instance number
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.DbClassItem.componentPath">
            <summary>
            Component path to this opject
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.DbClassItem.mnemonic">
            <summary>
            Component path to this opject
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.DbClassItem.classType">
            <summary>
            The type of this class
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.DbClassItem.objClass">
            <summary>
            Instantiated Object for this class
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.DbClassItem.Parent">
            <summary>
            The Parent class.  Null if already at MPTBase
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.DbClassItem.Child">
            <summary>
            The Child class.  Null if already at GetType()
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.DbClassItem.Locked">
            <summary>
            Is it currently locked ?
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.DbClassItem.GetChangedPerformance">
            <summary>
            Return a string of all the changed performnance fields
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.DbClassItem.GetChangedSettings">
            <summary>
            Return a string of all the changed settings fields
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.DbClassItem.ChangedField(System.String,MPT.USN.CommonLib.Enums.eDBFlag)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="dbFlag"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.DbClassItem.PostPut">
            <summary>
            Clear any buffer
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.DbClassItem.#ctor(System.Object,System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="objClass"></param>
            <param name="classType"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.DbClassItem.CreateRecord(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            Create a database record
            </summary>
            <param name="instanceNo"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.DbClassItem.CreateRecord">
            <summary>
            Create a database record
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.DbClassItem.ToString">
            <summary>
            Let's give it the Name
            </summary>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.DbClassItem.mptBase">
            <summary>
            Instantiated MPTBase Object for this class
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.DbClassItem.Dirty">
            <summary>
            Returns true if rewcord is dirty 
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.DataParamList">
            <summary>
            Class to store datatypes
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.DataParamList.className">
            <summary>
            The name of the class
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.DataParamList.dataList">
            <summary>
            The data list
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.DataParamList.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.DataParamList.#ctor(MPT.USN.CommonLib.Data.DataType[],System.String)">
            <summary>
            Constructor, used for serialization
            </summary>
            <param name="dataList"></param>
            <param name="className"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.ThirdPartyPage">
            <summary>
            Class to store ThirdPartyPage
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.ThirdPartyPage.Name">
            <summary>
            The name for the page
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.ThirdPartyPage.PageType">
            <summary>
            The data list
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.ThirdPartyPage.#ctor(System.Type,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="pageType"></param>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.MainForm">
            <summary>
            Class that represents the main Form 
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MainForm.MainFrm">
            <summary>
            Static reference to self
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MainForm.updateThreadState">
            <summary>
            String for the Product name
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MainForm.productName">
            <summary>
            String for the Product name
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MainForm.productPath">
            <summary>
            String for the product path
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MainForm.processFamilyPath">
            <summary>
            Path string to point to process family
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MainForm.processFamilyName">
            <summary>
            String to hold process family name
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MainForm.basePath">
            <summary>
            Path string to hold MPT\USN base path
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MainForm.machineName">
            <summary>
            String to hold Machine name
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MainForm.appVersion">
            <summary>
            String to hold the application version
            </summary>
            <remarks>
            The version number (<b>Major</b>.<b>Minor</b>.<b>Maintenance</b>.<b>Developing build</b>)
            <list type="bullet">
            <item><description><b>Major</b> - Significant re-write changes (very rare)</description></item>
            <item><description><b>Minor</b> - Changes to interface with CommonLib.dll</description></item>
            <item><description><b>Maintenance</b>Bug fixing or added features.  
            For CommonLib all Mainenance versions are gauranteed to be backward compatible.  
            One should be able to swap to any other maintanance version.  
            For apps and third-party driver assemblies, it is recommended to be swappable.</description></item>
            <item><description><b>Developing build</b> - While developing, increment this number on each unnofficial release to application developers.
            For production releases, increment Maintenance number and blank this out.</description></item>
            </list>
            <para/>
            More details...
            <para/>
            <list type="bullet">
            <item><description>Installed and running MPT binaries (MPT apps, MPT 3rd party diver assemblies, MPT CommonLib) will always have matching 'Major.Minor' numbers.</description></item>
            <item><description>At any time, it is safe to swap MPT binaries that differ only in 'Maintenance' numbers</description></item>
            <item><description>Production machines should not be running versions that include 'Developing build'.</description></item>
            <item><description>'Major' or 'Minor' number changes are made only by CommonLib developer.  
            When this occurs, other MPT binaries must be re-built with new 'Major' and 'Minor' to use the new 
            version of CommonLib.</description></item>
            <item><description>Set both the AssemblyVersion and AssemblyFileVersion tags in the AssemblyInfo.cs file.</description></item>
            </list>
            <para/>
            Example of development cycle
            <list type="table"> 
            <listheader><term>Version</term><description>Description</description></listheader>
            <item><term>1.0.0 CommonLib, Assembly A, ...</term><description>Original release.  All assemblies get this version</description></item>
            <item><term>1.0.0.1 CommonLib</term><description>Unofficial changes to CommonLib</description></item>
            <item><term>1.0.1 Assembly A</term><description>Bug fix for assembly A. User can at anytime switch back to 1.0.0.</description></item>
            <item><term>1.0.1 CommonLib</term><description>Publish CommonLib changes.  User can at anytime switch back to 1.0.0.</description></item>
            <item><term>1.0.1.1 CommonLib</term><description>More unofficial changes to CommonLib that modify interfaces.</description></item>
            <item><term>1.2.0 CommonLib, Assembly A, ...</term><description>Publish CommonLib changes, rebuild all assemblies with new version.</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:MPT.USN.CommonLib.MainForm.units">
            <summary>
            Global units selection
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MainForm.btnStepPause">
            <summary>
            Step/Pause button
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MainForm.btnReset">
            <summary>
            Reset Button
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MainForm.btnPrintPage">
            <summary>
            Print Page button
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MainForm._splash">
            <summary>
            Form to display as application loads
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.ShowInitProgress(System.String)">
            <summary>
            Display initialization progress on splash screen
            </summary>
            <param name="strMsg"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.GetAppImage">
            <summary>
            Get the application image
            </summary>
            <returns></returns>
        </member>
        <member name="F:MPT.USN.CommonLib.MainForm.commonLibSettings">
            <summary>
            Access to the CommonLibSettings
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.AddCustomConfigSections">
            <summary>
            An opportunity to define any Application specific settings sections
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.GetApplicationOptionsPage">
            <summary>
            Get the custom control to fill the OptionsPanel
            </summary>
            <returns></returns>
        </member>
        <member name="F:MPT.USN.CommonLib.MainForm._config">
            <summary>
            The root reference to the configuration
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MainForm.ActionSel">
            <summary>
            static instance of Action selection form
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MainForm.ConditionSel">
            <summary>
            static instance of Condition Selection form
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.FireOnGlobalUnitChanged">
            <summary>
            Fire to all process that a playstrip has changed
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.GetCurrentProcessFamily">
            <summary>
            Determine the current process family
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MainForm.mainPanel">
            <summary>
            Panel
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MainForm.btnApply">
            <summary>
            Apply button
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MainForm.btnComponents">
            <summary>
            Button for Component panel
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MainForm.btnExit">
            <summary>
            Exit button
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MainForm.btnData">
            <summary>
            Button for Data panel
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MainForm.btnProcesses">
            <summary>
            Button for Process panel
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MainForm.btnPanel">
            <summary>
            Button for working panel
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MainForm.btnOptions">
            <summary>
            Button for Option panel
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MainForm.commonLibraryPath">
            <summary>
            String that contains the location of the CommonLib.dll
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.GoodToGo">
            <summary>
            Called from process to determine if it is OK to continue.
            Response is handled by process script
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.GetValueFromObject(System.Object)">
            <summary>
            Override this to get text from 3rd party text object
            </summary>
            <param name="objBox"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.SetObjectValue(System.Object,MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Override to set text of 3rd party text objects
            </summary>
            <param name="objBox"></param>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.GetFormType(System.String)">
            <summary>
            Check if application has the form we are requesting
            </summary>
            <param name="promptForm"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.DefineDefaultMachine(MPT.USN.CommonLib.Comp.CompMachine)">
            <summary>
            Define all the components and mnemonics of this machine
            </summary>
            <remarks>Must be overridden</remarks>
            <param name="machineComp"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.DefineAllProcesses">
            <summary>
            Base class vurtual function for defining the processes
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MainForm._thirdPartyAssemblies">
            <summary>
            Array of assemblies.  Please add as needed
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.SearchForFile(System.String,System.String)">
            <summary>
            Drill down directory path in search for a specific file.  
            </summary>
            <param name="basePath"></param>
            <param name="fileName"></param>
            <returns>Filepath of the found file</returns>
        </member>
        <member name="F:MPT.USN.CommonLib.MainForm.LoadedAssemblyInfo">
            <summary>
            List of loaded assemblies.  Includes entry assembly
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.GetAdditionalComponentTypes(System.Xml.Serialization.XmlAttributeOverrides,System.Boolean)">
            <summary>
            Search assemblies for any types that are component serializable
            </summary>
            <param name="attrOverride"></param>
            <param name="ignoreData"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.BuildXmlAttributes">
            <summary>
            Build list of [XMLArrayItem] attributes
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.ApplyCompDataPanels">
            <summary>
            Response to Apply button press
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.RefreshCompDataPanels(MPT.USN.CommonLib.MPTBase)">
            <summary>
            Refresh the Component and data panels
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.SetTitle">
            <summary>
            Set the main app title
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.Initialize">
            <summary>
            Initialize strings, components, and processes
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.ToggleProcessPanel(MPT.USN.CommonLib.Process.ProcessBase)">
            <summary>
            Toggle a process to another panel
            </summary>
            <param name="process"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.AddProcessPageToPanel(MPT.USN.CommonLib.Process.ProcessBase)">
            <summary>
            Add a new process to the process panel
            </summary>
            <param name="process"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.MainForm.panelChildMainApp">
            <summary>
            Reference to the main application panel
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.ChangePanel(MPT.USN.CommonLib.PanelBase)">
            <summary>
            Change the panel to new user control
            </summary>
            <param name="newPanelChild"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.InitializeMachineComponents">
            <summary>
            Extra opportunity to perform custom initialization of components
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.OnRunClick">
            <summary>
            Handle run button
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.OnResetClick">
            <summary>
            Reset button
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.OnStopClick">
            <summary>
            Stop button
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.OnStepPauseClick">
            <summary>
            Default behavior for Step/Pause
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.PostPromptForm(MPT.USN.CommonLib.SMMethodCall,System.String)">
            <summary>
            Method that pops up a dialog
            </summary>
            <param name="mc"></param>
            <param name="promptForm"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.CreateOperationTabPages(System.Windows.Forms.TabControl)">
            <summary>
            Override this virtual to add application-specific panels.  
            Add Tab Pages as needed. 
            </summary>
            <param name="tabOperations"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.OnStop">
            <summary>
            React to Stop button press
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.GetMachineType">
            <summary>
            Base class virtual function that returns the class type for the machine component
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.UpdatePages(System.Windows.Forms.Control,System.String,System.String)">
            <summary>
            Recursively updates all pages
            </summary>
            <param name="parentControl"></param>
            <param name="cmd1">User-define string 1</param>
            <param name="cmd2">User-define string 2</param>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.UpdateOperationTabPages(MPT.USN.CommonLib.Process.ProcessBase,System.String,System.String)">
            <summary>
            Used to send command to panel pages that something needs updating
            </summary>
            <param name="process"></param>
            <param name="cmd1">User-defined string 1</param>
            <param name="cmd2">User-defined string 2</param>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.UpdateComponentPages(System.String,System.String)">
            <summary>
            Used to send command to panel pages that something needs updating
            </summary>
            <param name="cmd1">User-defined string 1</param>
            <param name="cmd2">User-defined string 2</param>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.FindMethod(System.Windows.Forms.Control,System.String)">
            <summary>
            Look for specific method defined in this Control
            </summary>
            <param name="parentControl"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.FindPanelTarget(System.String)">
            <summary>
            Search all panels for specific method
            </summary>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.UpdateDataPanel(MPT.USN.CommonLib.MPTBase)">
            <summary>
            Send update command the data panel
            </summary>
            <param name="mptBase"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.HideAllControls">
            <summary>
            Hide all the controls
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.EnablePlayStrip(System.Boolean)">
            <summary>
            Enable or diable play strip
            </summary>
            <param name="enable"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.ShowHideControls">
            <summary>
            Routine to Enable/Disable and/or Show/Hide control depending
            on the state and mode of things
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.ShowHideButtons">
            <summary>
            Show/Hide buttons 
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.OnPreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            Application can override to handle messages
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.OnKeyDown(System.Windows.Forms.Keys)">
            <summary>
            Responds to kepress
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.DestroyUserControls(System.Windows.Forms.Control)">
            <summary>
            Recursively Destroy all usercontrols
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.CanClose">
            <summary>
            Indicates if it is OK that the application closes
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.AddSPCData(MPT.USN.CommonLib.DBFieldItem)">
            <summary>
            Return true if fieldItem is to be added
            </summary>
            <param name="fieldItem"></param>
            <returns>True if added to SPC chart</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.OnClosing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Response to control box 'X' button
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.PreLoopProcessing">
            <summary>
            A chance to do business at the start of the main thread loop
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.CopyDataFilesToTimeStampFolder(System.String)">
            <summary>
            Copy all data files to time-stamp folder.  This occurs 
            at the beginning of a recorded run.
            </summary>
            <param name="timeStampFolder"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.ShowAlertButton(System.Boolean,System.Boolean)">
            <summary>
            Show/Hide the alert button
            </summary>
            <param name="bShow"></param>
            <param name="hasFaultAlert"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.ActivatedBreakpoint(MPT.USN.CommonLib.Process.BreakPoint)">
            <summary>
            Informs mcl that a breakpoint is activated
            </summary>
            <param name="bp"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.ShowBreakpointForm(MPT.USN.CommonLib.Process.BreakPoint)">
            <summary>
            Display the break point form
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MainForm.CompMgr">
            <summary>
            Create reference for easy access to component manager
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MainForm.DataMgr">
            <summary>
            Create reference for easy access to Data manager
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MainForm.ProcMgr">
            <summary>
            Create reference for easy access to process manager
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MainForm.RunMode">
            <summary>
            Current Run Mode
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MainForm.PlaybackMode">
            <summary>
            Returns current run mode
            </summary>
        </member>
        <member name="E:MPT.USN.CommonLib.MainForm.OnGlobalUnitsChanged">
            <summary>
            On change to Global Units
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MainForm.CurrentTimeStampFolder">
            <summary>
            Returns the current value of the time stamp folder
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MainForm.AttrOverrides">
            <summary>
            Returns the override definitions
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MainForm.FilePath">
            <summary>
            Returns the filepath of the XML serialized component file
            The Machine is the serialized root object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MainForm.MachineType">
            <summary>
            Base class virtual function that returns machine type for this machine
            </summary>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.MainForm.BPForm">
            <summary>
            Get/Set the reference to the BreakpointForm
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.MainForm.ThirdPartyType">
            <summary>
            This class is used to store 3rd party type info
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MainForm.ThirdPartyType.thirdPartyType">
            <summary>
            The 3rd party type
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MainForm.ThirdPartyType.stubType">
            <summary>
            The generic type used if 3rd party SW is not available
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.ThirdPartyType.#ctor(System.String,System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="thirdPType">thirdPartyType</param>
            <param name="stubType">The type (stub) used if 3rd party SW is not available</param>
        </member>
        <member name="T:MPT.USN.CommonLib.MainForm.ThirdPartyAssembly">
            <summary>
            This class holds all 3rd party type info for each 3rd party assembly system
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.ThirdPartyAssembly.#ctor(System.String,MPT.USN.CommonLib.MainForm.ThirdPartyType[])">
            <summary>
            Constructor
            </summary>
            <param name="assFileName"></param>
            <param name="thirdPTypes"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.MainForm.UpdateOperationTabPagesDelegate">
            <summary>
            Flag used to inform that Panel has been updated
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.MainForm.CLMessageFilter">
            <summary>
            Class used to help trap keystrokes
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.CLMessageFilter.Instance">
            <summary>
            Create an instance of the filter
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MainForm.CLMessageFilter.PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            This is called for all Windows messages
            </summary>
            <param name="m">Incoming message passes by Windows</param>
            <returns>true if we have processed the message on our own</returns>
        </member>
        <member name="T:MPT.USN.CommonLib.SMDataArgSel">
            <summary>
            Form to select a data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.SMDataArgSel._mptBase">
            <summary>
            This is the parent node of the method
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.SMDataArgSel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.SMDataArgSel.BeginWork(System.Drawing.Point,MPT.USN.CommonLib.SMDataArgSel.DelegateParmMptBaseIntMPTBase,MPT.USN.CommonLib.MPTBase,System.Int32,System.String,System.Type,MPT.USN.CommonLib.MPTControls.MPTTextBoxWithUnits)">
            <summary>
            
            </summary>
            <param name="pt"></param>
            <param name="del"></param>
            <param name="mptBase"></param>
            <param name="iArg"></param>
            <param name="arg"></param>
            <param name="argType"></param>
            <param name="pc"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.SMDataArgSel.OnChar(System.Char)">
            <summary>
            Respond to new char press
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="F:MPT.USN.CommonLib.SMDataArgSel.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.SMDataArgSel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.SMDataArgSel.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.SMDataArgSel.DelegateParmMptBaseIntMPTBase">
            <summary>General purpose void delegate/// </summary>
            <param name="mptBase"></param>
            <param name="iArg"></param>
            <param name="obj"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.DBFlagAttribute">
            <summary>
            Class to tag data classes as DBfield
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.DBFlagAttribute.flag">
            <summary>
            The flag that describes the type of db data 
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.DBFlagAttribute.#ctor(MPT.USN.CommonLib.Enums.eDBFlag)">
            <summary>
            Constructor
            </summary>
            <param name="flag">Indicates the type of data base item</param>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TransferFunctions.TFPanel">
            <summary>
            Class to present load cell info
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TFPanel.#ctor(MPT.USN.CommonLib.Data.DataType,System.Windows.Forms.Control)">
            <summary>
            Constructor
            </summary>
            <param name="dt"></param>
            <param name="parent"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TFPanel.#ctor(MPT.USN.CommonLib.Data.DataType[],System.Windows.Forms.Control)">
            <summary>
            Constructor for array of datatypes
            </summary>
            <param name="dt"></param>
            <param name="parent"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TFPanel.FireDataBackup">
            <summary>
            Fires backup data event for transferfunction datatable
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TFPanel.UpdatePage(System.String,System.String)">
            <summary>
            Used to get update changes for other dialogs with the same properties
            </summary>
            <param name="cmd1"></param>
            <param name="cmd2"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.TFPanel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TFPanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.TFPanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TFPanel.UseLocalTrainedValues">
            <summary>
            If checked, use local transferfunction training inputs rather than
            TFPanel's inputs (check for SA, uncheck for gram)
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.TFPanel.ShowIt">
            <summary>
            Boolean property to indicate if this is to be shown or not.
            We can also set the Enable/disable as needed
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm">
            <summary>
            Class for segment algorithm
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm._binList">
            <summary>
            The binlist
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.#ctor">
            <summary>
            Constructor for serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.#ctor(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Construct with the owner data object
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.Clone">
            <summary>
            Copy data
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.Update(MPT.USN.CommonLib.Data.TFData)">
            <summary>
            Add a tfData point and perform updating
            </summary>
            <param name="tfData"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.GetDataTableForRegression(System.Collections.Generic.List{MPT.USN.CommonLib.Data.TFBin})">
            <summary>
            Traverse thru the input bin list, make DataTable from each bin data points without min/max
            First column name is "Response", last columns name are inputs name
            </summary>
            <param name="listBins"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.GetBinsForIncomming(MPT.USN.CommonLib.Data.TFData)">
            <summary>
            Get bins based on incomming for doing regression when perform evaluation
            By default, we get the container bin only. Child should add more bins if necessary
            </summary>
            <param name="incommingData"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.GetGoodDataPointsForGraph">
            <summary>
            Get data points for graphing
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.GetBadDataPointsForGraph">
            <summary>
            Get un-used data points for graphing
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.CreateBins">
            <summary>
            Create the bins
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.TrainCurrentData">
            <summary>
            Perform training on current data
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.PerformRegression(System.Collections.Generic.List{MPT.USN.CommonLib.Data.TFBin})">
            <summary>
            Perform regression based on a bin list. The regression will be perform based on
            GetDataTableForRegression data
            of those bins. Outputs coeff will be set to the _a array of TF
            </summary>
            <param name="listBins"></param>
            <remarks>Exception, if occured, will be thrown</remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.PerformFullRegression">
            <summary>
            Perform regression against all data points
            </summary>
            <remarks> Exception, if occured, will be thrown</remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.ClearBinIfAny">
            <summary>
            Clear bin data if any. Data file also get clear
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.ddCountPerBin_OnChanged(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Handle the case Count Per Bin is changed
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.dbAlwaysDoFullRegression_OnChanged(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Handle the case always do full regression is changed
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.SetBinUsed(System.Collections.Generic.List{MPT.USN.CommonLib.Data.TFBin},System.Boolean)">
            <summary>
            Set the IsBinUsed properties for a list of bins
            </summary>
            <param name="listBins"></param>
            <param name="isUsed"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.GetVal(System.Object,System.Double)">
            <summary>
            Obsoleted
            </summary>
            <param name="input"></param>
            <param name="offsetWeight">portion of offset to use</param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.GetVal(System.Object[],System.Double)">
            <summary>
            Do the feed forward
            </summary>
            <param name="inputs"></param>
            <param name="offsetWeight">portion of offset to use</param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.GetValWorstCase(System.Object[])">
            <summary>
            Do the feed forward in worst case. Here we evaluation against the full regression.
            </summary>
            <param name="inputs"></param>
            <returns></returns>
            <remarks> Exception will be thrown if full regression fail</remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.GetVal(System.Object,System.Double,System.Boolean)">
            <summary>
            Obsoleted
            </summary>
            <param name="inputs"></param>
            <param name="offsetWeight">portion of offset to use</param>
            <param name="doRegen"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.GetVal(System.Object[],System.Double,System.Boolean)">
            <summary>
            Obsoleted
            </summary>
            <param name="inputs"></param>
            <param name="offsetWeight">portion of offset to use</param>
            <param name="doRegen"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.Regenerate">
            <summary>
            Obsoleted
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.Regenerate(System.Object[])">
            <summary>
            Obsoleted
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.Initialize(System.Boolean)">
            <summary>
            The initialization. Here doRegenerate has no meaning.
            </summary>
            <param name="doRegenerate"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.ReInitialize(System.Boolean)">
            <summary>
            Handle the case the TF is reset
            </summary>
            <param name="doRegenerate"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.InitializeLite(System.Boolean)">
            <summary>
            Handle the case the inputs and bin boundary setting is changed
            </summary>
            <param name="doRegenerate"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.ReTrain">
            <summary>
            Handle the ReTrain 
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.GetXg">
            <summary>
            Here we provide Xg = inputs of section points only
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.GetXb">
            <summary>
            Get un-used data points in input space (called by graph)
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.GetYg">
            <summary>
            Get used data points in response axis (called by graph)
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.GetYb">
            <summary>
            Get un-used data points in response axis (called by graph)
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.GetResponseSigmaOfContainerBin">
            <summary>
            Get the sigma of container bin of the response axis based on current inputs
            </summary>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.TrainedSuccess">
            <summary>
            Get whether this TF is successfully trained
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.InputsCount">
            <summary>
            Get count number of inputs
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.Inputs">
            <summary>
            Number of independent variables
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.SegmentAlgorithm.Name">
            <summary>
            Name of TransferFunction class
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TransferFunctions.SegmentApproximation">
            <summary>
            Class for segment approximation algorithm
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentApproximation.Clone">
            <summary>
            Copy data
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentApproximation.GetDataTableForRegression(System.Collections.Generic.List{MPT.USN.CommonLib.Data.TFBin})">
            <summary>
            Traverse thru the input bin list, make DataTable from each bin section point
            First column name is "Response", last columns name are inputs name
            </summary>
            <param name="listBins"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentApproximation.GetBinsForIncomming(MPT.USN.CommonLib.Data.TFData)">
            <summary>
            Get bins for doing regression when perform evaluation.
            Here we get the container bin and n good adjacent bins, where n is number of inputs
            </summary>
            <param name="incommingData"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentApproximation.GetGoodDataPointsForGraph">
            <summary>
            Get used section points for graphing
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentApproximation.GetBadDataPointsForGraph">
            <summary>
            Get un-used section points for graphing
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentApproximation.CreateBins">
            <summary>
            Newly create bins
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentApproximation.TrainCurrentData">
            <summary>
            Perform training on current data
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentApproximation.#ctor">
            <summary>
            Constructor for serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentApproximation.#ctor(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Construct with the owner data object
            </summary>
            <param name="dt"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.SegmentApproximation.Name">
            <summary>
            Name of TransferFunction class
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TransferFunctions.SegmentRegression">
            <summary>
            Class for segment regression algorithm
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentRegression.Clone">
            <summary>
            Copy data
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentRegression.GetBinsForIncomming(MPT.USN.CommonLib.Data.TFData)">
            <summary>
            Get bins for regression when doing evaluation.
            Here we will return no bin if dbAlwaysDoFullRegression is specified, in this case, 
            full regression will be used.
            </summary>
            <param name="incommingData"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentRegression.#ctor">
            <summary>
            Constructor for serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.SegmentRegression.#ctor(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Construct with the owner data object
            </summary>
            <param name="dt"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.SegmentRegression.Name">
            <summary>
            Name of TransferFunction class
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.DbAcceptChangeRequestsInsert">
            <summary>
            Class to manage change requests
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DbAcceptChangeRequestsInsert.#ctor(System.Collections.Generic.List{MPT.USN.CommonLib.Data.DBRequest})">
            <summary>
            Constructor
            </summary>
            <param name="requests"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DbAcceptChangeRequestsInsert.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DbAcceptChangeRequestsInsert.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DbAcceptChangeRequestsInsert.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DbAcceptChangeRequestsInsert.eColDef.ComponentPath">
            <summary>Path</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DbAcceptChangeRequestsInsert.eColDef.Name">
            <summary>Item Name</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DbAcceptChangeRequestsInsert.eColDef.Current">
            <summary>Current value</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DbAcceptChangeRequestsInsert.eColDef.Proposed">
            <summary>Proposed value</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DbAcceptChangeRequestsInsert.eColDef.Accept">
            <summary>Accept</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DbAcceptChangeRequestsInsert.eColDef.Result">
            <summary>Result</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.VisionJobRunPage">
            <summary>
            Vision Job Run Page
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.VisionJobRunPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionJobRunPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionJobRunPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionJobRunPage.#ctor(MPT.USN.CommonLib.Comp.VisionSystem.VisionJob)">
            <summary>
            Constructor
            </summary>
            <param name="visionJob"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPL.SPLLoader">
            <summary>
            Class for the SPL Load and unload axis
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLLoader.ddIntermediatePos">
            <summary>
            Intermediate position
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLLoader.ddClearPos">
            <summary>
            Clear position
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLLoader.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLLoader.#ctor(System.Int32,MPT.USN.CommonLib.Enums.AxisGroup,MPT.USN.CommonLib.Enums.AxisDir)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="axisGroup"></param>
            <param name="axisDir"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLLoader.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add a settings page to this class
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPC.XBarRControlLimitInsert">
            <summary>
            Insert panel with XBar control limits displayed
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.XBarRControlLimitInsert.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.XBarRControlLimitInsert.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.XBarRControlLimitInsert.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.XBarRControlLimitInsert.#ctor(MPT.USN.CommonLib.Comp.SPC.SPCData)">
            <summary>
            constructor
            </summary>
            <param name="spcData"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.XBarRControlLimitInsert.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            control OnPaint event handler
            </summary>
            <param name="pe"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpotEditor">
            <summary>
            Spot editor.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpotEditor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpotEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpotEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.WeldSpotEditor.#ctor(MPT.USN.CommonLib.Comp.WelderPattern.WeldPatternComponent)">
            <summary>
            WeldSpot editor constructor
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Input.ResistanceInput">
            <summary>
            Summary description for ReistanceInput.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.ResistanceInput.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.ResistanceInput.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
            <param name="channelPrefix"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.ResistanceInput.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.ResistanceInput.Initialize">
            <summary>
            Initialize this component
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.FilterSettings">
            <summary>
            Data class for Filter Settings inserts
            cut-off values are all relative to the base frequency
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.FilterSettings.dbActive">
            <summary>
            DataType for serialization and updating GUI components
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.FilterSettings.ddLowerCutoff">
            <summary>
            DataType for serialization and updating GUI components
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.FilterSettings.ddUpperCutoff">
            <summary>
            DataType for serialization and updating GUI components
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.FilterSettings.diOrderFilter">
            <summary>
            DataType for serialization and updating GUI components
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.FilterSettings.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.FilterSettings.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Primary Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.FilterSettings.Initialize(System.Double,System.Double)">
            <summary>
            Parameter initialization
            </summary>
            <param name="samplingRate"></param>
            <param name="baseFrequency"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.FilterSettings.SamplingRate">
            <summary>
            Sampling rate
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.FilterSettings.BaseFrequency">
            <summary>
            Base frequency for filter
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.CommonLibSettingsSection">
            <summary>
            Application Settings section for CommonLib
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.CommonLibSettingsSection.ProcessFamily">
            <summary>
            Process Family name
            </summary>
            
        </member>
        <member name="P:MPT.USN.CommonLib.CommonLibSettingsSection.MaxConcurrentProcesses">
            <summary>
            Max Concurrent Processes
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.CommonLibSettingsSection.DataStorageLoc">
            <summary>
            Location of recorded data storage
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.CommonLibSettingsSection.UnitMode">
            <summary>
            Unit mode
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.CommonLibSettingsSection.DbInstanceCounter">
            <summary>
            Instance number counter for database
            Also serves as a timestamp
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.CommonLibSettingsSection.SerialNumber">
            <summary>
            Serial number for this machine
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.CommonLibSettingsSection.RecordMode">
            <summary>
            Flag to indicate if in Record mode
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.CommonLibSettingsSection.Obsolete1">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.CommonLibSettingsSection.Obsolete2">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.CommonLibSettingsSection.DBFilename">
            <summary>
            Database name
            </summary>
            
        </member>
        <member name="P:MPT.USN.CommonLib.CommonLibSettingsSection.DBDataSource">
            <summary>
            Database DataSource
            </summary>
            
        </member>
        <member name="P:MPT.USN.CommonLib.CommonLibSettingsSection.DBRecEnable">
            <summary>
            Flag to indicate if database activity is true
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.CommonLibSettingsSection.Desktop">
            <summary>
            Flag to indicate if database activity is true
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.TimerRoot">
            <summary>
            Class to hold timer objects
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.TimerRoot.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.TimerRoot.IsRoot">
            <summary>
            This class is a root class
            </summary>
            <remarks>Decendent data object addresses begin with this object name</remarks>
            <returns></returns>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.DataDateTime">
            <summary>
            Summary description for DataDateTime.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDateTime.GetVal(MPT.USN.CommonLib.Enums.UnitTypes)">
            <summary>
            Return the value as an Object
            </summary>
            <param name="ut"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDateTime.#ctor">
            <summary>
            Constructor for Xml serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDateTime.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDateTime.#ctor(System.String,System.DateTime)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
            <param name="val"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDateTime.CopyDataFrom(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Copy data from another  DataBool object
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDateTime.SetDefault">
            <summary>
            Set value to its default
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDateTime.ValToString">
            <summary>
            Convert the value to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDateTime.ValToString(System.String)">
            <summary>
            Convert the value to a formatted string
            </summary>
            <param name="fmt"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDateTime.ValToDefaultString">
            <summary>
            Convert the default value to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDateTime.ValFromString(System.String)">
            <summary>
            Set value from string
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataDateTime.ConvertValidate(System.Object)">
            <summary>
            Validate basics for this type
            </summary>
            <param name="oVal"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataDateTime.ObjRawVal">
            <summary>
            Get/Save the value from an unknown object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataDateTime.RawVal">
            <summary>
            Get/Set the raw value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataDateTime.Val">
            <summary>
            Get/Set the value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataDateTime.Default">
            <summary>
            Get/Set the default
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.MPTNoDeleteDataGrid">
            <summary>
            A override class for data grid that prevents deletion on delete key
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTNoDeleteDataGrid.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            Override to suppress delete key
            </summary>
            <param name="msg"></param>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="T:MPT.USN.CommonLib.MCLException">
            <summary>
            The general MCL Exception
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MCLException.#ctor(MPT.USN.CommonLib.U.LogSeverity,MPT.USN.CommonLib.U.LogOptions,System.String,System.String,System.String[])">
            <summary>
            Exception with all arguments
            </summary>
            <param name="severity"></param>
            <param name="logOptions"></param>
            <param name="procedureName"></param>
            <param name="text"></param>
            <param name="customFileDumps"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MCLException.#ctor(MPT.USN.CommonLib.U.LogSeverity,MPT.USN.CommonLib.U.LogOptions,System.String,System.String,System.Object[])">
            <summary>
            Contructor with params
            </summary>
            <param name="severity"></param>
            <param name="logOptions"></param>
            <param name="procedureName"></param>
            <param name="text"></param>
            <param name="args"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MCLException.#ctor(System.Exception,MPT.USN.CommonLib.U.LogSeverity,MPT.USN.CommonLib.U.LogOptions,System.String,System.String,System.Object[])">
            <summary>
            Contructor with params and inner exceptions
            </summary>
            <param name="innerException"></param>
            <param name="severity"></param>
            <param name="logOptions"></param>
            <param name="procedureName"></param>
            <param name="text"></param>
            <param name="args"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MCLException.Execute(System.Exception,System.String)">
            <summary>
            Execute the logging, etc
            </summary>
            <param name="ex"></param>
            <param name="source"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MCLException.Execute(System.Exception,System.String,MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Execute the logging, etc
            </summary>
            <param name="ex"></param>
            <param name="source"></param>
            <param name="mc"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MCLException.Execute(System.String)">
            <summary>
            Execute the exception
            </summary>
            <remarks>Log it, pause or stop State machines.  Popup messagees, etc.</remarks>
            <param name="source"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MCLException.Execute(MPT.USN.CommonLib.SMMethodCall,System.String)">
            <summary>
            Execute the exception
            </summary>
            <remarks>Log it, pause or stop State machines.  Popup messagees, etc.</remarks>
            <param name="mc"></param>
            <param name="source"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.MCLException.PauseAction">
            <summary>
            Pause the action statement?
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.MCLExceptionErrorPopup">
            <summary>
            Exception derived class to handle data validation
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MCLExceptionErrorPopup.#ctor(System.Exception,System.String,System.String,MPT.USN.CommonLib.U.LogOptions)">
            <summary>
            Construct with innerException, procedure and message. Default is (Error), (Popup, Pause), (DumpOptions).
            </summary>
            <param name="innerException"></param>
            <param name="procedure"></param>
            <param name="msg"></param>
            <param name="dumpOptions"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MCLExceptionErrorPopup.#ctor(System.Exception,System.String,System.String)">
            <summary>
            Construct with innerException, procedure and message. Default is (Error), (Popup, Pause), (NoDump).
            </summary>
            <param name="innerException"></param>
            <param name="procedure"></param>
            <param name="msg"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MCLExceptionErrorPopup.#ctor(System.String,System.String,MPT.USN.CommonLib.U.LogOptions)">
            <summary>
            Constructor. Default is (Error), (Popup, Pause), (DumpOptions).
            </summary>
            <param name="procedure"></param>
            <param name="msg">String that contins error message to be dispayed</param>
            <param name="dumpOptions"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MCLExceptionErrorPopup.#ctor(System.String,System.String)">
            <summary>
            Constructor. Default is (Error), (Popup, Pause), (NoDump).
            </summary>
            <param name="procedure"></param>
            <param name="msg">String that contins error message to be dispayed</param>
        </member>
        <member name="T:MPT.USN.CommonLib.MCLExceptionErrorAlert">
            <summary>
            Exception derived class to handle data validation
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MCLExceptionErrorAlert.#ctor(System.Exception,System.String,System.String,MPT.USN.CommonLib.U.LogOptions)">
            <summary>
            Construct with innerException, procedure and message. Default is (Error), (Alert, Pause), (DumpOptions).
            </summary>
            <param name="innerException"></param>
            <param name="procedure"></param>
            <param name="msg"></param>
            <param name="dumpOptions"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MCLExceptionErrorAlert.#ctor(System.Exception,System.String,System.String)">
            <summary>
            Construct with innerException, procedure and message. Default is (Error), (Alert, Pause), (NoDump).
            </summary>
            <param name="innerException"></param>
            <param name="procedure"></param>
            <param name="msg"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MCLExceptionErrorAlert.#ctor(System.String,System.String,MPT.USN.CommonLib.U.LogOptions)">
            <summary>
            Constructor. Default is (Error), (Popup, Pause), (DumpOptions).
            </summary>
            <param name="procedure"></param>
            <param name="msg">String that contins error message to be dispayed</param>
            <param name="dumpOptions"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MCLExceptionErrorAlert.#ctor(System.String,System.String)">
            <summary>
            Constructor. Default is (Error), (Alert, Pause), (NoDump).
            </summary>
            <param name="procedure"></param>
            <param name="msg">String that contins error message to be dispayed</param>
        </member>
        <member name="T:MPT.USN.CommonLib.MCLExceptionWarningAlert">
            <summary>
            Exception derived class for warning and alert without pause or stop
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MCLExceptionWarningAlert.#ctor(System.Exception,System.String,System.String)">
            <summary>
            Construct with inner exception, procedure and message. Default is (Warning), (Alert,  Pause), (NoDump)
            </summary>
            <param name="innerException"></param>
            <param name="procedure"></param>
            <param name="msg"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MCLExceptionWarningAlert.#ctor(System.String,System.String)">
            <summary>
            Construct with procedure and message. Default is (Warning), (Alert,  Pause), (NoDump)
            </summary>
            <param name="procedure"></param>
            <param name="msg"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.MCLExceptionSilent">
            <summary>
            Exception derive class which do not interfere user
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MCLExceptionSilent.#ctor(System.Exception,System.String,System.String,MPT.USN.CommonLib.U.LogSeverity,MPT.USN.CommonLib.U.LogOptions)">
            <summary>
            Constructor which can specify severity and dump option
            </summary>
            <param name="innerException"></param>
            <param name="procedure"></param>
            <param name="msg"></param>
            <param name="logSeverity"></param>
            <param name="dumpOption"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MCLExceptionSilent.#ctor(System.Exception,System.String,System.String)">
            <summary>
            Construct with inner exception, procedure and message. Default is (Warning), (Silent, Continue), (DumpProcess, DumpScreenShot)
            </summary>
            <param name="innerException"></param>
            <param name="procedure"></param>
            <param name="msg"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MCLExceptionSilent.#ctor(System.String,System.String)">
            <summary>
            Construct with procedure and message. Default is (Warning), (Silent, Continue), (DumpProcess, DumpScreenShot)
            </summary>
            <param name="procedure"></param>
            <param name="msg"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.MCLExceptionSilentError">
            <summary>
            Exception derive class which do not interfere user
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MCLExceptionSilentError.#ctor(System.Exception,System.String,System.String)">
            <summary>
            Construct with inner exception, procedure and message. Default is (Error), (Silent, Continue), (DumpProcess, DumpScreenShot)
            </summary>
            <param name="innerException"></param>
            <param name="procedure"></param>
            <param name="msg"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MCLExceptionSilentError.#ctor(System.String,System.String)">
            <summary>
            Construct with procedure and message. Default is (Error), (Silent, Continue), (DumpProcess, DumpScreenShot)
            </summary>
            <param name="procedure"></param>
            <param name="msg"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.MCLExceptionSilentNoDump">
            <summary>
            Exception derive class which do not interfere user
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MCLExceptionSilentNoDump.#ctor(System.Exception,System.String,System.String)">
            <summary>
            Construct with inner exception, procedure and message. Default is (Warning), (Silent, Continue), (NoDump)
            </summary>
            <param name="innerException"></param>
            <param name="procedure"></param>
            <param name="msg"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MCLExceptionSilentNoDump.#ctor(System.String,System.String)">
            <summary>
            Construct with procedure and message. Default is (Warning), (Silent, Continue), (NoDump)
            </summary>
            <param name="procedure"></param>
            <param name="msg"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.ValidationException">
            <summary>
            Exception derived class to handle data validation
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.ValidationException.#ctor(System.String,System.String)">
            <summary>
            Constructor. Default is (Error), (Popup, Pause), (NoDump).
            </summary>
            <param name="procedure"></param>
            <param name="msg">String that contins error message to be dispayed</param>
        </member>
        <member name="M:MPT.USN.CommonLib.ValidationException.#ctor(System.String)">
            <summary>
            Constructor. Default is (Error), (Popup, Pause), (NoDump).
            </summary>
            <param name="msg">String that contins error message to be dispayed</param>
        </member>
        <member name="M:MPT.USN.CommonLib.ValidationException.#ctor(System.Exception,System.String)">
            <summary>
            Constructor. Default is (Error), (Popup, Pause), (NoDump).
            </summary>
            <param name="innerException"></param>
            <param name="msg"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.TransferFunctionException">
            <summary>
            Exception derived class for TransferFunction related exception
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.TransferFunctionException.#ctor(System.Exception,MPT.USN.CommonLib.U.LogSeverity,MPT.USN.CommonLib.U.LogOptions,System.String,System.String)">
            <summary>
            Full constructor
            </summary>
            <param name="innerException"></param>
            <param name="severity"></param>
            <param name="logOptions"></param>
            <param name="procedureName"></param>
            <param name="text"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.TransferFunctionException.#ctor(System.Exception,System.String)">
            <summary>
            Construct with inner exception and a message. Default is (Error), (Alert,  Pause), (NoDump).
            </summary>
            <param name="innerException"></param>
            <param name="message"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.TransferFunctionException.#ctor(System.String)">
            <summary>
            Construct with a message. Default is (Error), (Alert,  Pause), (NoDump).
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.VisionSystemException">
            <summary>
            Exception derived class for VisionSystem related exception
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.VisionSystemException.#ctor(System.Exception,MPT.USN.CommonLib.U.LogSeverity,MPT.USN.CommonLib.U.LogOptions,System.String,System.String)">
            <summary>
            Full constructor
            </summary>
            <param name="innerException"></param>
            <param name="severity"></param>
            <param name="logOptions"></param>
            <param name="procedureName"></param>
            <param name="text"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.VisionSystemException.#ctor(System.Exception,System.String)">
            <summary>
            Construct with inner exception and a message. Default is (Error), (Alert,  Pause), (NoDump).
            </summary>
            <param name="innerException"></param>
            <param name="message"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.VisionSystemException.#ctor(System.String)">
            <summary>
            Construct with a message. Default is (Error), (Alert,  Pause), (NoDump).
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.MotionSystemException">
            <summary>
            Exception derived class for MotionSystem related exception
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MotionSystemException.#ctor(System.Exception,MPT.USN.CommonLib.U.LogSeverity,MPT.USN.CommonLib.U.LogOptions,System.String,System.String)">
            <summary>
            Full constructor
            </summary>
            <param name="innerException"></param>
            <param name="severity"></param>
            <param name="logOptions"></param>
            <param name="procedureName"></param>
            <param name="text"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MotionSystemException.#ctor(System.Exception,System.String)">
            <summary>
            Construct with inner exception and a message. Default is (Error), (Alert,  Pause), (NoDump).
            </summary>
            <param name="innerException"></param>
            <param name="message"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MotionSystemException.#ctor(System.String)">
            <summary>
            Construct with a message. Default is (Error), (Alert,  Pause), (NoDump).
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.IOSystemException">
            <summary>
            Exception derived class for IOSystem related exception
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.IOSystemException.#ctor(System.Exception,MPT.USN.CommonLib.U.LogSeverity,MPT.USN.CommonLib.U.LogOptions,System.String,System.String)">
            <summary>
            Full constructor
            </summary>
            <param name="innerException"></param>
            <param name="severity"></param>
            <param name="logOptions"></param>
            <param name="procedureName"></param>
            <param name="text"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.IOSystemException.#ctor(System.Exception,System.String)">
            <summary>
            Construct with inner exception and a message. Default is (Error), (Alert,  Pause), (NoDump).
            </summary>
            <param name="innerException"></param>
            <param name="message"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.IOSystemException.#ctor(System.String)">
            <summary>
            Construct with a message. Default is (Error), (Alert,  Pause), (NoDump).
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.ProberSystemException">
            <summary>
            Exception derived class for ProberSystem related exception
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.ProberSystemException.#ctor(System.Exception,MPT.USN.CommonLib.U.LogSeverity,MPT.USN.CommonLib.U.LogOptions,System.String,System.String)">
            <summary>
            Full constructor
            </summary>
            <param name="innerException"></param>
            <param name="severity"></param>
            <param name="logOptions"></param>
            <param name="procedureName"></param>
            <param name="text"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.ProberSystemException.#ctor(System.Exception,System.String)">
            <summary>
            Construct with inner exception and a message. Default is (Error), (Alert,  Pause), (NoDump).
            </summary>
            <param name="innerException"></param>
            <param name="message"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.ProberSystemException.#ctor(System.String)">
            <summary>
            Construct with a message. Default is (Error), (Alert,  Pause), (NoDump).
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.LaserSystemException">
            <summary>
            Exception derived class for LaserSystem related exception
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.LaserSystemException.#ctor(System.Exception,MPT.USN.CommonLib.U.LogSeverity,MPT.USN.CommonLib.U.LogOptions,System.String,System.String)">
            <summary>
            Full constructor
            </summary>
            <param name="innerException"></param>
            <param name="severity"></param>
            <param name="logOptions"></param>
            <param name="procedureName"></param>
            <param name="text"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.LaserSystemException.#ctor(System.Exception,System.String)">
            <summary>
            Construct with inner exception and a message. Default is (Error), (Alert,  Pause), (NoDump).
            </summary>
            <param name="innerException"></param>
            <param name="message"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.LaserSystemException.#ctor(System.String)">
            <summary>
            Construct with a message. Default is (Error), (Alert,  Pause), (NoDump).
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.VSMException">
            <summary>
            Exception derived class for VSM related exception
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.VSMException.#ctor(System.Exception,MPT.USN.CommonLib.U.LogSeverity,MPT.USN.CommonLib.U.LogOptions,System.String,System.String)">
            <summary>
            Full constructor
            </summary>
            <param name="innerException"></param>
            <param name="severity"></param>
            <param name="logOptions"></param>
            <param name="procedureName"></param>
            <param name="text"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.VSMException.#ctor(System.Exception,System.String)">
            <summary>
            Construct with inner exception and a message. Default is (Error), (Alert,  Pause), (NoDump).
            </summary>
            <param name="innerException"></param>
            <param name="message"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.VSMException.#ctor(System.String)">
            <summary>
            Construct with a message. Default is (Error), (Alert,  Pause), (NoDump).
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.ScanSystemException">
            <summary>
            Exception derived class for ScanSystem related exception
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.ScanSystemException.#ctor(System.Exception,MPT.USN.CommonLib.U.LogSeverity,MPT.USN.CommonLib.U.LogOptions,System.String,System.String)">
            <summary>
            Full constructor
            </summary>
            <param name="innerException"></param>
            <param name="severity"></param>
            <param name="logOptions"></param>
            <param name="procedureName"></param>
            <param name="text"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.ScanSystemException.#ctor(System.Exception,System.String)">
            <summary>
            Construct with inner exception and a message. Default is (Error), (Alert,  Pause), (NoDump).
            </summary>
            <param name="innerException"></param>
            <param name="message"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.ScanSystemException.#ctor(System.String)">
            <summary>
            Construct with a message. Default is (Error), (Alert,  Pause), (NoDump).
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.MCLExceptionActionError">
            <summary>
            Exception derived class for Actions that need a remedy response to an error
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MCLExceptionActionError.#ctor(System.Exception,MPT.USN.CommonLib.AlertItem,System.String)">
            <summary>
            Full constructor
            </summary>
            <param name="innerException"></param>
            <param name="alertItem"></param>
            <param name="procedureName"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MCLExceptionActionError.#ctor(MPT.USN.CommonLib.AlertItem,System.String)">
            <summary>
            Full constructor
            </summary>
            <param name="alertItem"></param>
            <param name="procedureName"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.StringCommSystemException">
            <summary>
            Exception derived class for IOSystem related exception
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.StringCommSystemException.#ctor(System.Exception,MPT.USN.CommonLib.U.LogSeverity,MPT.USN.CommonLib.U.LogOptions,System.String,System.String)">
            <summary>
            Full constructor
            </summary>
            <param name="innerException"></param>
            <param name="severity"></param>
            <param name="logOptions"></param>
            <param name="procedureName"></param>
            <param name="text"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.StringCommSystemException.#ctor(System.Exception,System.String)">
            <summary>
            Construct with inner exception and a message. Default is (Error), (Alert,  Pause), (NoDump).
            </summary>
            <param name="innerException"></param>
            <param name="message"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.StringCommSystemException.#ctor(System.String)">
            <summary>
            Construct with a message. Default is (Error), (Alert,  Pause), (NoDump).
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.MPTControls.MPTCheckBoxWithColor">
            <summary>
            User Control of checkbox for DataBool or DataString
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.MPTControls.MPTCheckBoxWithColor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTCheckBoxWithColor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTCheckBoxWithColor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTCheckBoxWithColor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTCheckBoxWithColor.Init(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Populate the control
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTCheckBoxWithColor.UpdateVal">
            <summary>
            Update the inner control
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTCheckBoxWithColor.SelectControl">
            <summary>
            Select the underlying control for input focus
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.MPTControls.MPTCheckBoxWithColor.GetVal">
            <summary>
            Return the current Value of the underlying control
            </summary>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTCheckBoxWithColor.CheckColor">
            <summary>
            Access to Check Color;
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTCheckBoxWithColor.UnCheckColor">
            <summary>
            Access to uncheck Color;
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTCheckBoxWithColor.Text">
            <summary>
            Get set, the underlying check box value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTCheckBoxWithColor.ValTag">
            <summary>
            Value if checked
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTCheckBoxWithColor.Checked">
            <summary>
            Get/Set the inner check box control
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTCheckBoxWithColor.Appearance">
            <summary>
            Get/set underlying checkbox appearence
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.MPTControls.MPTCheckBoxWithColor.TextAlign">
            <summary>
            Get/set underlying checkbox Text alignment
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TransferFunctions.OffsetFromZeroPage">
            <summary>
            class to support Offset from zero transferfunction
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.OffsetFromZeroPage.#ctor">
            <summary>
            default constructor for serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.OffsetFromZeroPage.#ctor(MPT.USN.CommonLib.Data.TransferFunctions.OffsetFromZero)">
            <summary>
            Primary constructor
            </summary>
            <param name="offset"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.OffsetFromZeroPage.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.OffsetFromZeroPage.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.OffsetFromZeroPage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.WelderPattern.WeldPattern">
            <summary>
            Weld spot pattern
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.WelderPattern.WeldPattern.diSpotID">
            <summary>
            Spot ID of the pattern
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.WelderPattern.WeldPattern.diPatternID">
            <summary>
            Pattern ID
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.WelderPattern.WeldPattern.diShapeID">
            <summary>
            Shape ID
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.WelderPattern.WeldPattern.diHeadNo">
            <summary>
            Scan Head number that this point belong to.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.WelderPattern.WeldPattern.#ctor">
            <summary>
            Constructor for serialize.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.WelderPattern.WeldPattern.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor for first time creation.
            </summary>
            <param name="patternID"></param>
            <param name="spot"></param>
            <param name="shapeID"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.WelderPattern.WeldPattern.HeadNumber">
            <summary>
            Scan head number.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.WelderPattern.WeldPattern.PatternWeldSpotID">
            <summary>
            Get/Set weld spot of pattern.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.WelderPattern.WeldPattern.PatternID">
            <summary>
            Pattern ID.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.WelderPattern.WeldPattern.ShapeID">
            <summary>
            Shape ID.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.CameraWindow">
            <summary>
            Class for camera window display
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CameraWindow.#ctor(System.String,System.Windows.Forms.Control,MPT.USN.CommonLib.Comp.VisionSystem.CameraWindow.CameraWindowDisplayMode)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="theDisplay"></param>
            <param name="displayMode"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CameraWindow.#ctor(System.String,System.Windows.Forms.Control,MPT.USN.CommonLib.Comp.VisionSystem.CameraWindow.CameraWindowDisplayMode,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="theDisplay"></param>
            <param name="displayMode"></param>
            <param name="simpleDisplay"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CameraWindow.AddDisplayObject(System.Windows.Forms.Control)">
            <summary>
            Add the display object
            </summary>
            <param name="displayObject"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CameraWindow.SetDisplayMode(MPT.USN.CommonLib.Comp.VisionSystem.CameraWindow.CameraWindowDisplayMode)">
            <summary>
            Set the display mode
            </summary>
            <param name="displayMode"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.CameraWindow.IsRunningLive">
            <summary>
            Get/Set is running live
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.CameraWindow.DisplayMode">
            <summary>
            Get/Set the display mode
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.CameraWindow.DisplayFrame">
            <summary>
            Get the display frame
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.CameraWindow.DisplayObject">
            <summary>
            Get the real display object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.CameraWindow.DisplayName">
            <summary>
            Get the display name
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.CameraWindow.SimpleDisplay">
            <summary>
            Get whether this is a simple display
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.CameraWindow.EnableJobResultImage">
            <summary>
            Enable display job result image
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.CameraWindow.CanDisplayNow">
            <summary>
            Get whether can display now
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.CameraWindow.CameraWindowDisplayMode">
            <summary>
            Display mode enum
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.CameraWindow.CameraWindowDisplayMode.AlwaysDisplay">
            <summary>
            Always display
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.CameraWindow.CameraWindowDisplayMode.DisplayIfNotProductionMode">
            <summary>
            Display if not production mode
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.CameraWindow.CameraWindowDisplayMode.NeverDisplay">
            <summary>
            Never display
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPL.SPLStations">
            <summary>
            Class for all stations
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLStations.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLStations.#ctor(System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLStations.ClearCurrentSuspension">
            <summary>
            Dereference the current suspension
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLStations.SetCurrentSuspension">
            <summary>
            Reference the current suspension
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLStations.AllClear">
            <summary>
            Checks each child station to verify that the suspension at its station has been processed.
            Returns false if any station is still busy processing a suspension.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axes">
            <summary>
            Summary description for Axes.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axes.dsControlVar">
            <summary>
            Variable name that controls the actions
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axes.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axes.#ctor(System.String,MPT.USN.CommonLib.Enums.AxisGroup,MPT.USN.CommonLib.Enums.AxisMsk)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
            <param name="axisGroup"></param>
            <param name="taskMask"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axes.Initialize">
            <summary>
            Initialize the component
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axes.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add a settings page to this class
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axes.Update">
            <summary>
            Called on every thread loop
            return 'true' if updating is complete
            this will suspend the thread
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axes.MoveContoured2(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataDouble,MPT.USN.CommonLib.Data.DataDouble,MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
            Perform a coordinated move
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axes.MoveRapid(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataDouble,MPT.USN.CommonLib.Data.DataDouble,MPT.USN.CommonLib.Data.DataDouble,MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
            Perform a Rapid move
            </summary>
            <param name="caller"></param>
            <param name="ddPos1"></param>
            <param name="ddSpeed1"></param>
            <param name="ddPos2"></param>
            <param name="ddSpeed2"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axes.Enable(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataBool)">
            <summary>
            Enable the axes
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axes.Home(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Home the axes
            </summary>
            <param name="caller"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axes.ProgramStart(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Start a program
            </summary>
            <param name="caller"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axes.ProgramStop(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Stop a program
            </summary>
            <param name="caller"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axes.ProgramCmd(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataString)">
            <summary>
            Move the axes
            </summary>
            <param name="caller"></param>
            <param name="dsCmd"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axes.CurAxisMask">
            <summary>
            Get/Set the defined axis
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.Axes.ControlVar">
            <summary>
            Control variable
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.LaserSystem.Laser">
            <summary>
            Class for Laser component
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.LaserSystem.Laser.diLaserLevel">
            <summary>
            Current laser level
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.LaserSystem.Laser.dbGuide">
            <summary>
            Guide flag
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.LaserSystem.Laser.dsMode">
            <summary>
            Current laser Mode
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.LaserSystem.Laser.ddMinPercentPower">
            <summary>
            Minimum laser power
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.LaserSystem.Laser.ddLaserPower">
            <summary>
            Current laser power
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.LaserSystem.Laser.ddPercentPower">
            <summary>
            Current Percent power
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.LaserSystem.Laser.ddLaserCurrent">
            <summary>
            Current laser current
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.LaserSystem.Laser.ddTargetLaserPower">
            <summary>
            Target laser power
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.LaserSystem.Laser.ddTargetPercentPower">
            <summary>
            Target laser power
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.LaserSystem.Laser.ddTargetLaserCurrent">
            <summary>
            Target laser current
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.LaserSystem.Laser.ddSetPointLaserPower">
            <summary>
            Reported laser power
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.LaserSystem.Laser.ddSetPointLaserScale">
            <summary>
            Reported laser scale
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.LaserSystem.Laser.ddSetPointLaserCurrent">
            <summary>
            Reported laser current
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.LaserSystem.Laser.ddSetPointLaserDuration">
            <summary>
            Laser duration
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.LaserSystem.Laser.ddLaserDuration">
            <summary>
            Laser duration
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.LaserSystem.Laser.dsTriggerChannel">
            <summary>
            Trigger Channel
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.Laser.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.Laser.#ctor(System.Int32)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.Laser.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add Property Pages
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.Laser.Initialize">
            <summary>
            Initialize this component
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.Laser.SetCurrent(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
             Set the Laser current
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.Laser.SetGuide(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataBool)">
            <summary>
             Set the Laser Guide
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.Laser.SetPower(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
             Set the Laser power
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.Laser.SetPercentPower(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
             Set the Laser power
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.Laser.SetDuration(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
             Set the Laser power
            </summary>
            <param name="mcCaller"></param>
            <param name="ddDuration"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.Laser.Trigger(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
             Engage the Laser trigger signal
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.LaserSystem.Laser.ResetTimer">
            <summary>
            For those that use the timer
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.LaserSystem.Laser.Channel">
            <summary>
            Get/Set Id for this axis
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.LaserSystem.Laser.OutputChannel">
            <summary>
            Get the bool output channel
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.LaserSystem.Laser.TargetPercentPower">
            <summary>
            Get/set the Target Power
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.LaserSystem.Laser.PercentPower">
            <summary>
            Get/set the Power
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.LaserSystem.Laser.TimerExpired">
            <summary>
            Return true if timer is expired
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Output.EthernetOutput">
            <summary>
            Summary description for EthernetOutput.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.EthernetOutput.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.EthernetOutput.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Output.EthernetOutput.SetBoolOutput(MPT.USN.CommonLib.SMMethodCall,System.Boolean)">
            <summary>
            Override for trigger
            </summary>
            <param name="mc"></param>
            <param name="bVal"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Input.ScaledAnalogInputPage">
            <summary>
            The set up page the ScaleAnalogInput
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.ScaledAnalogInputPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.ScaledAnalogInputPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.ScaledAnalogInputPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.ScaledAnalogInputPage.#ctor(MPT.USN.CommonLib.Comp.IOSystem.Input.ScaledAnalogInput)">
            <summary>
            Default constructor
            </summary>
            <param name="sInput">pass over the input reference</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.ScaledAnalogInputPage.btnUpdate_Click(System.Object,System.EventArgs)">
            <summary>
            Update the settings
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.ScaledAnalogInputPage.btnSync_Click(System.Object,System.EventArgs)">
            <summary>
            Sync the load cell
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.ScaledAnalogInputPage.btnRead_Click(System.Object,System.EventArgs)">
            <summary>
            Read the current value
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Input.ScaledAnalogInput">
            <summary>
            CustomAnalogInput first time setup for LoadCell. Can be used
            for any input return a double value.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.ScaledAnalogInput.ddMaxRawValue">
            <summary>
            Max raw value from A/D converter
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.ScaledAnalogInput.ddMinRawValue">
            <summary>
            Min raw value from A/D converter
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.ScaledAnalogInput.ddMaxValue">
            <summary>
            Max physical value
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.ScaledAnalogInput.ddMinValue">
            <summary>
            Min physical value
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.ScaledAnalogInput.ddReadValue">
            <summary>
            Current value used in the logic
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.ScaledAnalogInput.#ctor">
            <summary>
            Serialize constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.ScaledAnalogInput.#ctor(System.Int32,System.Int32)">
            <summary>
            First time constructor
            </summary>
            <param name="axisId">Do we need axisId here???</param>
            <param name="channel">The channel for this input</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.ScaledAnalogInput.Read(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            The method call to update the _ddReadValue.
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.ScaledAnalogInput.Sync(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            This method call to Sync the ScaledAnalogInput (only for LoadCell
            at the moment)
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.ScaledAnalogInput.UpdateSettings(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            This method call update the setings
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.ScaledAnalogInput.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Assign a page to this component
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.ScaledAnalogInput.ReadValue">
            <summary>
            Get/Set Read Value
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.CompWatchList">
            <summary>
            Class to manage list of Watch windows
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompWatchList.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompWatchList.#ctor(System.Int32)">
            <summary>
            Constructor for first-time creation
            </summary>
            <param name="nWatches"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompWatchList.AppendNewWatch">
            <summary>
            Adds a new watch
            </summary>
            <returns>Returns the index for the new watch object</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompWatchList.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add a settings page to the 'tab' of this inherited class.
            If skip is set to true, then any pages assigned to this inherited 
            class will be skipped.
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ComponentPage">
            <summary>
            Summary description for ComponentPage.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ComponentPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentPage.#ctor(MPT.USN.CommonLib.Comp.ComponentBase)">
            <summary>
            Constructor
            </summary>
            <param name="comp"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ComponentPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ComponentPage.ShowIt">
            <summary>
            Show the page based on privilege
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ComponentPage.CanSafeDispose">
            <summary>
            Indicate whether this page can be disposed when out of scence
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPL.SPLBoat">
            <summary>
            Boat for SPL
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLBoat.diboatNumber">
            <summary>
            Boat number count per lot
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLBoat.dsTimeStampString">
            <summary>
            Time stamp string for display
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLBoat._timeStamp">
            <summary>
            Boat time stamp
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLBoat.dbMissingPart">
            <summary>
            Stored flag to save if part is missing on this boat
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLBoat.dbActive">
            <summary>
            The boat is actively indexing
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLBoat.diBaseIndex">
            <summary>
            The boat is actively indexing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLBoat.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLBoat.#ctor(System.Int32,System.Int32,System.Type)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="boatId"></param>
            <param name="numSusp"></param>
            <param name="tySusp"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLBoat.#ctor(System.Int32,System.Int32,System.Type,System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="boatId"></param>
            <param name="numSusp"></param>
            <param name="tySusp"></param>
            <param name="baseName"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLBoat.GetSuspensionAt(System.Int32)">
            <summary>
            Return the nth suspension object of this boat
            </summary>
            <param name="iSuspension"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLBoat.GetAnyPartAtIndexPos(System.Int32)">
            <summary>
            Return true if part is at index pos
            </summary>
            <param name="indexPos"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLBoat.GetGoodPartAtIndexPos(System.Int32)">
            <summary>
            Return true if part is at index pos
            </summary>
            <param name="indexPos"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLBoat.PrepareBoat(System.Int32,System.Int32)">
            <summary>
            Initialize all the suspensions to correct indexes
            </summary>
            <param name="baseIndex"></param>
            <param name="boatNumber"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLBoat.Initialize">
            <summary>
            Initialize this component
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLBoat.ddPosError">
            <summary>
            Position error
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLBoat.UpdateSuspensionPositions(System.Double)">
            <summary>
            Update the suspension positions
            </summary>
            <param name="newAbsolutePos"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLBoat.AddSuspMclData(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Register for Extra MCL item dynamic load
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLBoat.RemoveSuspMclData(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Remove Extra MCL item dynamic load
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLBoat.RemoveSuspMclData(System.String)">
            <summary>
            Remove Extra MCL item dynamic load Overload2
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLBoat.BoatNumber">
            <summary>
            Get/Set Number of BEResultBoat
            </summary> 
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLBoat.TimeStamp">
            <summary>
            Get and Set time stamp for boat. 
            </summary> 
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLBoat.MissingPart">
            <summary>
            Flag to indicate if part is missing on the boat
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLBoat.Active">
            <summary>
            The boat is actively indexing
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPC.SPCResults">
            <summary>
            Class to hold SPC result data
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCResults.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCResults.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCResults.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCResults.#ctor(MPT.USN.CommonLib.Comp.SPC.SPCData)">
            <summary>
            constructor
            </summary>
            <param name="spcData"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPC.HistogramResults">
            <summary>
            Data object supporting display of the histogram data output
            </summary>
            <summary>
            Data object supporting display of the histogram data output
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.HistogramResults.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.HistogramResults.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.HistogramResults.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.HistogramResults.#ctor(MPT.USN.CommonLib.Comp.SPC.HistogramData)">
            <summary>
            Constructor for class
            </summary>
            <param name="histogramData"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine">
            <summary>
            Scan line definition class
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine._scanSystem">
            <summary>
            Refererence to ScanSystem component
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine._correctedX">
            <summary>
            The corrected scan value for X
            This is what the ScanSystem uses to move mirrors.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine._correctedY">
            <summary>
            The corrected scan value for Y
            This is what the ScanSystem uses to move mirrors.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.sort">
            <summary>
            Sort mode
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine._visableL">
            <summary>
            No Public access.  Use Exposed property w/o preceeding underscore 
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.dfPower">
            <summary>
            No Public access.  Use Exposed property w/o preceeding underscore 
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.dfLaserLength">
            <summary>
            No Public access.  Use Exposed property w/o preceeding underscore 
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine._laserLengthP">
            <summary>
            No Public access.  Use Exposed property w/o preceeding underscore 
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.dfAngle">
            <summary>
            No Public access.  Use Exposed property w/o preceeding underscore 
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.dfLaserX">
            <summary>
            No Public access.  Use Exposed property w/o preceeding underscore 
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine._laserXP">
            <summary>
            No Public access.  Use Exposed property w/o preceeding underscore 
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.dfY">
            <summary>
            No Public access.  Use Exposed property w/o preceeding underscore 
            This is used to store the Y location definition
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine._YP">
            <summary>
            No Public access.  Use Exposed property w/o preceeding underscore 
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.dbFront">
            <summary>
            No Public access.  Use Exposed property w/o preceeding underscore 
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.dbActiveScan">
            <summary>
            No Public access.  Use Exposed property w/o preceeding underscore 
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.dbActiveLaser">
            <summary>
            No Public access.  Use Exposed property w/o preceeding underscore 
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.diOrder">
            <summary>
            No Public access.  Use Exposed property w/o preceeding underscore 
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.#ctor">
            <summary>
            Constructor for Serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.#ctor(MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem)">
            <summary>
            Constructor for everything else.  Dummy var to allow overload
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.Init(MPT.USN.CommonLib.Comp.ScanSystem.ScanSystem)">
            <summary>
            Initialize 
            </summary>
            <param name="scanSystem"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.Clone(MPT.USN.CommonLib.Comp.ScanSystem.ScanLine)">
            <summary>
            To deep copy a new line
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.UpdateGUIAll">
            <summary>
            Refresh the display of all controls
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.UpdateAll">
            <summary>
            Notify all interested of a change
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.WriteLine(System.IO.TextWriter)">
            <summary>
            Add fields of this class into an exported record
            </summary>
            <param name="w"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.ReadLine(System.Int32,System.String[])">
            <summary>
            Read comma-separated fields starting at iCol
            </summary>
            <param name="iCol"></param>
            <param name="aS"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.AfterFileRead">
            <summary>
            After a Machine xml file read
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.Ratio">
            <summary>Factor that converts MM to pixels</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.xOffset">
            <summary>X offset in pixels</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.yOffset">
            <summary>Y offset in pixels</summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.PixelsToMM(System.Int32)">
            <summary>
            Convert Pixels to MM
            </summary>
            <param name="X">pixels</param>
            <returns>MM</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.PixelsToMM(System.Drawing.Point)">
            <summary>
            Convert Pixels to MM
            </summary>
            <param name="p">Point in pixels</param>
            <returns>Point in MM</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.PixelsToMM(System.Int32,System.Int32)">
            <summary>
            Convert Pixels to MM
            </summary>
            <param name="X">X in pixels</param>
            <param name="Y">Y in pixels</param>
            <returns>Point in MM</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.MMToPixels(System.Drawing.PointF)">
            <summary>
            Convert MM to Pixels
            </summary>
            <param name="p">Point in MM</param>
            <returns>Point in pixels</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.MMToPixels(System.Single,System.Single)">
            <summary>
            Convert MM to Pixels
            </summary>
            <param name="x">X in MM</param>
            <param name="y">Y in MM</param>
            <returns>Point in pixels</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.MMToPixels(System.Single)">
            <summary>
            Convert MM to Pixels
            </summary>
            <param name="X">X in MM</param>
            <returns>Point in pixels</returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.LaserLength">
            <summary>
            Actual distance that laser is turned on
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.IsLeftOutrigger">
            <summary>
            Returns true if is left outrigger
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.IsOnTop">
            <summary>
            Used to make line with pointer over it on top of other lines during painting
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.LaserLengthP">
            <summary>
            Actual distance in Pixels that laser is turned on
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.Angle">
            <summary>
            Angle from the horizontal that scanner traverses
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.LaserX">
            <summary>
            X position of the center of the laser line
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.LaserXP">
            <summary>
            X position of the left of the laser line in pixels
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.Y">
            <summary>
            Y position of the laser and scanner lines
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.YP">
            <summary>
            Y position of the top of the scan line in Pixels
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.LocationL">
            <summary>
            Location in Pixels of the upper left corner of the laser line
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.LocationS">
            <summary>
            Location in Pixels of the upper left corner of the Scan line
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.LineWidth">
            <summary>
             thickness of line in pixels
            do not "XmlIgnore" this one (need to save)
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.LaserAreaP">
            <summary>
             Area of Laser Line
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.VisableL">
            <summary>
             Show the Line?
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.Front">
            <summary>
             for positioning lines on suspension
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.ActiveScan">
            <summary>
            If the Scan line is not Active, it and Laser line are skipped (true, false)
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.ActiveLaser">
            <summary>
            If the Scan or Laser line is not Active, it is skipped (true, false)
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.Order">
            <summary>
            The order that the line is scanned in the array
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.SelectedL">
            <summary>
             Is line selected?
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.CorrectedX">
            <summary>
            The corrected scan value for X
            This is what the ScanSystem uses to move mirrors.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.CorrectedY">
            <summary>
            The corrected scan value for Y
            This is what the ScanSystem uses to move mirrors.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.eSort">
            <summary>
            Available sort modes
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.eSort.ORDER">
            <summary>Order (if used)</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.eSort.YPOS">
            <summary>Sort only by Y position</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.eSort.WEIGHTED">
            <summary>Used by Direct Vector</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.eSort.TOTARGETX">
            <summary>Used by Direct Vector</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.eSort.ROLL">
            <summary>Used by Cumulative Fixed</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.eSort.PITCH">
            <summary>Used by Cumulative Fixed</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.ScanSystem.ScanLine.eSort.TOP_BOT_YPOS">
            <summary>Sort by top/botom and YPos</summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Input.VoltageInput">
            <summary>
            Summary description for ReistanceInput.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.VoltageInput.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.VoltageInput.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
            <param name="channelPrefix"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.VoltageInput.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.VoltageInput.Initialize">
            <summary>
            Initialize this component
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.UnitTypeMenuItem">
            <summary>
            Class to add UnitType to menu item
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.UnitTypeMenuItem.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="text"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.UnitTypeMenuItem.UnitType">
            <summary>
            Get/Set unittype
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.UnitTypeMenuItem.UnitTypeRespect">
            <summary>
            Get/Set UnitTypeRespect
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Help.UrlComboBox">
            <summary>
            Class for the Url comboBox
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Help.UrlComboBox.FireNewUrl">
            <summary>
            Fire the new url 
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Help.UrlComboBox.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Trap the Enter key and eat it
            </summary>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="E:MPT.USN.CommonLib.Help.UrlComboBox.OnNewUrl">
            <summary>
            Event for url change
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.Validations.ValMinMaxInsert">
            <summary>
            Class to contain Min Max data entry
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValMinMaxInsert.#ctor(MPT.USN.CommonLib.Data.DataType,MPT.USN.CommonLib.Data.Validations.ValidateMinMax)">
            <summary>
            Constructor
            </summary>
            <param name="dt"></param>
            <param name="validateMinMax"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValMinMaxInsert.OnRefresh">
            <summary>
            Refresh due to changes in Dt
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.Validations.ValMinMaxInsert.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValMinMaxInsert.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValMinMaxInsert.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.Validations.ValMinMaxInsert.ReadOnly">
            <summary>
            Read only
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TFBin">
            <summary>
            TFBin: Class to hold one bin for transfer function.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFBin.AddDataToBin(MPT.USN.CommonLib.Data.TFData)">
            <summary>
            Add an TFData to this bin. Exception is thrown if mismatched with list validation
            Data only added if all validations are passed
            </summary>
            <param name="tfData"></param>
            <returns>True if data is added</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFBin.Clear">
            <summary>
            Clear all data in this bin. Set the bin as untrained
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFBin.#ctor(System.Int32,System.Collections.Generic.List{MPT.USN.CommonLib.Data.Validations.Validation})">
            <summary>
            Construct with the bin size, as well as the list of validation for all
            inputs. The validations will be cloned and become the bin boundaries.
            </summary>
            <param name="binSize"></param>
            <param name="listBinValidation"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFBin.DoesDataPointBelongToBin(MPT.USN.CommonLib.Data.TFData)">
            <summary>
            Check whether a data point belongs to this bin
            </summary>
            <param name="tfData"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFBin.IsAdjacentWith(MPT.USN.CommonLib.Data.TFBin,System.Int32)">
            <summary>
            Check whether this bin is adjacent bin with another bin on a specified direction
            </summary>
            <param name="anotherTFBin"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFBin.GetBulkDataWithoutMinMax">
            <summary>
            Get a list of bulk data (TFData) after remove Min and Max
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFBin.GetResponseSigma">
            <summary>
            Get the response sigma of this bin
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFBin.ToString">
            <summary>
            Convert all bin data to string for writing transfer function file
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFBin.GetMinDataPointInQueue">
            <summary>
            Get the data point in queue which has minimum response
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFBin.GetMaxDataPointInQueue">
            <summary>
            Get the data point in queue which has maximum response
            </summary>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TFBin.BinSize">
            <summary>
            Get/Set the bin size. Data is preserved on set. If the set value less than 5, 
            it will default  to 5
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TFBin.SectionPoint">
            <summary>
            Get the section point. Child will define the way to get it. Here it is null.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TFBin.IsTrained">
            <summary>
            Get whether this bin is trained
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TFBin.ListBinValidation">
            <summary>
            Get the internal list of bin validation. Mainly for finding adjacent bins
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TFBin.IsBinFull">
            <summary>
            Get whether the bin is full
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TFBin.IsBinUsed">
            <summary>
            Get/Set whether the bin is used in most recent regression
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TFSection">
            <summary>
            TFSection: Class to hold one section for Segment Approximation transfer function.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFSection.#ctor(System.Int32,System.Collections.Generic.List{MPT.USN.CommonLib.Data.Validations.Validation})">
            <summary>
            Construct with the bin size, as well as the list of validation for all
            inputs. The validations will be cloned and become the bin boundaries.
            </summary>
            <param name="binSize"></param>
            <param name="listBinValidation"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFSection.AddDataToBin(MPT.USN.CommonLib.Data.TFData)">
            <summary>
            Add an TFData to this bin. Exception is thrown if mismatched with list validation
            Data only added if all validations are passed
            </summary>
            <param name="tfData"></param>
            <returns>True if data is added</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFSection.Clear">
            <summary>
            Clear all data in this bin. Set the section point to default. Set the bin as untrained
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFSection.CalculateSectionPoint">
            <summary>
            Calculate the section point using weighing method based on error of each point.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TFSection.BinSize">
            <summary>
            Get/Set the bin size. Data is preserved on set. If the set value less than 5, 
            it will default  to 5
            The section point will be recalculated as well.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TFSection.SectionPoint">
            <summary>
            Get the section point
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TFBinList">
            <summary>
            TFBinList: Class to hold all possible bins for a transfer function
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TFBinList._listTFBin">
            <summary>
            List of bins
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFBinList.#ctor(System.Int32,MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Construct with the bin size and an data object of a transfer function
            </summary>
            <param name="binSize">
            The size of each bin (number of data point inside a bin)
            </param>
            The data object of a transfer function. Information about transfer function inputs are
            in this data object
            <param name="dataObject">
            </param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFBinList.GetGoodAdjacentBin(MPT.USN.CommonLib.Data.TFData,System.Int32)">
            <summary>
            Get only the good adjacent bin in a direction
            </summary>
            <param name="tfData"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFBinList.GetAllAdjacentBins(MPT.USN.CommonLib.Data.TFData,System.Int32)">
            <summary>
            Get all adjacent bins in a direction
            </summary>
            <param name="tfData"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFBinList.AddData(MPT.USN.CommonLib.Data.TFData)">
            <summary>
            Add an TFData to a proper available bin
            </summary>
            <param name="tfData"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFBinList.ResizeBin(System.Int32)">
            <summary>
            Resize all bins while preserve data.
            NOTE: All section points will be recalculated if section points are used
            </summary>
            <param name="newBinSize"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFBinList.ClearAllBins">
            <summary>
            Clear data in all bins. NOTE: section point of each bin will be reset to bin center, 
            and all bins will be set to untrained.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFBinList.ReadFromFile(System.String)">
            <summary>
            Freshly reading data from a transfer function file, then dump back
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFBinList.DumpToFile(System.String)">
            <summary>
            Dump as a transfer function file
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFBinList.DetermineBinsForIncomming(MPT.USN.CommonLib.Data.TFData)">
            <summary>
            Get the bins to be used in feed forward calculation
            </summary>
            <param name="tfData"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFBinList.GetAllTrainedBins">
            <summary>
            Get all bins which has been trained.
            </summary>
            <returns></returns>
            <remarks>
            During training, we perform overall regression based on trained bin only.
            </remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFBinList.GetAllUnTrainedBins">
            <summary>
            Get all bins which are untrained.
            </summary>
            <returns></returns>
            <remarks>
            Whenever we can perform regression, we will set the Section Point of those un-trained bins
            based on evaluation against the regression
            </remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFBinList.GetAllSectionPoints">
            <summary>
            Return a list of all section points
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFBinList.GetRecentUsedSectionPoints">
            <summary>
            Get the recent used section points
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFBinList.GetRecentUnUsedSectionPoints">
            <summary>
            Get the recent un-used section points
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFBinList.GetContainerBin(MPT.USN.CommonLib.Data.TFData)">
            <summary>
            Get the bin which contain the data point
            </summary>
            <param name="tfData"></param>
            <returns>The bin, or null if not found</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFBinList.GetResponseSigmaOfContainerBin(MPT.USN.CommonLib.Data.TFData)">
            <summary>
            Get sigma of container bin of a TF data
            </summary>
            <param name="tfData"></param>
            <returns>
            Sigma of the bin if the bin is found and full.
            If bin is not found or not full yet, return the double.MaxValue
            </returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFBinList.ToString">
            <summary>
            Convert data of all available bins to string for writing transfer function file
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFBinList.CreateBin(System.Int32,System.Collections.Generic.List{MPT.USN.CommonLib.Data.Validations.Validation})">
            <summary>
            Create 1 bin
            </summary>
            <param name="binSize"></param>
            <param name="oneBinValidationList"></param>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TFBinList.InternalBinList">
            <summary>
            Get the internal list for regression usage
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TFSectionList">
            <summary>
            TFSectionList: Class to hold all possible sections for Segment Approximation
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFSectionList.#ctor(System.Int32,MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Construct with the bin size and an data object of a transfer function
            </summary>
            <param name="binSize">
            The size of each bin (number of data point inside a bin)
            </param>
            The data object of a transfer function. Information about transfer function inputs are
            in this data object
            <param name="dataObject">
            </param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TFSectionList.CreateBin(System.Int32,System.Collections.Generic.List{MPT.USN.CommonLib.Data.Validations.Validation})">
            <summary>
            Create 1 bin (section)
            </summary>
            <param name="binSize"></param>
            <param name="oneBinValidationList"></param>
            <returns></returns>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.RunParamInsert">
            <summary>
            Insert for RunParams setting
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.RunParamInsert.#ctor(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Constructor
            </summary>
            <param name="dataType"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.RunParamInsert.#ctor(MPT.USN.CommonLib.Data.DataType,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="dataType"></param>
            <param name="readOnly"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.RunParamInsert.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.RunParamInsert.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.RunParamInsert.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.RunParamInsert.ShowIt">
            <summary>
            Show the page based on privilege
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp">
            <summary>
            Component for tower lamp handling
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.dbRedLamp">
            <summary>
            Associate IO to Red Lamp switch
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.dbGreenLamp">
            <summary>
            Associate IO to Green Lamp switch
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.dbYellowLamp">
            <summary>
            Associate IO to Yellow Lamp switch
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.dbContinuousLighting">
            <summary>
            Associate IO to Continuous Lighting switch
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.dsRedLampMnemonic">
            <summary>
            String represent the mnemonic of Red Lamp Mnemonic
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.dsGreenLampMnemonic">
            <summary>
            String represent the mnemonic of Green Lamp Mnemonic
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.dsYellowLampMnemonic">
            <summary>
            String represent the mnemonic of Yellow Lamp Mnemonic
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.dsContinuousLightingMnemonic">
            <summary>
            String represent the mnemonic of Continuous Lighting Mnemonic
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.dbEnableIdleTimeOut">
            <summary>
            Enable time out mechanism when idle (auto switch to yellow).
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.ddIdleTimeOut">
            <summary>
            Idle time out
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.#ctor">
            <summary>
            Constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.Initialize">
            <summary>
            Initialization on GUI thread
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Adding property page
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.TurnOnRedLamp(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Turn on red lamp
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.TurnOnGreenLamp(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Turn on green lamp
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.TurnOnYellowLamp(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Turn on yellow lamp
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.TurnOffRedLamp(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Turn off red lamp
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.TurnOffGreenLamp(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Turn off green lamp
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.TurnOffYellowLamp(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Turn off yellow lamp
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.BlinkRedLamp(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Blinking red lamp
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.BlinkGreenLamp(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Blinking green lamp
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.BlinkYellowLamp(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Blinking yellow lamp
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.ResetIdleTimeOut">
            <summary>
            Reset the timer which counting for idle time
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.RedLamp">
            <summary>
            On/Off red lamp. True for ON.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.GreenLamp">
            <summary>
            On/Off green lamp. True for ON.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.YellowLamp">
            <summary>
            On/Off yellow lamp. True for ON.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.ContinuousLighting">
            <summary>
            On/Off continuous lighting property. True for ON.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.RedLampMnemonic">
            <summary>
            Get/Set the mnemonic for Red Lamp IO
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.GreenLampMnemonic">
            <summary>
            Get/Set the mnemonic for Green Lamp IO
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.YellowLampMnemonic">
            <summary>
            Get/Set the mnemonic for Yellow Lamp IO
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.ContinuousLightingMnemonic">
            <summary>
            Get/Set the mnemonic for Continuous Lighting IO
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.EnableIdleTimeOut">
            <summary>
            Get whether idle time out is enabled
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.TowerLamp.TowerLamp.IdleTimeOut">
            <summary>
            Get idle time out duration in second
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MPTClock">
            <summary>
            Summary description for MPTClock.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MPTClock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MPTClock.Update">
            <summary>
            Update the Clock
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MPTClock.Reset">
            <summary>
            Reset the Clock
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MPTClock.Disable">
            <summary>
            Disable the clock
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Input.DigInput">
            <summary>
            Summary description for DigInput.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.DigInput.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.DigInput.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.DigInput.PostReadUpgrade(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Give the component an opportunity to change properties of dataType
            after file read and before registration takes place.
            For example: rename it
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.CompMachine">
            <summary>
            Summary description for CompMachine.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.currentVersion">
            <summary>
            The current version for xml file
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine._suspension">
            <summary>
            Reference to suspension object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.version">
            <summary>
            Version to be serialized in XML file
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.IsRoot">
            <summary>
            This class is a root class
            </summary>
            <remarks>Decendent data object addresses begin with this object name</remarks>
            <returns></returns>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.diSerialNo">
            <summary>
            Serial number.  This is stored with app settings, so we 'XmlIgnore'
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.dsOperator">
            <summary>
            Operator Data
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.deSampleMode">
            <summary>
            Sample mode
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.dsLotId">
            <summary>
            Lot number
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.diLotSize">
            <summary>
            Lot size
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.diSampleGroupId">
            <summary>
            Last Sub group no
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.diSampling">
            <summary>
            Tells us if sampling is active and which sampling number we are on
            </summary>
            <remarks>
            0 - No sampling taking place
            1-diSampleSize - Sampling active
            </remarks>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.diAuditSampleSize">
            <summary>
            Audit sample size
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.diStabilitySampleSize">
            <summary>
            Stability sample size
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.diDevelopmentSampleSize">
            <summary>
            Development sample size
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.diSampleSize">
            <summary>
            Current Sample size
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.dsEStopInput">
            <summary>
            Estop reference
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.dsSystemUsageFilepath">
            <summary>
            Usage File path
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.dsDBFilename">
            <summary>
            Database Filename
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.dsDBDataSource">
            <summary>
            Database Data Source
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.dbDBRecEnable">
            <summary>
            Database Record Enable
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.dbBoatReset">
            <summary>
            Boat reset
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.dtCurrentTime">
            <summary>
            Current Time Data
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.diNumLotParts">
            <summary>
            Number of parts run for this lot
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.diCrashCount">
            <summary>
            Number of time this application has crashed
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.ddLotUPH">
            <summary>
            UPH of the lot
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.diNumLotFails">
            <summary>
            Number of parts run for this lot
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.dbLogUsageEnable">
            <summary>
            Log usage enable
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.dbIsRunning">
            <summary>
            Is Running
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.deLoggingSeverity">
            <summary>
            Logging Severity
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.diWriteFileAlertStartSize">
            <summary>
            The size of pending queue when writing data file when we start alert
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.deProcessThreadPriority">
            <summary>
            Access to Process thread priority 
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.diThreadQuantum">
            <summary>
            2 0r 36
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.diNumBackups">
            <summary>
            Number of backup copies
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.ddProcessUsageDuration">
            <summary>
            Duration for the usage dump
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.dbProcessUsageTrigger">
            <summary>
            Trigger for the usage dump
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.ddMemoryUsage">
            <summary>
            Memory Usage
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.ddMemoryVirtual">
            <summary>
            Memory Virtual
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.ddMemoryPaged">
            <summary>
            Memory Paged
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.ddMemoryNonPaged">
            <summary>
            Memory Non Paged
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.ddMemoryPrivate">
            <summary>
            Memory Private
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.ddMemoryPeakUsage">
            <summary>
            Memory Peak usage
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.ddMemoryPeakVirtual">
            <summary>
            Memory Peak Virtual
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.ddMemoryPeakPaged">
            <summary>
            Memory Peak Paged
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.diDbBacklogBatchSize">
            <summary>
            Number of database transactions to update when processing backlog files
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.diDbBacklogWarningLevel">
            <summary>
            Warning level for excessive database transactions
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.ddLogStaleDuration">
            <summary>
            Number of days before Log dump deletions
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.ddEmailCheckFrequency">
            <summary>
            Period of time to wait between Email checks
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.dsExternalCmdFilepath">
            <summary>
            External command filepath
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.dsExternalCmdFilepath2">
            <summary>
            External command filepath
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.dsSmtpClient">
            <summary>
            Smtp Client
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.dsNotifierAddress">
            <summary>
            Address of notifier
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.deNotifierSeverity">
            <summary>
            Severity for notifier
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.ddNotifierBase">
            <summary>
            Severity for notifier
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.ddNotifierPeriod">
            <summary>
            Severity for notifier
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine.dsSuspensionDataFilePath">
            <summary>
            Path for suspension output data file
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.Initialize">
            <summary>
            Initialize this component
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.OnProcessUsageDumpEnd">
            <summary>
            This gets called when usageTimer expires
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.GetEStopDataObj">
            <summary>
            Get the Estop data object
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add a settings page to this class
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.PackInRecurse(MPT.USN.CommonLib.MPTBase)">
            <summary>
            Just read in from file
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.PackOutRecurse">
            <summary>
            Pack up collections before file save
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.Update">
            <summary>
            Update any data variables
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.StartApplication(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataString,MPT.USN.CommonLib.Data.DataString)">
            <summary>
            Run an external process
            </summary>
            <param name="caller"></param>
            <param name="dsApplicationName"></param>
            <param name="dsCmdLineArgs"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.LoadForm(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataString)">
            <summary>
            Load up a form
            </summary>
            <param name="caller"></param>
            <param name="dsFormName"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.ResetComplete(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Reset complete
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.GetNextValidation(System.String)">
            <summary>
            Return the next validation
            </summary>
            <param name="dataName"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.StartSampling(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Start the sampling
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.UpdateSuspendedGui(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Update all Suspended Gui
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine._diNumCyclesForThreadSnapShot">
            <summary>
            Number of U drive cycle that we take thread snapshot
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.DoUpdateSuspendedGui(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Worker call for UpdateSuspendedGui
            </summary>
            <param name="mc"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.MemoryMaintenance(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Force memory defragmentation
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.Alert(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataString)">
            <summary>
            Load up a form
            </summary>
            <param name="caller"></param>
            <param name="dsDescription"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.AlertContinue(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataString)">
            <summary>
            Alert and continue running
            </summary>
            <param name="caller"></param>
            <param name="dsDescription"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.BreakPoint(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataString)">
            <summary>
            Add an active breakpoint
            </summary>
            <param name="caller"></param>
            <param name="dsName"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.AllStop(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Stop all processes
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.AllPause(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Pause all processes
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.Message(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataString)">
            <summary>
            Load up a form
            </summary>
            <param name="caller"></param>
            <param name="dsMessage"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.Message2(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataString,MPT.USN.CommonLib.Data.DataString)">
            <summary>
            Message with caption
            </summary>
            <param name="caller"></param>
            <param name="dsMessage"></param>
            <param name="dsCaption"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.Delay(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
            Delay the process
            </summary>
            <param name="caller"></param>
            <param name="ddMSec"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.WriteLog(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataString,MPT.USN.CommonLib.Data.DataString)">
            <summary>
            Write to daily log
            </summary>
            <param name="caller"></param>
            <param name="dsSeverity"></param>
            <param name="dsMessage"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.ExpandMnemonicValue(System.String,System.String@)">
            <summary>
            Returns mnemonic's value given its name.
            Returns false if not found
            </summary>
            <param name="mnemonicName"></param>
            <param name="mnemonicVal"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.GetMnemonicFromValue(System.String,System.String@)">
            <summary>
            Locates the mnomic given a value.
            Returns false if not found
            </summary>
            <param name="mnemonicVal"></param>
            <param name="mnemonic"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.HasMnemonic(System.String)">
            <summary>
            Returns true if the given path has a mnemonic in the mnemonic table
            </summary>
            <param name="machinePath"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.AddMnemonic(System.String,System.String)">
            <summary>
            Appends a mnemonic to the list of mnemonics
            </summary>
            <param name="mnemonicName"></param>
            <param name="mnemonicPath"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.AddMnemonic(MPT.USN.CommonLib.Comp.MPTMnemonic)">
            <summary>
            Appends a mnemonic to the list of mnemonics
            </summary>
            <param name="mnemonic"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.RemoveMnemonic(System.String)">
            <summary>
            Remove a mnemonic from the list of mnemonics
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.ChangeMnemonicName(System.String,System.String,System.String)">
            <summary>
            Rename the mnemonic
            </summary>
            <param name="oldName"></param>
            <param name="newName"></param>
            <param name="fullPathName"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.ChangeMnemonicValue(System.String,System.String)">
            <summary>
            Change the value of a mnemonic
            </summary>
            <param name="name"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.Add(MPT.USN.CommonLib.MPTBase)">
            <summary>
            Appends an array element to an array.  Array grows by one
            </summary>
            <param name="newChild"></param>
            <returns>newChild if does not already exist, 
            otherwise returns reference to exisiting object</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.PostReadUpgrade(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Give the component an opportunity to change properties of dataType
            after file read and before registration takes place.
            For example: rename it
            </summary>
            <param name="dt"></param>
            <returns>The new dataType</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.Merge(MPT.USN.CommonLib.MPTBase,MPT.USN.CommonLib.MPTBase)">
            <summary>
            As long as we find matches, add any children that are not in original path
            </summary>
            <param name="origElement"></param>
            <param name="newElement"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompMachine._importedData">
            <summary>
            Handle VSM part setup for Adjust and rework
            </summary>
            <param name="vsm"></param>
            <param name="Rework"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.DoExternalInterfaces">
            <summary>
            Process all external interface command files
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.UpdateMCInfo">
            <summary>
             Update the memory info
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.DoExternalInterface(System.String)">
            <summary>
            Process all incoming and outgoing requests
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompMachine.GetMCLDataObj(System.String,System.String@)">
            <summary>
             Get the data object
            </summary>
            <param name="dataNameWithCast"></param>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.CompMachine.OnImportedNewData">
            <summary>
            Event called when we import new data
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompMachine.SerMnemonic">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompMachine.ProcessUsageDuration">
            <summary>
            Duration for the usage dump
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompMachine.ProcessUsageTrigger">
            <summary>
            Trigger for the usage dump
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompMachine.NumBackUps">
            <summary>
            Returns the number of backups to maintain
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompMachine.SystemUsageFilepath">
            <summary>
            Get/Set the system usage filepath
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompMachine.LogStaleDuration">
            <summary>
            Duration of life for a used dump folder
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompMachine.EmailCheckFrequency">
            <summary>
            Period of time to wait between Email checks
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompMachine.Sampling">
            <summary>
            Get/Set the Lot no
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompMachine.NextSample">
            <summary>
            Increments the sampling count.  Resets if finished
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompMachine.LotId">
            <summary>
            Get/Set the Lot no
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompMachine.SampleMode">
            <summary>
            Get/Set the sample mode
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompMachine.CurrentTime">
            <summary>
            Get/Set the current time
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompMachine.IsRunning">
            <summary>
            Flag to indicate if machine is running
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompMachine.CheckEStop">
            <summary>
            Flag to activate/supress EStop
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompMachine.CrashRecovery">
            <summary>
            Flag to return the crash recovery flag
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompMachine.InInitialReset">
            <summary>
            Flag to indicate Initial Reset
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompMachine.WriteFileAlertStartSize">
            <summary>
            Get the size of pending queue for data file writing where we start alerting
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompMachine.SmtpClient">
            <summary>
            Get/Set the SmtpClient
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompMachine.SuspensionDataFilePath">
            <summary>
            Get the suspension output data file path
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompMachine.DbBacklogBatchSize">
            <summary>
            Number of database transactions to update when processing backlog files
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompMachine.DbBacklogWarningLevel">
            <summary>
            Warning level for excessive database transactions
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompMachine.IsEStop">
            <summary>
            Get the EStop flag
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompMachine.CriticalTiming">
            <summary>
            Returns trueif timing is critical
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.CompHWBaseInsert">
            <summary>
            Class for CompHWBase insert
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompHWBaseInsert.#ctor(MPT.USN.CommonLib.Comp.CompHWBase)">
            <summary>
            Constructor
            </summary>
            <param name="compHWBase"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.CompHWBaseInsert.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompHWBaseInsert.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.CompHWBaseInsert.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.CompHWBaseInsert.ShowIt">
            <summary>
            Show the page based on privilege
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.PulseSystem.LaserGSIStub">
            <summary>
            Stub for GSI JK125-JK300
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.PulseSystem.PulseSystem">
            <summary>
            System class for pulsed lasers
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.PulseSystem.diMaxShape">
            <summary>
            Define shape setting
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.PulseSystem.diMaxSector">
            <summary>
            Define shape setting
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.PulseSystem.ddMaxSectorWidth">
            <summary>
            Maximum sector Time value in millisecond.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.PulseSystem.ddMaximumSectorHeight">
            <summary>
            Maximum sector Power value in % of Peak Power setting.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.PulseSystem.dbIsConnectToLaser">
            <summary>
            Access laser connection.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.PulseSystem.PulseSystem.dsLaserOperationMode">
            <summary>
            Access laser operation mode.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseSystem.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseSystem.#ctor(System.String)">
            <summary>
            Constructor used for first-time constructionMO
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseSystem.WriteShape(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.PulseSystem.PulseShape,MPT.USN.CommonLib.Comp.PulseSystem.PulseLaser)">
            <summary>
            Set single shape on laser as input shape setting.
            </summary>
            <param name="mc"></param>
            <param name="shape"></param>
            <param name="laser"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseSystem.ReadShape(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.PulseSystem.PulseShape@,MPT.USN.CommonLib.Comp.PulseSystem.PulseLaser)">
            <summary>
            Read shape setting from laser source.
            </summary>
            <param name="mc"></param>
            <param name="shape"></param>
            <param name="laser"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseSystem.SetActivePulseShape(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.PulseSystem.PulseLaser)">
            <summary>
            Set active shape number for dummy shot.
            </summary>
            <param name="mc"></param>
            <param name="pulselaser"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseSystem.UpdateStatus(MPT.USN.CommonLib.Comp.PulseSystem.PulseLaser)">
            <summary>
            UpdateStatus
            </summary>
            <param name="laser"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseSystem.ChangeShutterState(System.Boolean)">
            <summary>
            ChangeShutterState
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseSystem.UpdataeParameters(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.PulseSystem.PulseLaser)">
            <summary>
            UpdataeParameters
            </summary>
            <param name="mc"></param>
            <param name="pulseLaser"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseSystem.AddPulseLaser(System.Int32)">
            <summary>
            AddPulseLaser
            </summary>
            <param name="NumberOfLaser"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.PulseSystem.GetPulseLaser(System.Int32)">
            <summary>
            GetPulseLaser
            </summary>
            <param name="chanel"></param>
            <returns></returns>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.PulseSystem.PulseSystem.evReadShape">
            <summary>
            event for read single shape from laser.
            </summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.PulseSystem.PulseSystem.evSetActiveShape">
            <summary>
            event for set active shape for dummy shot..
            </summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.PulseSystem.PulseSystem.evWriteShape">
            <summary>
            event for write single shape to laser.
            </summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.PulseSystem.PulseSystem.evLaserUpdateParameters">
            <summary>
            
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.PulseSystem.PulseSystem.DelegateParmSMReadShape">
            <summary>
            Delegate for Get single shape from laser.
            </summary>
            <param name="mc"></param>
            <param name="shape"></param>
            <param name="laser"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.PulseSystem.PulseSystem.DelegateParmSMWriteShape">
            <summary>
            Delegate for write single shape to laser.
            </summary>
            <param name="mc"></param>
            <param name="shape"></param>
            <param name="laser"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.PulseSystem.PulseSystem.DelegateParmSMSetActiveShape">
            <summary>
            Delegate for set active shape number for dummy shot.
            </summary>
            <param name="mc"></param>
            <param name="pulselaser"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.PulseSystem.PulseSystem.DelegateParmSMUpdateLaserParameters">
            <summary>
            
            </summary>
            <param name="mc"></param>
            <param name="pulselaser"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.LaserGSIStub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.LaserGSIStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.PulseSystem.LaserMiyachiStub">
            <summary>
            Stub for Miyachi
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.LaserMiyachiStub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.PulseSystem.LaserMiyachiStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Input.CurrentInput">
            <summary>
            Summary description for Current Input.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.CurrentInput.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.CurrentInput.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
            <param name="channelPrefix"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.CurrentInput.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.CurrentInput.Initialize">
            <summary>
            Initialize this component
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibControllerSystemBasePage">
            <summary>
            Digital Meter controlled by com port.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibControllerSystemBasePage.tbControllerId">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibControllerSystemBasePage.#ctor(MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibControllerSystem)">
            <summary>
            Constructor
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.GpibControllerSystem.GpibControllerSystemBasePage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.AcquisitionSystem.NationalInstStub">
            <summary>
            Stub for NationalInstruments.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem">
            <summary>
            Summary description for MotionSystem.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.#ctor(System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.dsTriggerOutputChannel">
            <summary>
            Access to "Trigger Output Channel" data object
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.Trigger(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Set up a trigger
            </summary>
            <param name="mc"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.ClearBuffers(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Clean up including clearing buffers
            </summary>
            <param name="mc"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.SetupSinleAcqInput(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput)">
            <summary>
            Setup the Single Acquisition
            </summary>
            <param name="mc"></param>
            <param name="inputChannels"></param>
            <param name="sampleRate"></param>
            <param name="numSamples"></param>
            <param name="triggerChannel"></param>
            <param name="delaySec"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.SetupAcqInput(MPT.USN.CommonLib.SMMethodCall,System.Int32[],System.Double,System.Int32,System.String,System.Double)">
            <summary>
            Setup the Acquisition
            </summary>
            <param name="mc"></param>
            <param name="inputChannels"></param>
            <param name="sampleRate"></param>
            <param name="numSamples"></param>
            <param name="triggerChannel"></param>
            <param name="delaySec"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.ReadAcqInput(MPT.USN.CommonLib.SMMethodCall,System.Double[0:,0:]@)">
            <summary>
            Retrieve the acquisition results
            </summary>
            <param name="mc"></param>
            <param name="data"></param>
            <returns></returns>
            <remarks>Not to be called from Main Thread.
            This is because it is a synchrounous call (Because of 'out' parameter?).</remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.SetupSingleAcqOutput(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.IOSystem.Output.AcqOutput,System.Int32,System.Double,System.Double[])">
            <summary>
            Setup a single-channel acquisition output
            </summary>
            <param name="mc"></param>
            <param name="acqOut"></param>
            <param name="outputChannel"></param>
            <param name="sampleRate"></param>
            <param name="data"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.WriteSingleAcqOutput(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.IOSystem.Output.AcqOutput,System.Int32,System.Double,System.Double[])">
            <summary>
            Write channel output group
            </summary>
            <param name="mc"></param>
            <param name="acqOut"></param>
            <param name="outputChannel"></param>
            <param name="sampleRate"></param>
            <param name="data"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.WriteAcqOutputGroup(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Comp.IOSystem.Output.AcqOutputGroup,System.Double,System.Double[])">
            <summary>
            Write channel output group
            </summary>
            <param name="mc"></param>
            <param name="acqOut"></param>
            <param name="outputChannel"></param>
            <param name="sampleRate"></param>
            <param name="data"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.ConvertToPolar(System.Double[],System.Double[],System.Double[]@,System.Double[]@)">
            <summary>
            Convert real/imaginary pairings to Mag/Phase pairings
            </summary>
            <param name="real"></param>
            <param name="imag"></param>
            <param name="ResultMag"></param>
            <param name="ResultPhase"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.RealFft(System.Double[],System.Double[]@,System.Double[]@)">
            <summary>
            Obtain a Real fft of an array
            </summary>
            <param name="dataIn"></param>
            <param name="dataReal"></param>
            <param name="dataImag"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.EllipticalFilter(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double[],System.Double[]@)">
            <summary>
            Filter the data as Elliptic band
            </summary>
            <param name="order"></param>
            <param name="samplingRate"></param>
            <param name="lowerCutoff"></param>
            <param name="upperCutoff"></param>
            <param name="ripple"></param>
            <param name="attenuation"></param>
            <param name="waveform"></param>
            <param name="filteredwave"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.ButterworthBandpassFilter(MPT.USN.CommonLib.Comp.FilterSettings,System.Double[],System.Double[]@)">
            <summary>
            Filter the data as butterworth band pass
            </summary>
            <param name="settings"></param>
            <param name="waveform"></param>
            <param name="filteredwave"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.ButterworthLowpassFilter(MPT.USN.CommonLib.Comp.FilterSettings,System.Double[],System.Double[]@)">
            <summary>
            Filter the data as butterworth Low pass
            </summary>
            <param name="settings"></param>
            <param name="waveform"></param>
            <param name="filteredwave"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.ButterworthHighpassFilter(MPT.USN.CommonLib.Comp.FilterSettings,System.Double[],System.Double[]@)">
            <summary>
            Filter the data as butterworth High pass
            </summary>
            <param name="settings"></param>
            <param name="waveform"></param>
            <param name="filteredwave"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.ButterworthBandstopFilter(MPT.USN.CommonLib.Comp.FilterSettings,System.Double[],System.Double[]@)">
            <summary>
            Filter the data as butterworth band stop
            </summary>
            <param name="settings"></param>
            <param name="waveform"></param>
            <param name="filteredwave"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.PolyFit(System.Double[],System.Double[],System.Int32,System.Double[]@,System.Double@)">
            <summary>
            Produce a polynomial fit of an array of data
            </summary>
            <param name="inputX"></param>
            <param name="inputY"></param>
            <param name="order"></param>
            <param name="coefficients"></param>
            <param name="meanSquaredError"></param>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.evTrigger">
            <summary>Event for Trigger command</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.evClearBuffers">
            <summary>Event for ClearBuffers command</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.evSetupSingleAcqInput">
            <summary>Event for SetupAcqInput command</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.evSetupAcqInput">
            <summary>Event for SetupAcqInput command</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.evSetupAcqInputGroup">
            <summary>Event for SetupAcqInputGroup command</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.evReadAcqInput">
            <summary>Event for ReadAcqInput command</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.evSetupSingleAcqOutput">
            <summary>Event for SetupSingleAcqOutput command</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.evWriteSingleAcqOutput">
            <summary>Event for WriteSingleAcqOutput command</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.evSetupAcqOutputGroup">
            <summary>Event for SetupAcqOutputGroup command</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.evWriteAcqOutputGroup">
            <summary>Event for WriteAcqOutputGroup command</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.evConvertToPolar">
            <summary>Event for ConvertToPolar command</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.evRealFft">
            <summary>Event for RealFft command</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.evEllipticalFilter">
            <summary>Event for Elliptical filter</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.evButterworthBandpassFilter">
            <summary>Event for Butterworth Bandpass filter</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.evButterworthLowpassFilter">
            <summary>Event for Butterworth Lowpass filter</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.evButterworthHighpassFilter">
            <summary>Event for Butterworth Highpass filter</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.evButterworthBandstopFilter">
            <summary>Event for Butterworth Bandstop filter</summary>
        </member>
        <member name="E:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.evPolyFit">
            <summary>Event for PolyFit command</summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.TriggerOutputChannel">
            <summary>
            Get/Set the "dsTriggerOutputChannel" data parameter
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.DelegateReadAcqInput">
            <summary>Delegate for ReadAcqInput</summary>
            <param name="mc"></param>
            <param name="data"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.DelegateSetupSingleAcqInput">
            <summary>
            Delegate SetupSingle AcqInput
            </summary>
            <param name="mc"></param>
            <param name="input"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.DelegateSetupAcqInputGroup">
            <summary>
            Delegate SetupSingle AcqInputGroup
            </summary>
            <param name="mc"></param>
            <param name="input"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.DelegateSetupAcqInput">
            <summary>Delegate for SetupAcqInput</summary>
            <param name="mc"></param>
            <param name="inputChannels"></param>
            <param name="sampleRate"></param>
            <param name="numSamples"></param>
            <param name="triggerChannel"></param>
            <param name="delaySec"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.DelegateSetupSingleAcqOutput">
            <summary>Delegate for SetupSingleAcqOutput</summary>
            <param name="mc"></param>
            <param name="acqOut"></param>
            <param name="outputChannel"></param>
            <param name="sampleRate"></param>
            <param name="data"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.DelegateSetupAcqOutputGroup">
            <summary>Delegate for SetupAcqOutputGroup</summary>
            <param name="mc"></param>
            <param name="acqOut"></param>
            <param name="outputChannel"></param>
            <param name="sampleRate"></param>
            <param name="data"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.DelegateConvertToPolar">
            <summary>Delegate for ConvertToPolar</summary>
            <param name="real"></param>
            <param name="imag"></param>
            <param name="ResultMag"></param>
            <param name="ResultPhase"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.DelegateRealFft">
            <summary>Delegate for RealFft</summary>
            <param name="dataIn"></param>
            <param name="dataReal"></param>
            <param name="dataImag"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.DelegateEllipticFilter">
            <summary>Delegate for Elliptic Filter</summary>
            <param name="order"></param>
            <param name="samplingRate"></param>
            <param name="lowerCutoff"></param>
            <param name="upperCutoff"></param>
            <param name="ripple"></param>
            <param name="attenuation"></param>
            <param name="waveform"></param>
            <param name="filteredwave"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.DelegateButterworthBandpassFilter">
            <summary>Delegate for butterworth pass band Filter</summary>
            <param name="settings"></param>
            <param name="waveform"></param>
            <param name="filteredwave"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.DelegateButterworthLowpassFilter">
            <summary>Delegate for butterworth Low pass Filter</summary>
            <param name="settings"></param>
            <param name="waveform"></param>
            <param name="filteredwave"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.DelegateButterworthHighpassFilter">
            <summary>Delegate for butterworth High pass Filter</summary>
            <param name="settings"></param>
            <param name="waveform"></param>
            <param name="filteredwave"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.DelegateButterworthBandstopFilter">
            <summary>Delegate for butterworth band stop Filter</summary>
            <param name="settings"></param>
            <param name="waveform"></param>
            <param name="filteredwave"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.AcquisitionSystem.AcquisitionSystem.DelegatePolyFit">
            <summary>Delegate for PolyFit</summary>
            <param name="inputX"></param>
            <param name="inputY"></param>
            <param name="order"></param>
            <param name="coefficients"></param>
            <param name="meanSquaredError"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.AcquisitionSystem.NationalInstStub.#ctor">
            <summary>
            Constructor for serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.AcquisitionSystem.NationalInstStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.AcquisitionSystem.WaveC_NIStub">
            <summary>
            Stub for WaveC_NI.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.AcquisitionSystem.WaveC_NIStub.#ctor">
            <summary>
            Constructor for serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.AcquisitionSystem.WaveC_NIStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.AcquisitionSystem.MeasurementCompStub">
            <summary>
            Stub for Measurement Comp
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.AcquisitionSystem.MeasurementCompStub.#ctor">
            <summary>
            Constructor for serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.AcquisitionSystem.MeasurementCompStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.AcquisitionSystem.NI9237Stub">
            <summary>
            Stubs for NI9237
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.AcquisitionSystem.NI9237Stub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.AcquisitionSystem.NI9237Stub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.ThreadSnapshot">
            <summary>
            Class to monitor thread usage
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.ThreadSnapshot.GetThreadWin32Priority(System.IntPtr)">
            <summary>
            Get the thread priority
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.ThreadSnapshot.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.ThreadSnapshot.AddCurrentThreadName(System.String)">
            <summary>
            Add a new thread item to the list or rename exisiting item in list
            </summary>
            <param name="name">The name to give this thread</param>
        </member>
        <member name="M:MPT.USN.CommonLib.ThreadSnapshot.AddCurrentThreadName">
            <summary>
            Add a new thread item to the list or rename exisiting item in list
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.ThreadSnapshot.Begin">
            <summary>
            Start the snapshot
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.ThreadSnapshot.Package">
            <summary>
            Packages snapshot results
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.ThreadSnapshot.Report(System.String,System.Double)">
            <summary>
            Report the results of the snapshot
            </summary>
            <param name="preMessage"></param>
            <param name="secSpan">Duration of time of report</param>
            <returns></returns>
        </member>
        <member name="T:MPT.USN.CommonLib.ThreadSnapshot.Win32ThreadPriorities">
            <summary>
            Priorities reported by GetThreadWin32PriorityEx
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.ThreadSnapshot.Win32ThreadPriorities.IDLE">
            <summary>Idle</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.ThreadSnapshot.Win32ThreadPriorities.LOWEST">
            <summary>LOWEST</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.ThreadSnapshot.Win32ThreadPriorities.BELOW_NORMAL">
            <summary>BELOW_NORMAL</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.ThreadSnapshot.Win32ThreadPriorities.NORMAL">
            <summary>NORMAL</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.ThreadSnapshot.Win32ThreadPriorities.ABOVE_NORMAL">
            <summary>ABOVE_NORMAL</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.ThreadSnapshot.Win32ThreadPriorities.HIGHEST">
            <summary>HIGHEST</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.ThreadSnapshot.Win32ThreadPriorities.TIME_CRITICAL">
            <summary>TIME_CRITICAL</summary>
        </member>
        <member name="M:MPT.USN.CommonLib.ThreadSnapshot.ThreadSSInfo.CompareTo(System.Object)">
            <summary>
            Implementation of IComparable
            </summary>
            <param name="otherObj"></param>
            <returns></returns>
        </member>
        <member name="T:MPT.USN.CommonLib.ThreadItem">
            <summary>
            Class to contain thread information
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.ThreadItem.Name">
            <summary>
            Name for the thread
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.ThreadItem.#ctor">
            <summary>
            Used for serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.ThreadItem.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.ThreadItem.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="managedId"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.Validations.ValidationPage">
            <summary>
            Class for validation property page
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidationPage.#ctor(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Constructor
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidationPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.Validations.ValidateMinMaxWithMargin">
            <summary>
            Class to validate a double entry
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.Validations.ValidateMinMaxWithMargin.MinMargin">
            <summary>Minimum allowed</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.Validations.ValidateMinMaxWithMargin.MaxMargin">
            <summary>Maximum allowed</summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidateMinMaxWithMargin.#ctor">
            <summary>
            Parameterless constructor for serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidateMinMaxWithMargin.CopyDataFrom(MPT.USN.CommonLib.Data.DBClass)">
            <summary>
            Copy the data from another validation object
            </summary>
            <param name="from"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidateMinMaxWithMargin.Clone">
            <summary>
            Copy data
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidateMinMaxWithMargin.bValidateRaw(MPT.USN.CommonLib.Data.DataType,System.Object)">
            <summary>
            Validate the double entry.  True if inside max/min range.
            </summary>
            <param name="dt"></param>
            <param name="oVal"></param>
            <returns>bool</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.Validations.ValidateMinMaxWithMargin.ValidateRaw(MPT.USN.CommonLib.Data.DataType,System.Object)">
            <summary>
            Validate the double entry
            </summary>
            <param name="dt"></param>
            <param name="oVal"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrderYBinPage">
            <summary>
            Class for thirdOrder definitions
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrderYBinPage.#ctor">
            <summary>
            Default Constructor for designer view
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrderYBinPage.#ctor(MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrderYBin)">
            <summary>
            Constructor
            </summary>
            <param name="thirdOrderYBin"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrderYBinPage.OnRefresh">
            <summary>
            Used to notify this page of an update required
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrderYBinPage.OnPageLoad">
            <summary>
            Set up for the first time with valid window handle and parental windows established
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrderYBinPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrderYBinPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.ThirdOrderYBinPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.IOGroupPage">
            <summary>
            Summary description for IOGroupPage.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.IOGroupPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOGroupPage.#ctor(MPT.USN.CommonLib.Comp.IOSystem.IOGroup)">
            <summary>
            Constructor
            </summary>
            <param name="ioGroup"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOGroupPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.IOGroupPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Input.StringInput">
            <summary>
            Summary description for StringInput.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.StringInput.dsValue">
            <summary>
            Access to the "Param value"
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.StringInput.dsManagedValue">
            <summary>
            Access to the "Managed Param value"
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.StringInput.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.StringInput.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
            <param name="channelPrefix"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.StringInput.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.StringInput.Initialize">
            <summary>
            Initialize this component
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.StringInput.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add property pages
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.StringInput.Trigger(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
             Trigger the input
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.StringInput.Value">
            <summary>
            Access to the Signal data value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.StringInput.ManagedValue">
            <summary>
            Access to the Managed Signal data value
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Process.TreeListViewSMItemComparer">
            <summary>
            Comparer for TreeListViewItem
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.TreeListViewSMItemComparer.#ctor">
            <summary>
            Create a new instance of  Comparer
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.TreeListViewSMItemComparer.#ctor(System.Windows.Forms.SortOrder)">
            <summary>
            Create a new instance of  Comparer
            </summary>
            <param name="order"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.TreeListViewSMItemComparer.#ctor(System.Windows.Forms.SortOrder,System.Int32)">
            <summary>
            Create a new instance of  Comparer
            </summary>
            <param name="order"></param>
            <param name="column"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.TreeListViewSMItemComparer.Compare(System.Object,System.Object)">
            <summary>
            Compare two TreeListViewItems
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.TreeListViewSMItemComparer.SortOrder">
            <summary>
            Sort order
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.TreeListViewSMItemComparer.Column">
            <summary>
            Column for the comparison
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Process.SMAction">
            <summary>
            Summary description for SMAction.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.SMAction.val">
            <summary>
            Statement of the action
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.SMAction.enabled">
            <summary>
            If not enabled, it won't get called
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.SMAction.treeItem">
            <summary>
            Tree item displayed
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.SMAction.Owner">
            <summary>
            The state owner 
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.SMAction.args">
            <summary>
            Store references of Args for this SMAction
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.SMAction.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.SMAction.#ctor(MPT.USN.CommonLib.Process.ProcessBase,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="procOwner"></param>
            <param name="initialVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.SMAction.PackInRecurse(MPT.USN.CommonLib.Process.ProcessBase)">
            <summary>
            After file read
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.SMAction.Initialize">
            <summary>
            Initialize this SMAction class
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.SMAction.Removing">
            <summary>
            This action is being removed from the state
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.SMAction.Invoke">
            <summary>
            Call the action
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.SMAction.Completed(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Show action to be completed
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.SMAction.GetArgContents(MPT.USN.CommonLib.Process.SMAction)">
            <summary>
            Given the action object, extract the breakpoint name
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.SMAction.CompareTo(System.Object)">
            <summary>
            Implementation of IComparable
            </summary>
            <param name="otherObj"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.SMAction.Clone(System.Type)">
            <summary>
            Clone Action
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.SMAction.Color">
            <summary>
            Position with repect to
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.SMAction.SerColor">
            <summary>
            Serialize the defined color
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.SMAction.Mc">
            <summary>
            Method call object associated with this action (if any)
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.SMAction.IsCompleted">
            <summary>
            Return whether or not this action is completed
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.SMAction.ActionUsageItem">
            <summary>
            The state owner 
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.SMFormBase">
            <summary>
            Base class for State Machine (Process) forms
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.SMFormBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.SMFormBase.dataMgr">
            <summary>
            Easy access to data manager
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.SMFormBase.CompMgr">
            <summary>
            Easy access to component manager
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.DataInt">
            <summary>
            Summary description for DataInt.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataInt.GetVal(MPT.USN.CommonLib.Enums.UnitTypes)">
            <summary>
            Return the value as an Object
            </summary>
            <param name="ut"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataInt.#ctor">
            <summary>
            Constructor for Xml serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataInt.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataInt.#ctor(System.String,System.Int32)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
            <param name="iVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataInt.#ctor(System.String,System.Int32,MPT.USN.CommonLib.Enums.UnitTypes)">
            <summary>
            Constructor for Distance setting
            </summary>
            <param name="name"></param>
            <param name="iVal"></param>
            <param name="unitType"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataInt.#ctor(System.String,System.Int32,MPT.USN.CommonLib.Enums.UnitTypes,MPT.USN.CommonLib.Enums.RateType,MPT.USN.CommonLib.Enums.UnitTypes)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
            <param name="iVal"></param>
            <param name="unitType"></param>
            <param name="rate"></param>
            <param name="unitTypeRespect"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataInt.CopyDataFrom(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Copy data from another  DataInt object
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataInt.SetVal(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Set the value from the given data type
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataInt.SetDefault">
            <summary>
            Set value to its default
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataInt.ValToDisplayString">
            <summary>
            Convert the value to string in proper units
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataInt.ConvertValidate(System.Object)">
            <summary>
            Validate basics for this type
            </summary>
            <param name="oVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataInt.ValToString">
            <summary>
            Convert the value to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataInt.ValToString(System.String)">
            <summary>
            Convert the value to a formatted string
            </summary>
            <param name="fmt"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataInt.ValToDefaultString">
            <summary>
            Convert the default value to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataInt.ValFromString(System.String)">
            <summary>
            Set value from string
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataInt.Increment">
            <summary>
            Increment by one
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataInt.Decrement">
            <summary>
            Decrement by one
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataInt.IsTrue(System.Object)">
            <summary>
            Returns true if Val is true
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataInt.ObjRawVal">
            <summary>
            Get/Save the value from an unknown object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataInt.RawVal">
            <summary>
            Get/Set the raw value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataInt.Val">
            <summary>
            Get/Set the value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataInt.Default">
            <summary>
            Get/Set the default
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataInt.SerDefault">
            <summary>
            Serialize the value
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Serializer.MclXmlSerializer">
            <summary>
            Class to manage XML serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Serializer.MclXmlSerializer.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="tyRoot"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Serializer.MclXmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides)">
            <summary>
            Constructor
            </summary>
            <param name="tyRoot"></param>
            <param name="overrides"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Serializer.MclXmlSerializer.Setup(System.Type,System.Xml.Serialization.XmlAttributeOverrides)">
            <summary>
            Constructor
            </summary>
            <param name="tyRoot"></param>
            <param name="overrides"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Serializer.MclXmlSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serialize the object
            </summary>
            <param name="tw"></param>
            <param name="obj"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Serializer.MclXmlSerializer.Deserialize(System.IO.FileStream)">
            <summary>
            Deserialize the object
            </summary>
            <param name="fs"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Serializer.MclXmlSerializer.GetTypeFromMemberInfo(System.Reflection.MemberInfo)">
            <summary>
            Get the Type according the the MemberInfo
            Must be either PropertyInfo ot FieldInfo
            </summary>
            <param name="mi"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Serializer.MclXmlSerializer.ParseForTypedValue(System.String,System.Type)">
            <summary>
            Parses the string to obtain the value according to type
            </summary>
            <param name="valString"></param>
            <param name="ty"></param>
            <returns></returns>
        </member>
        <member name="T:MPT.USN.CommonLib.Serializer.ClassMapping">
            <summary>
            Manages all the member information for the class
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Serializer.ClassMapping.ty">
            <summary>
            The type for the class
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Serializer.ClassMapping.fields">
            <summary>
            Order in which to serialize.
            Created according to finding of fields with reflection
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Serializer.ClassMapping.xmlElementNames">
            <summary>
            Used to find the name for deserialize
            These are member names as they are found when reading the xml file
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Serializer.ClassMapping.xmlAttrNames">
            <summary>
            Used to find the name for deserialize
            These are member names as they are found when reading the xml file
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Serializer.ClassMapping.#ctor(System.Type,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="ty"></param>
            <param name="xmlClassName"></param>
            <param name="xmlNameSpace"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Serializer.ClassMapping.AddAttribute(System.Xml.Serialization.XmlAttributeAttribute,System.Type,MPT.USN.CommonLib.Serializer.ClassField)">
            <summary>
            Add an Attribite to this class
            </summary>
            <param name="attr"></param>
            <param name="xmlElementType"></param>
            <param name="cf"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Serializer.ClassMapping.AddField(MPT.USN.CommonLib.Serializer.ClassField)">
            <summary>
            Add serializing field to this class
            </summary>
            <param name="cf"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Serializer.ClassField.SetValue(System.Object,System.Object)">
            <summary>
            Set the reference value
            </summary>
            <param name="objClass"></param>
            <param name="objRef"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Serializer.AttrNameInfo.SetValue(System.Object,System.Object)">
            <summary>
            Set the reference value
            </summary>
            <param name="objClass"></param>
            <param name="objRef"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Serializer.AttrNameInfo.SetXmlValue(System.Object,System.String)">
            <summary>
            Set the value found in the XmlText
            </summary>
            <param name="objClass"></param>
            <param name="val"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Serializer.FieldNameInfo.SetValue(System.Object,System.Object)">
            <summary>
            Set the reference value
            </summary>
            <param name="objClass"></param>
            <param name="objRef"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Serializer.FieldNameInfo.SetXmlValue(System.Object,System.Xml.XmlNode)">
            <summary>
            Set the value found in the XmlText
            </summary>
            <param name="objClass"></param>
            <param name="xmlNode"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.NamespaceDoc">
            <summary>
            Welcome to CommonLib<para/>
            <para/>
            <para/>
            <list type="table"> 
            <listheader><term>Topics...</term></listheader>
            <item><term><see cref="T:MPT.USN.CommonLib.Comp.SystemBase">How to create hardware drivers.</see></term></item>
            <item><term><see cref="T:MPT.USN.CommonLib.Data.DataType">How to use MCL Data Types</see></term></item>
            <item><term><see cref="T:MPT.USN.CommonLib.SMMethodCall">Process (State Machine) selectable methods</see></term></item>
            <item><term><see cref="T:MPT.USN.CommonLib.SMCondition">Process (State Machine) selectable boolean condition properties</see></term></item>
            <item><term><see cref="T:MPT.USN.CommonLib.Comp.ComponentBase">Component basics</see></term></item>
            <item><term><see cref="T:MPT.USN.CommonLib.Comp.CompWatch">Data watching and logging</see></term></item>
            <item><term><see cref="T:MPT.USN.CommonLib.Data.DBDataProps">What is the Data Prop List?</see></term></item>
            <item><term><see cref="M:MPT.USN.CommonLib.Comp.ComponentMgr.ThreadProc">How CommonLib uses threads</see></term></item>
            <item><term><see cref="P:MPT.USN.CommonLib.Comp.PageBase.ShowIt">How to hide a page from production OPERATOR</see></term></item>
            <item><term><see cref="F:MPT.USN.CommonLib.MainForm.appVersion">Versioning: The meaning of Major, Minor, Build number, etc</see></term></item>
            </list>
            <para/>
            <para/>
            <b>CommonLib</b> is the common library that is to be shared by all MPT applications.  
            It contains reusable Forms, controls, data management, algorithms. 
            Rule of thumb: If the component, utility, control is likely to be reused by another 
            application, we move it to CommonLib so other applications can use it.  This will dramatically 
            reduce development time.  The other attribute of CommonLib is that all references, methods, and 
            properties are generic in nature.  There are no third-party references or direct calls in ComnmonLib.  
            For example, when a state machine asks an axis to move, it may use the generic <c>Axis.MoveAbs()</c>.  
            The Axis class is part of CommonLib, so it is generic in nature.  The <c>Axis.MoveAbs()</c> does not know 
            if the call will end up executing a Newport, Aerotech, or other third-party system.
            <para/>
            The main <b>application</b> should reference only CommonLib.  All calls made in the application will be to 
            the generic calls of CommonLib.  The combination of application and CommonLib alone is guaranteed to 
            be runable (ideal for desktop usage.  See Desktop operation below).
            <para/>
            There are also <b>MPT third-party dlls</b> (or assemblies). Sometimes we call them third-party driver.  
            These dlls include a class that is derived from SystemBase class.  These assemblies are dynamically 
            linked to CommonLib, resolving the SystemBase derivation.  These assemblies are the only place we make 
            third-party calls.  In theory, we should be able to switch a SystemBase derivation to another third-party system.  
            For example, If we were using Newport drives on a machine, and we switched to Aerotech, we only need to make a 
            slight change to the Machine.Xml file and the application should be able to run using Aerotech without making a 
            single code change!  This is made possible because all application and CommonLib commands, calls, and references 
            are generic.
            <para/>
            Here are some more advantages to this setup:
            <para/>
            <b>Desktop operation</b>
            <para/>
            If a MPT third-party assembly is not present, CommonLib automatically puts that system component into 
            Simulate mode.  The application still runs because the attempt to link to the third-party assembly is 
            dynamic (it links instead to a Stub class).  This is ideal for a desktop user.  We do not want a desktop 
            user to rely on having all third-party software installed on his machine in order to run a desktop version.  
            So for a desktop installation, we simply remove the MPT third-part assemblies.  
            <para/>
            The 'Desktop Debug' is for the developer on his desktop and simply builds only the application and CommonLib.  
            Since the link to MPT third-party assemblies is dynamic, it will be necessary to ‘Clean Solution’ on 
            ‘Release’ or ‘Debug’ configurations before he switches to Desktop Debug.  Otherwise the application could link to 
            a lingering MPT third-party assembly and try to initialize hardware that isn’t there.
            <para/>
            <para/><b>Third party GUI VS CommonLib GUI</b>
            <para/>
            ThirdParty specific GUI should not be genericized and added to CommonLib. However, our goal is to identify all 
            generic elements of the system and have them available in CommonLib.  For example, 
            <c>CommonLib.Comp.VisionSystem.CameraPage</c> tries to be generic.  You can see that the display 
            window is of type <c>System.Windows.Forms.Panel</c>.  Not a Cognex type.  With cognex installed, the page 
            can acquire, display images in the Panel, etc.  If Cognex is not installed, the page will still be displayed 
            for the Desktop user.  The Desktop user would be able to see the current settings (Camera file, Score, Result X, etc.) 
            just as if he were on a real machine. The desktop user can also click ‘Acquire’ and simulation will return 
            simulated values (The display panel will draw the text <c>“Camera window: '{0}'\n(Simulated)"</c>. See the 
            generic call CommonLib.Comp.VisionSystem.VisionSystem.CreateCameraWindow()). 
            <para/>
            This concept makes it useful for developing, testing, evaluating configurations offline.  If the desktop user 
            is trying to analyze a problem, he may as well have as much GUI and access to settings as possible.
            </summary>
            <remarks>Used by NDoc to generate namespace summary</remarks>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.NamespaceDoc">
            <summary>
            Namespace for all Data related objects and utilities
            </summary>
            <remarks>Used by NDoc to generate namespace summary</remarks>
        </member>
        <member name="T:MPT.USN.CommonLib.Help.NamespaceDoc">
            <summary>
            Namespace for all Help related gui
            </summary>
            <remarks>Used by NDoc to generate namespace summary</remarks>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.NamespaceDoc">
            <summary>
            Namespace for all System based classes
            </summary>
            <remarks>Used by NDoc to generate namespace summary</remarks>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.NamespaceDoc">
            <summary>
            Namespace for all IO system related classes
            </summary>
            <remarks>Used by NDoc to generate namespace summary</remarks>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.NamespaceDoc">
            <summary>
            Namespace for all motion system related classes
            </summary>
            <remarks>Used by NDoc to generate namespace summary</remarks>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.NamespaceDoc">
            <summary>
            Namespace for all Vision system related classes
            </summary>
            <remarks>Used by NDoc to generate namespace summary</remarks>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.TransferFunctions.ManualLinearTransform">
            <summary>
            Class for manually linear transform. Use for common correllation, diff.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.ManualLinearTransform.ddSlope">
            <summary>
            Slope
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.TransferFunctions.ManualLinearTransform.ddIntercept">
            <summary>
            Intercept
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.ManualLinearTransform.#ctor">
            <summary>
            Constructor for xml serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.ManualLinearTransform.#ctor(MPT.USN.CommonLib.Data.DataDouble,MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
            Constructor
            </summary>
            <param name="input"></param>
            <param name="output"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.ManualLinearTransform.#ctor(MPT.USN.CommonLib.Data.DataDouble,MPT.USN.CommonLib.Data.DataDouble,System.Drawing.Color)">
            <summary>
            Constructor
            </summary>
            <param name="input"></param>
            <param name="output"></param>
            <param name="settingControlBackColor"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.ManualLinearTransform.RebindInputOutput(MPT.USN.CommonLib.Data.DataDouble,MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
            Rebind input to output
            </summary>
            <param name="input"></param>
            <param name="output"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.TransferFunctions.ManualLinearTransform.System#ICloneable#Clone">
            <summary>
            Clone method
            </summary>
            <returns></returns>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.ManualLinearTransform.Slope">
            <summary>
            Get/Set slope
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.ManualLinearTransform.Intercept">
            <summary>
            Get/Set intercept
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.ManualLinearTransform.SettingControlBackColor">
            <summary>
            Get the back color for display in setting control
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.ManualLinearTransform.InputName">
            <summary>
            Get input name
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.TransferFunctions.ManualLinearTransform.OutputName">
            <summary>
            Get output name
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.CognexVisionStub">
            <summary>
            Stub class for CognexVision
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CognexVisionStub.#ctor">
            <summary>
            Default constructor for Xml serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CognexVisionStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2Stub">
            <summary>
            Stub class for CameraV2
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2">
            <summary>
            Camera version 2. 3rd camera will inherit from this
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.diCameraId">
            <summary>
            Camera ID
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.dsCameraDescription">
            <summary>
            Access to the "Camera Description" data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.dsVideoFormat">
            <summary>
            The video format
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.ddExposure">
            <summary>
            Exposure
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.ddContrast">
            <summary>
            Contrast
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.ddBrightness">
            <summary>
            Brightness
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2._dsPathForSimulatedImages">
            <summary>
            Path for simulation images
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.ddAcquireTime">
            <summary>
            Image acquisition time
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.dbEnableLiveMode">
            <summary>
            Enable Live Mode
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.dsImgSavePath">
            <summary>
            Image Save Path
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.dbEnableImgSave">
            <summary>
            Image save path enable
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.#ctor">
            <summary>
            Construct for xml serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.AddCustomBoolOutput(MPT.USN.CommonLib.Comp.IOSystem.Output.BoolOutput)">
            <summary>
            Add custom bool output. These outputs will be used in property pages
            </summary>
            <param name="output"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.Initialize">
            <summary>
            Initialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add property page
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.ToggleLive(MPT.USN.CommonLib.Comp.VisionSystem.CameraWindow)">
            <summary>
            Toggle Live for a window
            </summary>
            <param name="camWindow"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.StartLive(MPT.USN.CommonLib.Comp.VisionSystem.CameraWindow)">
            <summary>
            Start live for a window
            </summary>
            <param name="camWindow"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.EndLive(MPT.USN.CommonLib.Comp.VisionSystem.CameraWindow)">
            <summary>
            End live for a window
            </summary>
            <param name="camWindow"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.AcquireLive(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Acquire for live image
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.Acquire(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Acquire image
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.FreeImageRecurse(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Free input image recursively for all vision job under this camera
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.AcquireImage">
            <summary>
            Acquire image
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.AcquireImageLive">
            <summary>
            Acquire image Live
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.AcquireBitmapImage">
            <summary>
            Acquire image and return the bitmap
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.RegisterCameraWindow(MPT.USN.CommonLib.Comp.VisionSystem.CameraWindow)">
            <summary>
            Register a camera window
            </summary>
            <param name="camWindow"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.CreateDisplayStatusBar(MPT.USN.CommonLib.Comp.VisionSystem.CameraWindow,System.Windows.Forms.Control)">
            <summary>
            Create display status bar
            </summary>
            <param name="camWindow"></param>
            <param name="statusBarFrame"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.OnBrightnessChanged(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Handling brightness change
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.OnContrastChanged(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Handling constrast change
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.OnExposureChanged(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Handling exposure change
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.OnCameraIDChanged(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Handling camera id change
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.OnAdvanceSetting(MPT.USN.CommonLib.Comp.VisionSystem.CameraWindow)">
            <summary>
            Handling advance setting
            </summary>
            <param name="camWindow"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.OnCameraMoreInfo">
            <summary>
            Handling more info requisition
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.CameraId">
            <summary>
            Get/Set Camera ID
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.CameraDescription">
            <summary>
            Get/Set Camera description
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.VideoFormat">
            <summary>
            Get/Set the video format
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.Contrast">
            <summary>
            Get/Set contrast in scale
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.Brightness">
            <summary>
            Get/set brightness in scale
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.PathForSimulatedImages">
            <summary>
            Get the path for simulation images in DataString (for continuous keeping the reference)
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.AcquireTime">
            <summary>
            Get/Set acquisition time
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.ExpectedWidthInPixel">
            <summary>
            Get the expected width in pixel
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.ExpectedHeightInPixel">
            <summary>
            Get the expected height in pixel
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.ForceExpectedImageSize">
            <summary>
            Get whether should force to use expected image size
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.EnableLiveMode">
            <summary>
            Access to Live Mode
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.ListCameraWindows">
            <summary>
            Get the list of registered camera windows
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2.ListCustomBoolOutput">
            <summary>
            Get the list of custom Bool Output
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2Stub.#ctor">
            <summary>
            Constructor for xml serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CameraV2Stub.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.VisionJobStub">
            <summary>
            Stub for VisionJob
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob">
            <summary>
            Class serve as a base for any vision job
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.dsVisionFile">
            <summary>
            Path to Vision File
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.ddResultTime">
            <summary>
            Result time
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.dbResultSuccess">
            <summary>
            Result success
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob._dbEnableSaveFailImages">
            <summary>
            Enable saving fail images
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob._dbEnableSaveGoodImages">
            <summary>
            Enable saving good images
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob._dsImageSavePath">
            <summary>
            Absolute path to save fail images
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.#ctor">
            <summary>
            Constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.#ctor(System.String)">
            <summary>
            Constructor for first time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.Initialize">
            <summary>
            Initialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add property pages
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.RunJob(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Run Job
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.RunJobWithImageID(MPT.USN.CommonLib.SMMethodCall,MPT.USN.CommonLib.Data.DataString)">
            <summary>
            Run Job, passing image ID (suspension ID)
            </summary>
            <param name="caller"></param>
            <param name="dsImageID">Image ID or suspension ID</param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.DefineListRunParams(System.Collections.Generic.List{MPT.USN.CommonLib.Data.DataType})">
            <summary>
            Make list of run params as data type.
            </summary>
            <param name="listData"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.DefineListResultData(System.Collections.Generic.List{MPT.USN.CommonLib.Data.DataType})">
            <summary>
            Make list of result data as data type (data double)
            </summary>
            <param name="listData"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.DefineListAttributeData(System.Collections.Generic.List{MPT.USN.CommonLib.Data.DataType})">
            <summary>
            Make list of attribute data as data type
            </summary>
            <param name="listData"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.DefineListOptions(System.Collections.Generic.List{MPT.USN.CommonLib.Data.DataType})">
            <summary>
            Make list of options as data type
            </summary>
            <param name="listData"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.DefineListDataForMeanSigma(System.Collections.Generic.List{MPT.USN.CommonLib.Data.DataDouble})">
            <summary>
            Define the list of data for finding mean and sigma when doing multiple run
            </summary>
            <param name="listData"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.PostRunProcessing">
            <summary>
            Making additional result logic after run
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.EditJob">
            <summary>
            Edit job
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.SaveCurrentInputImage(System.String)">
            <summary>
            Save current input image to file
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.AssignInputImageObject(System.Object)">
            <summary>
            Assign input image for this job
            </summary>
            <param name="imageObject"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.FreeInputImageObject">
            <summary>
            Free input image object (to force new image acquisition)
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.FreeInputImageObjectRecurse">
            <summary>
            Free input image object recursively for all vision jobs in the tree
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.BuildPrimaryDataLists">
            <summary>
            Rebuild primary data lists (this will eliminate all third party data)
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.RebuildPrimaryDataLists">
            <summary>
            Rebuild the primary data list
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.DoTF(MPT.USN.CommonLib.Data.DataDouble,MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
            Either calculate the output using the transfer function, or simply copy the value
            </summary>
            <param name="dtTo"></param>
            <param name="dtFrom"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.CreateDefaultTFIfNeeded(MPT.USN.CommonLib.Data.DataDouble,MPT.USN.CommonLib.Data.DataDouble)">
            <summary>
            Create default TF if necessary
            </summary>
            <param name="ddInput"></param>
            <param name="ddOutput"></param>
            <remarks>This serve the use of transfer function. If all you need is a place to enter slope and intercept, use the RegisterManualLinearTransform</remarks>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.VisionFile">
            <summary>
            Get/Set the Vision file path
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.ResultTime">
            <summary>
            Get/Set the ResultTime data value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.ResultSuccess">
            <summary>
            Get/Set the ResultSuccess data value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.SimpleDisplay">
            <summary>
            Get/Set whether to use simple display
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.RunTimeoutInMillisecond">
            <summary>
            Get the run timeout in millisecond
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.EnableSaveFailImages">
            <summary>
            Get whether enable saving fail images
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.EnableSaveGoodImages">
            <summary>
            Get whether enable saving good images
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.ImageSavePath">
            <summary>
            Get the absolute path for saving fail images
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.ListRunParams">
            <summary>
            Get List of Run Params. This list maintain fast references to all run params of this job.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.ListResultData">
            <summary>
            Get List of Result Data. This list maintain fast references to all numerical data output of this job.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.ListAttributeData">
            <summary>
            Get List of Attribute Data. This list maintain fast references to all attribute data of this job.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.ListOptions">
            <summary>
            Get list of options. One usage of option is to enable/disable a vision tool
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.ListDataForMeanSigma">
            <summary>
            Get the list of interesting data in finding mean and sigma
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.ThirdPartyJob">
            <summary>
            Get the third party part of this vision job
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.RefCamera">
            <summary>
            Get the reference to the camera
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.VisionJob.ParentVisionJob">
            <summary>
            Get the reference to vision job
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionJobStub.#ctor">
            <summary>
            Default constructor for serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionJobStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.WebCameraStub">
            <summary>
            Stub class for WebCamera
            </summary>
            <remarks>Added by recommendation of Kasem</remarks>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.WebCameraStub.#ctor">
            <summary>
            Default constructor for Xml serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.WebCameraStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.CogUSBCamStub">
            <summary>
            Stub for CogUSBCam
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CogUSBCamStub.#ctor">
            <summary>
            Default constructor for serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CogUSBCamStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.CogGigEVisionStub">
            <summary>
            Stub for CogGigECam
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CogGigEVisionStub.#ctor">
            <summary>
            Default constructor for serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CogGigEVisionStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.CheckerboardCalibrationJob">
            <summary>
            CheckerboardCalibrationJob Job
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CheckerboardCalibrationJob.#ctor">
            <summary>
            Constructor for xml serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.CheckerboardCalibrationJob.#ctor(System.String)">
            <summary>
            First time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.NPointCalibrationJob">
            <summary>
            NPointCalibrationJob Job
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.NPointCalibrationJob.#ctor">
            <summary>
            Constructor for xml serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.NPointCalibrationJob.#ctor(System.String)">
            <summary>
            First time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.FixtureJob">
            <summary>
            FixtureJob Job
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.FixtureJob.#ctor">
            <summary>
            Constructor for xml serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.FixtureJob.#ctor(System.String)">
            <summary>
            First time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.PatternSearchJob">
            <summary>
            PatternSearch Job
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.PatternSearchJob.#ctor">
            <summary>
            Constructor for xml serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.PatternSearchJob.#ctor(System.String)">
            <summary>
            First time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.VisionCorrectionJob">
            <summary>
            Vision Correction Job
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.VisionCorrectionJob.ddXPos">
            <summary>
            X Position
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.VisionCorrectionJob.ddYPos">
            <summary>
            Y Position
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.VisionCorrectionJob.ddAngle">
            <summary>
            Angle
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.VisionCorrectionJob.ddScore">
            <summary>
            Score
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.VisionCorrectionJob._dbUseCalibrationTool">
            <summary>
            Indicate whether this use calibration tool
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionCorrectionJob.#ctor">
            <summary>
            Constructor for xml serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionCorrectionJob.#ctor(System.String)">
            <summary>
            First time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionCorrectionJob.DefineListResultData(System.Collections.Generic.List{MPT.USN.CommonLib.Data.DataType})">
            <summary>
            Define result data of this job
            </summary>
            <param name="listData"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.VisionCorrectionJob.DefineListDataForMeanSigma(System.Collections.Generic.List{MPT.USN.CommonLib.Data.DataDouble})">
            <summary>
            Data for mean sigma monitor
            </summary>
            <param name="listData"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.VisionCorrectionJob.XPos">
            <summary>
            Get/Set X Position
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.VisionCorrectionJob.YPos">
            <summary>
            Get/Set Y Position
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.VisionCorrectionJob.Angle">
            <summary>
            Get/Set Angle
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.VisionCorrectionJob.Score">
            <summary>
            Get/Set Score
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.VisionCorrectionJob.UseCalibrationTool">
            <summary>
            Get/Set whether we are using calibration tool
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.MultiPatternsLocatorJob">
            <summary>
            Multi patterns locator job
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.MultiPatternsLocatorJob.ddPatternCount">
            <summary>
            Place holder for pattern count
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.MultiPatternsLocatorJob.ddPatternScore">
            <summary>
            Place holder for pattern score
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.MultiPatternsLocatorJob.ddPatternXPos">
            <summary>
            Place holder for pattern x pos
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.MultiPatternsLocatorJob.ddPatternYPos">
            <summary>
            Place holder for pattern y pos
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.MultiPatternsLocatorJob.ddPatternAngle">
            <summary>
            Place holder for pattern angle
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.MultiPatternsLocatorJob.#ctor">
            <summary>
            Constructor for xml serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.MultiPatternsLocatorJob.#ctor(System.String)">
            <summary>
            Constructor for first time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.MultiPatternsLocatorJob.DefineListResultData(System.Collections.Generic.List{MPT.USN.CommonLib.Data.DataType})">
            <summary>
            Define result data
            </summary>
            <param name="listData"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.MultiPatternsLocatorJob.ListPatternInfo">
            <summary>
            Get list of pattern information
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.MultiPatternsLocatorJob.PatternInformation">
            <summary>
            Class for general pattern information
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.MultiPatternsLocatorJob.PatternInformation.XPos">
            <summary>
            X position in mm
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.MultiPatternsLocatorJob.PatternInformation.YPos">
            <summary>
            Y position in mm
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.MultiPatternsLocatorJob.PatternInformation.Angle">
            <summary>
            Angle in degree
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.MultiPatternsLocatorJob.PatternInformation.Score">
            <summary>
            Score in percentage
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.GetPRJob">
            <summary>
            Get PR Job
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.GetPRJob.ddPRaw">
            <summary>
            P Raw
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.GetPRJob.ddPCalibrated">
            <summary>
            P Calibrated
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.GetPRJob.ddPCorrelated">
            <summary>
            P Correlated
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.GetPRJob.ddPZCorrected">
            <summary>
            P Z corrected
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.GetPRJob.ddPCorrected">
            <summary>
            P Corrected
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.GetPRJob.ddRRaw">
            <summary>
            R Raw
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.GetPRJob.ddRCalibrated">
            <summary>
            R calibrated
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.GetPRJob.ddRCorrelated">
            <summary>
            R Correlated
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.GetPRJob.ddRCorrected">
            <summary>
            R Corrected
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.GetPRJob.#ctor">
            <summary>
            Construct for xml serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.GetPRJob.#ctor(System.String)">
            <summary>
            First time constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.GetPRJob.Initialize">
            <summary>
            Initialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.GetPRJob.DefineListResultData(System.Collections.Generic.List{MPT.USN.CommonLib.Data.DataType})">
            <summary>
            Define result data list
            </summary>
            <param name="listData"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.GetPRJob.DefineListDataForMeanSigma(System.Collections.Generic.List{MPT.USN.CommonLib.Data.DataDouble})">
            <summary>
            Define list of data which will be available in the mean sigma monitor window in multiple run
            </summary>
            <param name="listData"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.GetPRJob.PostRunProcessing">
            <summary>
            Additional processing after run
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.GetPRJob.PRaw">
            <summary>
            Get/Set PRaw
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.GetPRJob.PCalibrated">
            <summary>
            Access to P Calibrated parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.GetPRJob.PCorrelated">
            <summary>
            Access to P Correlated parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.GetPRJob.PZCorrected">
            <summary>
            Access to P ZCorrected parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.GetPRJob.PCorrected">
            <summary>
            Access to P Corrected parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.GetPRJob.RRaw">
            <summary>
            Get/Set RRaw
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.GetPRJob.RCalibrated">
            <summary>
            Access to R Calibrated parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.GetPRJob.RCorrelated">
            <summary>
            Access to R Correlated parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.GetPRJob.RCorrected">
            <summary>
            Access to R Corrected parameter
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.VisionSystem.GetZJob">
            <summary>
            Get Z Job
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.GetZJob.ddZRaw">
            <summary>
            Z Raw
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.GetZJob.ddZCalibrated">
            <summary>
            Z Calibrated
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.GetZJob.ddZCorrelated">
            <summary>
            Z correlated
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.VisionSystem.GetZJob.ddZCorrected">
            <summary>
            Z Corrected
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.GetZJob.#ctor">
            <summary>
            Constructor for xml serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.GetZJob.#ctor(System.String)">
            <summary>
            Constructor for first time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.GetZJob.Initialize">
            <summary>
            Initialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.GetZJob.DefineListResultData(System.Collections.Generic.List{MPT.USN.CommonLib.Data.DataType})">
            <summary>
            Define result data (numerical)
            </summary>
            <param name="listData"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.GetZJob.DefineListDataForMeanSigma(System.Collections.Generic.List{MPT.USN.CommonLib.Data.DataDouble})">
            <summary>
            Define data to show mean sigma in multiple run
            </summary>
            <param name="listData"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.VisionSystem.GetZJob.PostRunProcessing">
            <summary>
            Additional processing after run
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.GetZJob.ZRaw">
            <summary>
            Access to Z Raw parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.GetZJob.ZCalibrated">
            <summary>
            Access to Z Calibrated parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.GetZJob.ZCorrelated">
            <summary>
            Access to Z Correlated parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.VisionSystem.GetZJob.ZCorrected">
            <summary>
            Access to Z Corrected parameter
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.AeroTechStub">
            <summary>
            Stubs for Aero Tech
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.AeroTechStub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.AeroTechStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.SWMotionSystemStub">
            <summary>
            Stubs for Aero Tech
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.SWMotionSystemStub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.SWMotionSystemStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.Soloist204Stub">
            <summary>
            Stubs for Aero Tech, Soloist204
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Soloist204Stub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Soloist204Stub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.Parker6KControllerStub">
            <summary>
            Stubs for Parker6k
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Parker6KControllerStub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Parker6KControllerStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.NewportStub">
            <summary>
            Stubs for Newport
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.NewportStub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.NewportStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.ABTSpindleStub">
            <summary>
            Stubs for ABT
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.ABTSpindleStub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.ABTSpindleStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.ColibriStub">
            <summary>
            Stubs for Colibri
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.ColibriStub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.ColibriStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.SanMotionStub">
            <summary>
            Stubs for SanMotion
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.SanMotionStub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.SanMotionStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.CoolMuscleStub">
            <summary>
            Stubs for SanMotion
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.CoolMuscleStub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.CoolMuscleStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.YamahaRCX221_222Stub">
            <summary>
            Stubs for YamahaRCX221_222
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.YamahaRCX221_222Stub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.YamahaRCX221_222Stub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.MitsubishiStub">
            <summary>
            Stubs for Mitsubishi
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MitsubishiStub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.MitsubishiStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.YamahaTrServoControllerStub">
            <summary>
            Stubs for YamahaTrServoController
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.YamahaTrServoControllerStub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.YamahaTrServoControllerStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.ADLink_8134Stub">
            <summary>
            Stubs for ADLink_8134Stub
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.ADLink_8134Stub.#ctor">
            <summary>
            Constructor for xml serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.ADLink_8134Stub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPC.SPCSetupForm">
            <summary>
            Setup form for SPC charts
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPC.SPCSetupForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCSetupForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCSetupForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.SPCSetupForm.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPC.SPCSetupForm.PanelSetupForm">
            <summary>
            access to the panel used for the setup form
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChainPage">
            <summary>
            Summary description for AxisPage.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChainPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChainPage.#ctor(MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChain)">
            <summary>
            Constructor
            </summary>
            <param name="axis"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChainPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChainPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.MotionSystem.Axis.AxisDaisyChainPage.CanSafeDispose">
            <summary>
            Indicate whether this can safely disposed when run out of scene
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Input.InputGroupAdv">
            <summary>
            Summary description for InputGroup.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.InputGroupAdv.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.InputGroupAdv.#ctor(System.String,System.Int32,System.Type)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
            <param name="ioChans"></param>
            <param name="chanType"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.InputGroupAdv.Initialize">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.AlertItemInfo">
            <summary>
            Class to add alert item that is not an error
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.AlertItemInfo.#ctor(MPT.USN.CommonLib.SMMethodCall,System.String,System.String,MPT.USN.CommonLib.MPTBase.DelegateAlertCallback,MPT.USN.CommonLib.MPTBase.DelegateAlertCallback,System.Object)">
            <summary>
             Full constructor
            </summary>
            <param name="mc"></param>
            <param name="sDescription"></param>
            <param name="sButton"></param>
            <param name="remedy"></param>
            <param name="clear"></param>
            <param name="tag"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.AlertItemInfo.#ctor(MPT.USN.CommonLib.SMMethodCall,System.String,System.String,MPT.USN.CommonLib.MPTBase.DelegateAlertCallback,MPT.USN.CommonLib.MPTBase.DelegateAlertCallback)">
            <summary>
             Optional constructor
            </summary>
            <param name="mc"></param>
            <param name="sDescription"></param>
            <param name="sButton"></param>
            <param name="remedy"></param>
            <param name="clear"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.AlertItemInfo.#ctor(System.String)">
            <summary>
             Description constructor
            </summary>
            <param name="sDescription"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.AlertItemInfo.#ctor(MPT.USN.CommonLib.SMMethodCall,System.String)">
            <summary>
            Alert has been called straight from state machine
            </summary>
            <param name="mc"></param>
            <param name="sDescription"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Process.ProcessMgr">
            <summary>
            Summary description for ProcessMgr.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessMgr.Instance">
            <summary>
            Singleton logic
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessMgr.FirePlayStripChange">
            <summary>
            Fire to all process that a playstrip has changed
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessMgr.IsProcess(System.String)">
            <summary>
            Determines if the string is a valid process name
            </summary>
            <param name="strProcess"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessMgr.GetProcessObject(System.String)">
            <summary>
            Name
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessMgr.DeleteProcess(System.String)">
            <summary>
            Delete the process
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessMgr.RenameProcess(System.String)">
            <summary>
            Rename the process
            </summary>
            <param name="oldName"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessMgr.GetProcess(System.String)">
            <summary>
            Get the process by name
            </summary>
            <param name="pName"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessMgr.GetProcessArray">
            <summary>
            Get the process by index
            </summary>
            <returns>Array of all processes</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessMgr.GetProcessCount">
            <summary>
            Return the number of processes
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessMgr.CreateProcess(System.String,System.Int32,System.Boolean)">
            <summary>
            Create a new process
            </summary>
            <param name="name"></param>
            <param name="panel"></param>
            <param name="subroutine"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessMgr.ToggleProcessPanel(MPT.USN.CommonLib.Process.ProcessBase)">
            <summary>
            Change the panel to the next panel
            </summary>
            <param name="proc"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessMgr.DefineAllProcesses">
            <summary>
            Creation of all processes
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessMgr.GetProcessVersions">
            <summary>
            Return all the version ifo for each process
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessMgr.CreateProcessDump(System.String)">
            <summary>
            Create the Process Dump file
            This contains useful information about the state of all porocesses
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessMgr.StartUsage">
            <summary>
            Start the Usage task
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessMgr.DumpProcessUsage(System.String)">
            <summary>
            Dump all the usage info
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessMgr.DumpSystemUsage(System.String,MPT.USN.CommonLib.Process.ThreadUsageItem[])">
            <summary>
            Dump all the SystemUsage Info
            </summary>
            <param name="independentThreadItems"></param>
            <param name="strFilename"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessMgr.InitializeAll">
            <summary>
            Call Initialize to all processes
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessMgr.DestroyAll">
            <summary>
            Call Destroy to all processes
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessMgr.SaveAll">
            <summary>
            Serialize all processes
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessMgr.RegisterProcess(MPT.USN.CommonLib.Process.ProcessBase)">
            <summary>
            Add a process to the list of processes
            </summary>
            <param name="process"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessMgr.BuildTree(System.Windows.Forms.TreeView)">
            <summary>
            Build the component tree
            </summary>
            <param name="tree"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessMgr.LoopAllProcesses">
            <summary>
            Give every process an opportunity to run the process script
            This is called from the main working thread
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessMgr.AllProcesses(System.String)">
            <summary>
            Event has been fired, notify all processes 
            </summary>
            <param name="curEvent"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessMgr.ChangeState(System.String)">
            <summary>
            Change state of a specified process
            </summary>
            <param name="changeState"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessMgr.IsInCurState(System.String)">
            <summary>
            Determines if the process is in the current state
            </summary>
            <param name="curState"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessMgr.RegisterBreakPoint(MPT.USN.CommonLib.Process.SMAction)">
            <summary>
            Register this breakpoint
            </summary>
            <param name="action"></param>
            <returns>True if successfull</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessMgr.UnRegisterBreakPoint(MPT.USN.CommonLib.Process.SMAction)">
            <summary>
            Remove breakpoint from registry
            </summary>
            <param name="action"></param>
            <returns>True if successfull</returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessMgr.ActivateBreakPoint(System.String,MPT.USN.CommonLib.Process.BreakPoint)">
            <summary>
            Activate this breakpoint
            </summary>
            <param name="name"></param>
            <param name="bp"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcessMgr.ReleaseBreakPoint(MPT.USN.CommonLib.Process.SMAction)">
            <summary>
            De-Activate this breakpoint
            </summary>
            <param name="action"></param>
        </member>
        <member name="E:MPT.USN.CommonLib.Process.ProcessMgr.OnPlayStripChange">
            <summary>
            On change to any playstrip
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.ProcessMgr.AllIdle">
            <summary>
            Returns true if all processes are in the state tagged as "Idle"
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.ProcessMgr.AllPaused">
            <summary>
            Returns true if all processes are paused
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.ProcessMgr.AnyPaused">
            <summary>
            Returns true if any one of the processes are are Paused
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.ProcessMgr.AllDisabled">
            <summary>
            Returns true if all processes are disabled
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.ProcessMgr.AllStopped">
            <summary>
            Returns true if all processes are Stopped
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.ProcessMgr.BreakPointListLock">
            <summary>
            Get the brealpointList lock object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.ProcessMgr.BreakPointList">
            <summary>
            Get the list of all breakpoints in the system
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Process.SystemUsage">
            <summary>
            Class for system usage dump
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.SystemUsage.guides">
            <summary>
            Guides
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.SystemUsage.processes">
            <summary>
            Array of procDumps
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.SystemUsage.IndependentThreadItems">
            <summary>
            Array of independant (of State machine) thread activity
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.SystemUsage.#ctor">
            <summary>
            Default constructor for serializing
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.SystemUsage.#ctor(System.Int32)">
            <summary>
            Default constructor for serializing
            </summary>
            <param name="processCount"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Process.ProcDump">
            <summary>
            Class for dumping usage for each process
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.ProcDump.Name">
            <summary>The process name</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.ProcDump.usageStates">
            <summary>The states that have usage items</summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcDump.#ctor">
            <summary>The serializer constructor</summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ProcDump.#ctor(MPT.USN.CommonLib.Process.ProcessBase)">
            <summary>
            Build the item
            </summary>
            <param name="proc"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Process.StateUsageItem">
            <summary>
            Class for state usage
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.StateUsageItem.Process">
            <summary>The process name</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.StateUsageItem.State">
            <summary>The state name</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.StateUsageItem.TimeStamp">
            <summary>The time stamp when this state begins</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.StateUsageItem.Duration">
            <summary>The duration of the sate</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.StateUsageItem.actionUsageItems">
            <summary>The action items called in this state</summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.StateUsageItem.#ctor">
            <summary>The serializer constructor</summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.StateUsageItem.#ctor(System.String,System.String,System.Double,System.Double,MPT.USN.CommonLib.Process.ActionUsageItem[])">
            <summary>
            The creation constructor
            </summary>
            <param name="process"></param>
            <param name="state"></param>
            <param name="timeStamp"></param>
            <param name="duration"></param>
            <param name="actionUsageItems"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.StateUsageItem.Dump(System.IO.StreamWriter)">
            <summary>The process name</summary>
            <param name="f"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.StateUsageItem.EndTimeStamp">
            <summary>
            Get the ending time point
            </summary>
            <returns></returns>
        </member>
        <member name="T:MPT.USN.CommonLib.Process.UsageItem">
            <summary>
            Base class for usage items
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.UsageItem.Name">
            <summary>The name of the action</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.UsageItem.timeStamp">
            <summary>The time stamp when this action begins</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.UsageItem.duration">
            <summary>The duration of the action</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.UsageItem.threadPriority">
            <summary>The Thread priority</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.UsageItem.row">
            <summary>Display row</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.UsageItem.ptAnnot">
            <summary>Point of annotation</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.UsageItem.yOff">
            <summary>Offset for the action in pixels</summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.UsageItem.#ctor">
            <summary>The serializer constructor</summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.UsageItem.#ctor(System.String)">
            <summary>
            Creation constructor
            </summary>
            <param name="Name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.UsageItem.Completed">
            <summary>
            End of thread item
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.UsageItem.EndTimeStamp">
            <summary>
            Get the ending time point
            </summary>
            <returns></returns>
        </member>
        <member name="T:MPT.USN.CommonLib.Process.ActionUsageItem">
            <summary>
            Class for the SMAction items
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.ActionUsageItem.bShowThreadItems">
            <summary>Show State actions</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.ActionUsageItem.rect">
            <summary>Display rectangle for the action</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.ActionUsageItem.CompletedThreadName">
            <summary>The name of the thread that completed the action</summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.ActionUsageItem.ThreadUsageItems">
            <summary>The thread items</summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ActionUsageItem.#ctor">
            <summary>The serializer constructor</summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ActionUsageItem.#ctor(System.String,System.Drawing.Color)">
            <summary>
            Creation constructor
            </summary>
            <param name="Name"></param>
            <param name="Color"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ActionUsageItem.Completed(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            End of SMAction item
            </summary>
            <param name="mc"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.ActionUsageItem.Color">
            <summary>
            Position with repect to
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Process.ActionUsageItem.SerColor">
            <summary>
            Serialize the defined color
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Process.ThreadUsageItem">
            <summary>
            Class for the thread usage items.
            Can be processing, Sleep, mc.suspend, 
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Process.ThreadUsageItem.ThreadName">
            <summary>The thread name</summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ThreadUsageItem.#ctor">
            <summary>The serializer constructor</summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ThreadUsageItem.#ctor(System.String)">
            <summary>
            Creation constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.ThreadUsageItem.#ctor(System.String,System.String)">
            <summary>
            Creation constructor
            </summary>
            <param name="name"></param>
            <param name="origination"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Process.LogicAnd">
            <summary>
            Summary description for LogicAnd.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.LogicAnd.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.LogicAnd.#ctor(MPT.USN.CommonLib.Process.ProcessBase)">
            <summary>
            Constructor
            </summary>
            <param name="procOwner"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.LogicAnd.Evaluate">
            <summary>
            Command to evaluate the logic expression
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.LogicAnd.Dump(System.IO.StreamWriter,System.Int32)">
            <summary>
            Dump the state of the conditional statements
            </summary>
            <param name="f"></param>
            <param name="indentation"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Process.LogicAnd.Clone(System.Type)">
            <summary>
            Clone Logic And
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.DataPanel">
            <summary>
            Summary description for DataPanel.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DataPanel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataPanel.#ctor(System.Windows.Forms.Button)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataPanel.RebuildTree">
            <summary>
            Clear and rebuild the data tree.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataPanel.RebuildTree(MPT.USN.CommonLib.MPTBase)">
            <summary>
            Clear and rebuild the data tree.
            </summary>
            <param name="mptBase"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataPanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataPanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataPanel.OnDataSelection(System.Object,System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            Gets called after selection
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataPanel.dataMgr">
            <summary>
            Easy access to data manager singleton
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.HistoryItemDouble">
            <summary>
            History Item for double
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.HistoryItemDouble.#ctor(System.Int64,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="loopCount"></param>
            <param name="dVal"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.HistoryItemDouble.Val">
            <summary>
            Get the value
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.DBDataPropList">
            <summary>
            Container for DBDataProps
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DBDataPropList.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DBDataPropList.#ctor(System.String)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Data.DataEnum">
            <summary>
            Summary description for DataEnum.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataEnum.GetDbVal">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataEnum.GetVal(MPT.USN.CommonLib.Enums.UnitTypes)">
            <summary>
            Return the value as an Object
            </summary>
            <param name="ut"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataEnum.ToInt">
            <summary>
            Converts the enum to Int
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataEnum.#ctor">
            <summary>
            Constructor for Xml serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataEnum.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataEnum.#ctor(System.String,System.Enum)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
            <param name="eVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataEnum.BeforeFileSave">
            <summary>
            Before file save
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataEnum.AfterFileRead">
            <summary>
            After File read
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataEnum.CopyDataFrom(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Copy data from another  DataEnum object
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataEnum.SetVal(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Set the value from the given data type
            </summary>
            <param name="dt"></param>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DataEnum.EnumType">
            <summary>
            Serialized type of enum
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Data.DataEnum.EnumVal">
            <summary>
            Serialized the value
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataEnum.SetDefault">
            <summary>
            Set value to its default
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataEnum.ValToDisplayString">
            <summary>
            Convert the value to string in proper units
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataEnum.ConvertValidate(System.Object)">
            <summary>
            Validate basics for this type
            </summary>
            <param name="oVal"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataEnum.ValToString">
            <summary>
            Convert the value to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataEnum.ValToString(System.String)">
            <summary>
            Convert the value to a formatted string
            </summary>
            <param name="fmt"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataEnum.ValToDefaultString">
            <summary>
            Convert the default value to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataEnum.ValFromString(System.String)">
            <summary>
            Set value from string
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataEnum.Increment">
            <summary>
            Increment by one
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataEnum.Decrement">
            <summary>
            Decrement by one
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Data.DataEnum.IsTrue(System.Object)">
            <summary>
            Returns true if Val is true
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataEnum.ObjRawVal">
            <summary>
            Get/Save the value from an unknown object
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataEnum.Ty">
            <summary>
            Get the underlying enum type
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataEnum.RawVal">
            <summary>
            Get/Set the raw value
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Data.DataEnum.Val">
            <summary>
            Get/Set the value
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.ScanSystem.ScanLabStub">
            <summary>
            Stub class for ScanLab.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanLabStub.#ctor">
            <summary>
            Default constructor for Xml serialization
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.ScanSystem.ScanLabStub.#ctor(System.String)">
            <summary>
            Constructor for 1st time creation
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput">
            <summary>
            Summary description for AcqInput.
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput._data">
            <summary>
            Reference to the input data array
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput._oneDData">
            <summary>
            Reference to the input data array
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput._bSetup">
            <summary>
            Flag to indicate if in setup mode
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput.diSampleRate">
            <summary>
            Sample Rate Data Object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput.diNumSamples">
            <summary>
            Access to the Num Samples Data Object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput.dsTriggerChannel">
            <summary>
            Access to the Trigger Channel data object
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput.ddMinVal">
            <summary>
            Chanel minimum value
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput.ddMaxVal">
            <summary>
            Chanel maximum value
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput.dbAcquireComplete">
            <summary>
            Flag to tell us that aquistion was complete
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput.deTriggerMode">
            <summary>
            Triggering Mode 
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput.ddTriggerLevel">
            <summary>
            Trigger level
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput.#ctor">
            <summary>
            Default constructor for xml streaming
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor used for first-time construction
            </summary>
            <param name="axisId"></param>
            <param name="channel"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput.AddPages(System.Windows.Forms.TabControl,System.Boolean)">
            <summary>
            Add a settings page to this class
            </summary>
            <param name="tab"></param>
            <param name="bSkip"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput.Setup(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Start the acquisition
            </summary>
            <param name="caller"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput.SetupSingle(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Start the acquisition
            </summary>
            <param name="caller"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput.ReadInput(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Read the input
            </summary>
            <param name="caller"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput.DoAcqReadInput(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            
            </summary>
            <param name="mc"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput.ProcessData">
            <summary>
            Process the data
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput.Data">
            <summary>
            Access to data
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput.OneDData">
            <summary>
            Access to data
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput.Done">
            <summary>
            Flag to indicate that input is complete
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput.SampleRate">
            <summary>
            Sample Rate
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput.SamplingRate">
            <summary>
            Sample Rate
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput.SampleRateDefault">
            <summary>
            The default Sample rate (in KHz)
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput.NumSamples">
            <summary>
            Access to the Num Samples parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput.TriggerChannel">
            <summary>
            Access to the Trigger Channel parameter
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput.MinValue">
            <summary>
            Access to the Minimum Value of chanel
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput.MaxValue">
            <summary>
            Access to the Maximum Value of chanel
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput.DelaySec">
            <summary>
            Access to the Delay of Chanel
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput.TriggerMode">
            <summary>
            Access to trigger mode
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput.TriggerLevel">
            <summary>
            Access to trigger level
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.IOSystem.Input.AcqInput.eTriggerMode">
            <summary>
            Enum for Trigeer Mode
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPL.SPLMachine">
            <summary>
            Machine Component
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLMachine.diBoatLoadRampClearIndex">
            <summary>
            Index the first part in boat must be to 
            clear for next boat load down ramp
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLMachine.diBoatUnloadRampIndex">
            <summary>
            Last Index
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLMachine.ddSuspendGuiDelay">
            <summary>
            Amount of delay (Sleep) before running UpdateSuspendGui command
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLMachine.ddLastSuspensionPosition">
            <summary>
            Amount of delay (Sleep) before running UpdateSuspendGui command
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLMachine.diBoatGap">
            <summary>
            Gap between Boat
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLMachine.dsUnloadState">
            <summary>
            Stored flag to last boat is ready for presentation
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLMachine.dbExternalStop">
            <summary>
            Flag that indicates stop request by external
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLMachine.dsExternalStopMessage">
            <summary>
            Message that states the reason why external stop
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLMachine.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLMachine.Initialize">
            <summary>
            Initialize this component
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLMachine.GetGoodPartAtIndexPos(System.Int32)">
            <summary>
            Return true if part is at index pos
            </summary>
            <param name="indexPos"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLMachine.GetAnyPartAtIndexPos(System.Int32)">
            <summary>
            Return true if part is at index pos
            </summary>
            <param name="indexPos"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLMachine.UpdateSuspendedGui(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Update all Suspended Gui
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLMachine.DoUpdateSuspendedGui(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Worker call for UpdateSuspendedGui
            </summary>
            <param name="mc"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLMachine.DBActivity(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Obsolete
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLMachine.DoDBActivity(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Put the active suspension object to database
            </summary>
            <param name="mc"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLMachine.CheckBeforeIndex(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Check for any error related to the indexer before indexing.
            This should be called before we perform index.
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLMachine.NewIndex(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Bump the Index for all suspensions in all active boats
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLMachine.BumpUnloadingBoatIndex(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Bump the Index for all suspensions in all active boats
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLMachine.ClearAll(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Clear all boats
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLMachine.currentBaseIndex">
            <summary>
            THe base index to use for a newly initialized boat
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLMachine.InitializeNewBoat(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Boat just arrived. Initialize new boat
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLMachine._presentedBoat">
            <summary>
            The last boat to be presented
            </summary>
        </member>
        <member name="F:MPT.USN.CommonLib.Comp.SPL.SPLMachine._unknownBoat">
            <summary>
            The last boat to be presented
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLMachine.SetSimCamOutFeedOff(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Declare that Cam out feed is off
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLMachine.SetSimCamOutFeedOn(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Declare that Cam out feed is on
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLMachine.UnloadReturnToTarget(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Unload Axis is moving from unload position back to target position.
            Very likely that a boat was stranded on platform
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLMachine.SetBoatPresented(MPT.USN.CommonLib.SMMethodCall)">
            <summary>
            Declare that boat completed final slide
            </summary>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLMachine.UpdateBoatActivity">
            <summary>
            Temp for debugging
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLMachine.AbsolutePos_OnChanged(MPT.USN.CommonLib.Data.DataType)">
            <summary>
            Use this callback to update the Index position
            </summary>
            <remarks>This is called on the first suspension</remarks>
            <param name="sender"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLMachine.ResetBoatCount">
            <summary>
            reset boat count to zero;
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLMachine.GetBoatIndexesForLog">
            <summary>
            Get the string indicated position of all active boats, mainly for log.
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPL.SPLMachine.LogMissingPart(MPT.USN.CommonLib.Comp.SPL.SPLSuspension)">
            <summary>
            Log missing part
            </summary>
            <param name="susp"></param>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLMachine.BoatLoadRampClearIndex">
            <summary>
            Access to Load Clear
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLMachine.SuspendGuiDelayMS">
            <summary>
            Amount of delay (Sleep) before running UpdateSuspendGui command
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLMachine.BoatFrontAtUnload">
            <summary>
            Returns true if front of boat is ready to start to move onto unload platform
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLMachine.BoatFrontAtOrBeyondUnloadPin">
            <summary>
            Returns true if a boat is ready to slide to 1st unload pin
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLMachine.CriticalTiming">
            <summary>
            Returns true if timing is critical
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLMachine.BoatActive">
            <summary>
            Returns true if any boat is active
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLMachine.DefectAlarm">
            <summary>
            Flag that indicates that a stop request has been posted
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLMachine.ExternalStop">
            <summary>
            Get flag that indicates stop request by external
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLMachine.BoatWithoutPart">
            <summary>
            The Part sensor has detected that there is no part at station zero
            What do we do?
            1. We should set suspension's index to Missing
            2. Returns true if this is the first on the boat
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLMachine.UnknownBoat">
            <summary>
            Flag to tell us if boat was detected, but not found in SW
            </summary>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLMachine.BoatLoadRampClear">
            <summary>
            Returns true if the most recent boat has moved far enough 
            to allow the loading axis to return back for a new boat
            </summary>
            <remarks>This property checks the first suspension of the 
            boat to see if it has reached the index specified by with the 
            DataInt: Machine.'Boat Load Ramp Clear Index'
            </remarks>
        </member>
        <member name="P:MPT.USN.CommonLib.Comp.SPL.SPLMachine.BoatNeedsIndexing">
            <summary>
            Returns true if we have a boat that needs to be indexed
            </summary>
        </member>
        <member name="T:MPT.USN.CommonLib.Comp.SPC.RunChartData">
            <summary>
            Class to support the SPC Run Chart data
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.RunChartData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.RunChartData.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="classname"></param>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.RunChartData.GetGraphType">
            <summary>
            return the type of RunChartGraph
            </summary>
            <returns></returns>
        </member>
        <member name="M:MPT.USN.CommonLib.Comp.SPC.RunChartData.InitialGraphSetup">
            <summary>
            First setup for graph
            </summary>
        </member>
    </members>
</doc>
